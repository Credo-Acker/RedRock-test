/*! 版权所有，翻版必究 */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("const less = __webpack_require__(1);\nconst web = __webpack_require__(3);\n\nwindow.onload = function () {\n\tlet weather = document.querySelector('#weather'),\n\t    monthDay = document.querySelector('.month-day'),\n\t    weekday = document.querySelector('.weekday'),\n\t    nongli = document.querySelector('.nongli'),\n\t    dayCondition1 = document.querySelector('.day-condition1'),\n\t    dayCondition2 = document.querySelector('.day-condition2'),\n\t    boss = document.querySelector('.boss');\n\n\tboss.addEventListener('click', function () {\n\t\tlet boss1 = document.querySelector('.boss-left'),\n\t\t    boss2 = document.querySelector('.boss-right');\n\n\t\tlet boss1N = boss1.className,\n\t\t    boss2N = boss2.className;\n\t\tboss1.className = boss1N + ' ' + 'boss1';\n\t\tboss2.className = boss2N + ' ' + 'boss2';\n\n\t\tsetTimeout(function () {\n\t\t\tlet bossN = boss.className;\n\t\t\tboss.className = bossN + ' ' + 'boss-click';\n\t\t}, 1000);\n\t});\n\n\tdate();\n\tinitCanvas();\n\n\t//ajax获取数据库天气\n\tajax({\n\t\tmethor: \"get\",\n\t\turl: \"/forecast\",\n\t\tasyn: true,\n\t\tsuccess: function (data) {\n\t\t\tlet Data = JSON.parse(data);\n\t\t\tlet lis = dayCondition2.querySelectorAll('li');\n\t\t\tfor (var i = 0; i < lis.length; i++) {\n\t\t\t\tlis[i].innerHTML = Data[i].weather;\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction date() {\n\t\tlet myDate = new Date();\n\t\tlet lis = dayCondition1.querySelectorAll('li');\n\t\tlet month = myDate.getMonth() + 1 > 10 ? myDate.getMonth() + 1 : \"0\" + (myDate.getMonth() + 1),\n\t\t    day = myDate.getDay();\n\t\tswitch (day) {\n\t\t\tcase 0:\n\t\t\t\tday = \"星期日\";\n\t\t\t\tlis[1].querySelector('span').innerHTML = \"星期日\";\n\t\t\t\tlis[2].querySelector('span').innerHTML = \"星期一\";\n\t\t\t\tlis[3].querySelector('span').innerHTML = \"星期二\";\n\t\t\t\tlis[4].querySelector('span').innerHTML = \"星期三\";\n\t\t\t\tlis[5].querySelector('span').innerHTML = \"星期四\";\n\t\t\t\tlis[6].querySelector('span').innerHTML = \"星期五\";\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tday = \"星期一\";\n\t\t\t\tlis[1].querySelector('span').innerHTML = \"星期一\";\n\t\t\t\tlis[2].querySelector('span').innerHTML = \"星期二\";\n\t\t\t\tlis[3].querySelector('span').innerHTML = \"星期三\";\n\t\t\t\tlis[4].querySelector('span').innerHTML = \"星期四\";\n\t\t\t\tlis[5].querySelector('span').innerHTML = \"星期五\";\n\t\t\t\tlis[6].querySelector('span').innerHTML = \"星期六\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tday = \"星期二\";\n\t\t\t\tlis[1].querySelector('span').innerHTML = \"星期二\";\n\t\t\t\tlis[2].querySelector('span').innerHTML = \"星期三\";\n\t\t\t\tlis[3].querySelector('span').innerHTML = \"星期四\";\n\t\t\t\tlis[4].querySelector('span').innerHTML = \"星期五\";\n\t\t\t\tlis[5].querySelector('span').innerHTML = \"星期六\";\n\t\t\t\tlis[6].querySelector('span').innerHTML = \"星期六日\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tday = \"星期三\";\n\t\t\t\tlis[1].querySelector('span').innerHTML = \"星期三\";\n\t\t\t\tlis[2].querySelector('span').innerHTML = \"星期四\";\n\t\t\t\tlis[3].querySelector('span').innerHTML = \"星期五\";\n\t\t\t\tlis[4].querySelector('span').innerHTML = \"星期六\";\n\t\t\t\tlis[5].querySelector('span').innerHTML = \"星期日\";\n\t\t\t\tlis[6].querySelector('span').innerHTML = \"星期一\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tday = \"星期四\";\n\t\t\t\tlis[1].querySelector('span').innerHTML = \"星期四\";\n\t\t\t\tlis[2].querySelector('span').innerHTML = \"星期五\";\n\t\t\t\tlis[3].querySelector('span').innerHTML = \"星期六\";\n\t\t\t\tlis[4].querySelector('span').innerHTML = \"星期日\";\n\t\t\t\tlis[5].querySelector('span').innerHTML = \"星期一\";\n\t\t\t\tlis[6].querySelector('span').innerHTML = \"星期二\";\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tday = \"星期五\";\n\t\t\t\tlis[1].querySelector('span').innerHTML = \"星期五\";\n\t\t\t\tlis[2].querySelector('span').innerHTML = \"星期六\";\n\t\t\t\tlis[3].querySelector('span').innerHTML = \"星期日\";\n\t\t\t\tlis[4].querySelector('span').innerHTML = \"星期一\";\n\t\t\t\tlis[5].querySelector('span').innerHTML = \"星期二\";\n\t\t\t\tlis[6].querySelector('span').innerHTML = \"星期三\";\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tday = \"星期六\";\n\t\t\t\tlis[1].querySelector('span').innerHTML = \"星期六\";\n\t\t\t\tlis[2].querySelector('span').innerHTML = \"星期日\";\n\t\t\t\tlis[3].querySelector('span').innerHTML = \"星期一\";\n\t\t\t\tlis[4].querySelector('span').innerHTML = \"星期二\";\n\t\t\t\tlis[5].querySelector('span').innerHTML = \"星期三\";\n\t\t\t\tlis[6].querySelector('span').innerHTML = \"星期四\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tmonthDay.innerHTML = month + \"月\" + myDate.getDate() + \"日\";\n\t\tweekday.innerHTML = day;\n\t}\n\n\tfunction initCanvas() {\n\t\tlet winwidth = window.document.documentElement.getBoundingClientRect().width;\n\t\tlet canvas = document.querySelector('#canvas');\n\t\tif (winwidth > 640) {\n\t\t\twinwidth = 640;\n\t\t}\n\t\tcanvas.width = winwidth;\n\t\tcanvas.height = winwidth / 2;\n\t\tlet cxt = canvas.getContext('2d');\n\n\t\tcxt.beginPath();\n\t\tcxt.moveTo(canvas.width / 21, canvas.height / 21);\n\t\tcxt.lineTo(canvas.width / 21, canvas.height / 21 * 20);\n\t\tcxt.lineTo(canvas.width / 21 * 20, canvas.height / 21 * 20);\n\t\tcxt.stroke();\n\t\tcxt.closePath();\n\n\t\tcxt.beginPath(); //画箭头1\n\t\tcxt.moveTo(canvas.width / 21, canvas.height / 21);\n\t\tcxt.lineTo(canvas.width / 21 - 10, canvas.height / 21 + 15);\n\t\tcxt.stroke();\n\t\tcxt.closePath();\n\n\t\tcxt.beginPath(); //画箭头2\n\t\tcxt.moveTo(canvas.width / 21, canvas.height / 21);\n\t\tcxt.lineTo(canvas.width / 21 + 10, canvas.height / 21 + 15);\n\t\tcxt.stroke();\n\t\tcxt.closePath();\n\n\t\tcxt.beginPath(); //画箭头3\n\t\tcxt.lineTo(canvas.width / 21 * 20, canvas.height / 21 * 20);\n\t\tcxt.lineTo(canvas.width / 21 * 20 - 15, canvas.height / 21 * 20 + 10);\n\t\tcxt.stroke();\n\t\tcxt.closePath();\n\n\t\tcxt.beginPath(); //画箭头4\n\t\tcxt.lineTo(canvas.width / 21 * 20, canvas.height / 21 * 20);\n\t\tcxt.lineTo(canvas.width / 21 * 20 - 15, canvas.height / 21 * 20 - 10);\n\t\tcxt.stroke();\n\t\tcxt.closePath();\n\n\t\tajax({\n\t\t\tmethor: \"get\",\n\t\t\turl: \"/forecast\",\n\t\t\tasyn: true,\n\t\t\tsuccess: function (data) {\n\t\t\t\tlet Data = JSON.parse(data);\n\t\t\t\th1 = Math.ceil((Data[0].max_temp + Data[0].min_temp) / 2);\n\t\t\t\th2 = Math.ceil((Data[1].max_temp + Data[1].min_temp) / 2);\n\t\t\t\th3 = Math.ceil((Data[2].max_temp + Data[2].min_temp) / 2);\n\t\t\t\th4 = Math.ceil((Data[3].max_temp + Data[3].min_temp) / 2);\n\t\t\t\th5 = Math.ceil((Data[4].max_temp + Data[4].min_temp) / 2);\n\t\t\t\th6 = Math.ceil((Data[5].max_temp + Data[5].min_temp) / 2);\n\t\t\t\th7 = Math.ceil((Data[6].max_temp + Data[6].min_temp) / 2);\n\n\t\t\t\tzhexian();\n\t\t\t\tdian();\n\t\t\t\twendu();\n\t\t\t\t//画温度折线\n\t\t\t\tfunction zhexian() {\n\t\t\t\t\tcxt.strokeStyle = \"#999\";\n\t\t\t\t\tcxt.beginPath();\n\t\t\t\t\tcxt.moveTo(Math.floor(canvas.width / 14), Math.floor(canvas.height - canvas.height * h1 / 55));\n\t\t\t\t\tcxt.lineTo(Math.floor(canvas.width / 14 * 3), Math.floor(canvas.height - canvas.height * h2 / 55));\n\t\t\t\t\tcxt.lineTo(Math.floor(canvas.width / 14 * 5), Math.floor(canvas.height - canvas.height * h3 / 55));\n\t\t\t\t\tcxt.lineTo(Math.floor(canvas.width / 14 * 7), Math.floor(canvas.height - canvas.height * h4 / 55));\n\t\t\t\t\tcxt.lineTo(Math.floor(canvas.width / 14 * 9), Math.floor(canvas.height - canvas.height * h5 / 55));\n\t\t\t\t\tcxt.lineTo(Math.floor(canvas.width / 14 * 11), Math.floor(canvas.height - canvas.height * h6 / 55));\n\t\t\t\t\tcxt.lineTo(Math.floor(canvas.width / 14 * 13), Math.floor(canvas.height - canvas.height * h7 / 55));\n\t\t\t\t\tcxt.stroke();\n\t\t\t\t\tcxt.closePath();\n\t\t\t\t}\n\n\t\t\t\t//画温度的点\n\t\t\t\tfunction dian() {\n\t\t\t\t\tcxt.strokeStyle = \"#666\";\n\t\t\t\t\tcxt.beginPath();\n\t\t\t\t\tcxt.arc(Math.floor(canvas.width / 14), Math.floor(canvas.height - canvas.height * h1 / 55), 2, 0, 2 * Math.PI);\n\t\t\t\t\tcxt.arc(Math.floor(canvas.width / 14 * 3), Math.floor(canvas.height - canvas.height * h2 / 55), 2, 0, 2 * Math.PI);\n\t\t\t\t\tcxt.arc(Math.floor(canvas.width / 14 * 5), Math.floor(canvas.height - canvas.height * h3 / 55), 2, 0, 2 * Math.PI);\n\t\t\t\t\tcxt.arc(Math.floor(canvas.width / 14 * 7), Math.floor(canvas.height - canvas.height * h4 / 55), 2, 0, 2 * Math.PI);\n\t\t\t\t\tcxt.arc(Math.floor(canvas.width / 14 * 9), Math.floor(canvas.height - canvas.height * h5 / 55), 2, 0, 2 * Math.PI);\n\t\t\t\t\tcxt.arc(Math.floor(canvas.width / 14 * 11), Math.floor(canvas.height - canvas.height * h6 / 55), 2, 0, 2 * Math.PI);\n\t\t\t\t\tcxt.arc(Math.floor(canvas.width / 14 * 13), Math.floor(canvas.height - canvas.height * h7 / 55), 2, 0, 2 * Math.PI);\n\t\t\t\t\tcxt.stroke();\n\t\t\t\t\tcxt.closePath();\n\t\t\t\t}\n\n\t\t\t\t//写温度\n\t\t\t\tfunction wendu() {\n\t\t\t\t\tcxt.font = \"15px\";\n\t\t\t\t\tcxt.strokeStyle = \"black\";\n\t\t\t\t\tcxt.beginPath();\n\t\t\t\t\t//第一个\n\t\t\t\t\tcxt.strokeText(Data[0].max_temp + \"°\", Math.floor(canvas.width / 14 - 15), Math.floor(canvas.height - canvas.height * h1 / 55 - 15));\n\t\t\t\t\tcxt.strokeText(Data[0].min_temp + \"°\", Math.floor(canvas.width / 14 - 15), Math.floor(canvas.height - canvas.height * h1 / 55 + 20));\n\t\t\t\t\t//第二个\n\t\t\t\t\tcxt.strokeText(Data[1].max_temp + \"°\", Math.floor(canvas.width / 14 * 3 - 15), Math.floor(canvas.height - canvas.height * h2 / 55 - 15));\n\t\t\t\t\tcxt.strokeText(Data[1].min_temp + \"°\", Math.floor(canvas.width / 14 * 3 - 15), Math.floor(canvas.height - canvas.height * h2 / 55 + 15));\n\t\t\t\t\t//第三个\n\t\t\t\t\tcxt.strokeText(Data[2].max_temp + \"°\", Math.floor(canvas.width / 14 * 5 - 15), Math.floor(canvas.height - canvas.height * h3 / 55 - 15));\n\t\t\t\t\tcxt.strokeText(Data[2].min_temp + \"°\", Math.floor(canvas.width / 14 * 5 - 15), Math.floor(canvas.height - canvas.height * h3 / 55 + 20));\n\t\t\t\t\t//第四个\n\t\t\t\t\tcxt.strokeText(Data[3].max_temp + \"°\", Math.floor(canvas.width / 14 * 7 - 15), Math.floor(canvas.height - canvas.height * h4 / 55 - 15));\n\t\t\t\t\tcxt.strokeText(Data[3].min_temp + \"°\", Math.floor(canvas.width / 14 * 7 - 15), Math.floor(canvas.height - canvas.height * h4 / 55 + 20));\n\t\t\t\t\t//第五个\n\t\t\t\t\tcxt.strokeText(Data[4].max_temp + \"°\", Math.floor(canvas.width / 14 * 9 - 15), Math.floor(canvas.height - canvas.height * h5 / 55 - 15));\n\t\t\t\t\tcxt.strokeText(Data[4].min_temp + \"°\", Math.floor(canvas.width / 14 * 9 - 15), Math.floor(canvas.height - canvas.height * h5 / 55 + 20));\n\t\t\t\t\t//第六个\n\t\t\t\t\tcxt.strokeText(Data[5].max_temp + \"°\", Math.floor(canvas.width / 14 * 11 - 15), Math.floor(canvas.height - canvas.height * h6 / 55 - 15));\n\t\t\t\t\tcxt.strokeText(Data[5].min_temp + \"°\", Math.floor(canvas.width / 14 * 11 - 15), Math.floor(canvas.height - canvas.height * h6 / 55 + 20));\n\t\t\t\t\t//第七个\n\t\t\t\t\tcxt.strokeText(Data[6].max_temp + \"°\", Math.floor(canvas.width / 14 * 13 - 15), Math.floor(canvas.height - canvas.height * h7 / 55 - 15));\n\t\t\t\t\tcxt.strokeText(Data[6].min_temp + \"°\", Math.floor(canvas.width / 14 * 13 - 15), Math.floor(canvas.height - canvas.height * h7 / 55 + 20));\n\t\t\t\t\tcxt.closePath();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction ajax(json) {\n\t\t// 创建ajax对象\n\t\tlet xhr = null;\n\t\tlet methor = json.methor || 'get';\n\t\tlet url = json.url;\n\t\tlet asyn = json.asyn ? true : json.asyn == false ? false : true;\n\t\tlet data = json.data || '';\n\t\tlet success = json.success;\n\t\tlet error = json.error;\n\n\t\tif (window.XMLHttpRequest) {\n\t\t\txhr = new XMLHttpRequest();\n\t\t} else {\n\t\t\txhr = new ActiveXObject('Microsoft.XMLHTTP');\n\t\t}\n\t\tif (methor.toLowerCase() === 'get') {\n\t\t\txhr.open(methor, url, asyn);\n\t\t\turl += '?' + data + '&' + new Date().getTime();\n\t\t}\n\t\tif (methor.toLowerCase() === 'post') {\n\t\t\txhr.open(methor, url, asyn);\n\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\t\t}\n\n\t\t// 处理返回数据\n\t\txhr.onreadystatechange = function () {\n\t\t\tif (xhr.readyState == 4) {\n\t\t\t\tif (xhr.status == 200) {\n\t\t\t\t\tsuccess && success(xhr.responseText);\n\t\t\t\t} else {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\terror && error();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\txhr.send(data);\n\t};\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/*!\n * Less - Leaner CSS v2.7.2\n * http://lesscss.org\n *\n * Copyright (c) 2009-2017, Alexis Sellier <self@cloudhead.net>\n * Licensed under the Apache-2.0 License.\n *\n */\n\n /** * @license Apache-2.0\n */\n\n(function(f){if(true){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.less = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar addDataAttr = require(\"./utils\").addDataAttr,\n    browser = require(\"./browser\");\n\nmodule.exports = function(window, options) {\n\n    // use options from the current script tag data attribues\n    addDataAttr(options, browser.currentScript(window));\n\n    if (options.isFileProtocol === undefined) {\n        options.isFileProtocol = /^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(window.location.protocol);\n    }\n\n    // Load styles asynchronously (default: false)\n    //\n    // This is set to `false` by default, so that the body\n    // doesn't start loading before the stylesheets are parsed.\n    // Setting this to `true` can result in flickering.\n    //\n    options.async = options.async || false;\n    options.fileAsync = options.fileAsync || false;\n\n    // Interval between watch polls\n    options.poll = options.poll || (options.isFileProtocol ? 1000 : 1500);\n\n    options.env = options.env || (window.location.hostname == '127.0.0.1' ||\n        window.location.hostname == '0.0.0.0'   ||\n        window.location.hostname == 'localhost' ||\n        (window.location.port &&\n            window.location.port.length > 0)      ||\n        options.isFileProtocol                   ? 'development'\n        : 'production');\n\n    var dumpLineNumbers = /!dumpLineNumbers:(comments|mediaquery|all)/.exec(window.location.hash);\n    if (dumpLineNumbers) {\n        options.dumpLineNumbers = dumpLineNumbers[1];\n    }\n\n    if (options.useFileCache === undefined) {\n        options.useFileCache = true;\n    }\n\n    if (options.onReady === undefined) {\n        options.onReady = true;\n    }\n\n};\n\n},{\"./browser\":3,\"./utils\":10}],2:[function(require,module,exports){\n/**\n * Kicks off less and compiles any stylesheets\n * used in the browser distributed version of less\n * to kick-start less using the browser api\n */\n/*global window, document */\n\n// shim Promise if required\nrequire('promise/polyfill.js');\n\nvar options = window.less || {};\nrequire(\"./add-default-options\")(window, options);\n\nvar less = module.exports = require(\"./index\")(window, options);\n\nwindow.less = less;\n\nvar css, head, style;\n\n// Always restore page visibility\nfunction resolveOrReject(data) {\n    if (data.filename) {\n        console.warn(data);\n    }\n    if (!options.async) {\n        head.removeChild(style);\n    }\n}\n\nif (options.onReady) {\n    if (/!watch/.test(window.location.hash)) {\n        less.watch();\n    }\n    // Simulate synchronous stylesheet loading by blocking page rendering\n    if (!options.async) {\n        css = 'body { display: none !important }';\n        head = document.head || document.getElementsByTagName('head')[0];\n        style = document.createElement('style');\n\n        style.type = 'text/css';\n        if (style.styleSheet) {\n            style.styleSheet.cssText = css;\n        } else {\n            style.appendChild(document.createTextNode(css));\n        }\n\n        head.appendChild(style);\n    }\n    less.registerStylesheetsImmediately();\n    less.pageLoadFinished = less.refresh(less.env === 'development').then(resolveOrReject, resolveOrReject);\n}\n\n},{\"./add-default-options\":1,\"./index\":8,\"promise/polyfill.js\":97}],3:[function(require,module,exports){\nvar utils = require(\"./utils\");\nmodule.exports = {\n    createCSS: function (document, styles, sheet) {\n        // Strip the query-string\n        var href = sheet.href || '';\n\n        // If there is no title set, use the filename, minus the extension\n        var id = 'less:' + (sheet.title || utils.extractId(href));\n\n        // If this has already been inserted into the DOM, we may need to replace it\n        var oldStyleNode = document.getElementById(id);\n        var keepOldStyleNode = false;\n\n        // Create a new stylesheet node for insertion or (if necessary) replacement\n        var styleNode = document.createElement('style');\n        styleNode.setAttribute('type', 'text/css');\n        if (sheet.media) {\n            styleNode.setAttribute('media', sheet.media);\n        }\n        styleNode.id = id;\n\n        if (!styleNode.styleSheet) {\n            styleNode.appendChild(document.createTextNode(styles));\n\n            // If new contents match contents of oldStyleNode, don't replace oldStyleNode\n            keepOldStyleNode = (oldStyleNode !== null && oldStyleNode.childNodes.length > 0 && styleNode.childNodes.length > 0 &&\n                oldStyleNode.firstChild.nodeValue === styleNode.firstChild.nodeValue);\n        }\n\n        var head = document.getElementsByTagName('head')[0];\n\n        // If there is no oldStyleNode, just append; otherwise, only append if we need\n        // to replace oldStyleNode with an updated stylesheet\n        if (oldStyleNode === null || keepOldStyleNode === false) {\n            var nextEl = sheet && sheet.nextSibling || null;\n            if (nextEl) {\n                nextEl.parentNode.insertBefore(styleNode, nextEl);\n            } else {\n                head.appendChild(styleNode);\n            }\n        }\n        if (oldStyleNode && keepOldStyleNode === false) {\n            oldStyleNode.parentNode.removeChild(oldStyleNode);\n        }\n\n        // For IE.\n        // This needs to happen *after* the style element is added to the DOM, otherwise IE 7 and 8 may crash.\n        // See http://social.msdn.microsoft.com/Forums/en-US/7e081b65-878a-4c22-8e68-c10d39c2ed32/internet-explorer-crashes-appending-style-element-to-head\n        if (styleNode.styleSheet) {\n            try {\n                styleNode.styleSheet.cssText = styles;\n            } catch (e) {\n                throw new Error(\"Couldn't reassign styleSheet.cssText.\");\n            }\n        }\n    },\n    currentScript: function(window) {\n        var document = window.document;\n        return document.currentScript || (function() {\n            var scripts = document.getElementsByTagName(\"script\");\n            return scripts[scripts.length - 1];\n        })();\n    }\n};\n\n},{\"./utils\":10}],4:[function(require,module,exports){\n// Cache system is a bit outdated and could do with work\n\nmodule.exports = function(window, options, logger) {\n    var cache = null;\n    if (options.env !== 'development') {\n        try {\n            cache = (typeof window.localStorage === 'undefined') ? null : window.localStorage;\n        } catch (_) {}\n    }\n    return {\n        setCSS: function(path, lastModified, modifyVars, styles) {\n            if (cache) {\n                logger.info('saving ' + path + ' to cache.');\n                try {\n                    cache.setItem(path, styles);\n                    cache.setItem(path + ':timestamp', lastModified);\n                    if (modifyVars) {\n                        cache.setItem(path + ':vars', JSON.stringify(modifyVars));\n                    }\n                } catch(e) {\n                    //TODO - could do with adding more robust error handling\n                    logger.error('failed to save \"' + path + '\" to local storage for caching.');\n                }\n            }\n        },\n        getCSS: function(path, webInfo, modifyVars) {\n            var css       = cache && cache.getItem(path),\n                timestamp = cache && cache.getItem(path + ':timestamp'),\n                vars      = cache && cache.getItem(path + ':vars');\n\n            modifyVars = modifyVars || {};\n\n            if (timestamp && webInfo.lastModified &&\n                (new Date(webInfo.lastModified).valueOf() ===\n                    new Date(timestamp).valueOf()) &&\n                (!modifyVars && !vars || JSON.stringify(modifyVars) === vars)) {\n                // Use local copy\n                return css;\n            }\n        }\n    };\n};\n\n},{}],5:[function(require,module,exports){\nvar utils = require(\"./utils\"),\n    browser = require(\"./browser\");\n\nmodule.exports = function(window, less, options) {\n\n    function errorHTML(e, rootHref) {\n        var id = 'less-error-message:' + utils.extractId(rootHref || \"\");\n        var template = '<li><label>{line}</label><pre class=\"{class}\">{content}</pre></li>';\n        var elem = window.document.createElement('div'), timer, content, errors = [];\n        var filename = e.filename || rootHref;\n        var filenameNoPath = filename.match(/([^\\/]+(\\?.*)?)$/)[1];\n\n        elem.id        = id;\n        elem.className = \"less-error-message\";\n\n        content = '<h3>'  + (e.type || \"Syntax\") + \"Error: \" + (e.message || 'There is an error in your .less file') +\n            '</h3>' + '<p>in <a href=\"' + filename   + '\">' + filenameNoPath + \"</a> \";\n\n        var errorline = function (e, i, classname) {\n            if (e.extract[i] !== undefined) {\n                errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                    .replace(/\\{class\\}/, classname)\n                    .replace(/\\{content\\}/, e.extract[i]));\n            }\n        };\n\n        if (e.extract) {\n            errorline(e, 0, '');\n            errorline(e, 1, 'line');\n            errorline(e, 2, '');\n            content += 'on line ' + e.line + ', column ' + (e.column + 1) + ':</p>' +\n                '<ul>' + errors.join('') + '</ul>';\n        }\n        if (e.stack && (e.extract || options.logLevel >= 4)) {\n            content += '<br/>Stack Trace</br />' + e.stack.split('\\n').slice(1).join('<br/>');\n        }\n        elem.innerHTML = content;\n\n        // CSS for error messages\n        browser.createCSS(window.document, [\n            '.less-error-message ul, .less-error-message li {',\n            'list-style-type: none;',\n            'margin-right: 15px;',\n            'padding: 4px 0;',\n            'margin: 0;',\n            '}',\n            '.less-error-message label {',\n            'font-size: 12px;',\n            'margin-right: 15px;',\n            'padding: 4px 0;',\n            'color: #cc7777;',\n            '}',\n            '.less-error-message pre {',\n            'color: #dd6666;',\n            'padding: 4px 0;',\n            'margin: 0;',\n            'display: inline-block;',\n            '}',\n            '.less-error-message pre.line {',\n            'color: #ff0000;',\n            '}',\n            '.less-error-message h3 {',\n            'font-size: 20px;',\n            'font-weight: bold;',\n            'padding: 15px 0 5px 0;',\n            'margin: 0;',\n            '}',\n            '.less-error-message a {',\n            'color: #10a',\n            '}',\n            '.less-error-message .error {',\n            'color: red;',\n            'font-weight: bold;',\n            'padding-bottom: 2px;',\n            'border-bottom: 1px dashed red;',\n            '}'\n        ].join('\\n'), { title: 'error-message' });\n\n        elem.style.cssText = [\n            \"font-family: Arial, sans-serif\",\n            \"border: 1px solid #e00\",\n            \"background-color: #eee\",\n            \"border-radius: 5px\",\n            \"-webkit-border-radius: 5px\",\n            \"-moz-border-radius: 5px\",\n            \"color: #e00\",\n            \"padding: 15px\",\n            \"margin-bottom: 15px\"\n        ].join(';');\n\n        if (options.env === 'development') {\n            timer = setInterval(function () {\n                var document = window.document,\n                    body = document.body;\n                if (body) {\n                    if (document.getElementById(id)) {\n                        body.replaceChild(elem, document.getElementById(id));\n                    } else {\n                        body.insertBefore(elem, body.firstChild);\n                    }\n                    clearInterval(timer);\n                }\n            }, 10);\n        }\n    }\n\n    function removeErrorHTML(path) {\n        var node = window.document.getElementById('less-error-message:' + utils.extractId(path));\n        if (node) {\n            node.parentNode.removeChild(node);\n        }\n    }\n\n    function removeErrorConsole(path) {\n        //no action\n    }\n\n    function removeError(path) {\n        if (!options.errorReporting || options.errorReporting === \"html\") {\n            removeErrorHTML(path);\n        } else if (options.errorReporting === \"console\") {\n            removeErrorConsole(path);\n        } else if (typeof options.errorReporting === 'function') {\n            options.errorReporting(\"remove\", path);\n        }\n    }\n\n    function errorConsole(e, rootHref) {\n        var template = '{line} {content}';\n        var filename = e.filename || rootHref;\n        var errors = [];\n        var content = (e.type || \"Syntax\") + \"Error: \" + (e.message || 'There is an error in your .less file') +\n            \" in \" + filename + \" \";\n\n        var errorline = function (e, i, classname) {\n            if (e.extract[i] !== undefined) {\n                errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                    .replace(/\\{class\\}/, classname)\n                    .replace(/\\{content\\}/, e.extract[i]));\n            }\n        };\n\n        if (e.extract) {\n            errorline(e, 0, '');\n            errorline(e, 1, 'line');\n            errorline(e, 2, '');\n            content += 'on line ' + e.line + ', column ' + (e.column + 1) + ':\\n' +\n                errors.join('\\n');\n        }\n        if (e.stack && (e.extract || options.logLevel >= 4)) {\n            content += '\\nStack Trace\\n' + e.stack;\n        }\n        less.logger.error(content);\n    }\n\n    function error(e, rootHref) {\n        if (!options.errorReporting || options.errorReporting === \"html\") {\n            errorHTML(e, rootHref);\n        } else if (options.errorReporting === \"console\") {\n            errorConsole(e, rootHref);\n        } else if (typeof options.errorReporting === 'function') {\n            options.errorReporting(\"add\", e, rootHref);\n        }\n    }\n\n    return {\n        add: error,\n        remove: removeError\n    };\n};\n\n},{\"./browser\":3,\"./utils\":10}],6:[function(require,module,exports){\n/*global window, XMLHttpRequest */\n\nmodule.exports = function(options, logger) {\n\n    var AbstractFileManager = require(\"../less/environment/abstract-file-manager.js\");\n\n    var fileCache = {};\n\n    //TODOS - move log somewhere. pathDiff and doing something similar in node. use pathDiff in the other browser file for the initial load\n\n    function getXMLHttpRequest() {\n        if (window.XMLHttpRequest && (window.location.protocol !== \"file:\" || !(\"ActiveXObject\" in window))) {\n            return new XMLHttpRequest();\n        } else {\n            try {\n                /*global ActiveXObject */\n                return new ActiveXObject(\"Microsoft.XMLHTTP\");\n            } catch (e) {\n                logger.error(\"browser doesn't support AJAX.\");\n                return null;\n            }\n        }\n    }\n\n    var FileManager = function() {\n    };\n\n    FileManager.prototype = new AbstractFileManager();\n\n    FileManager.prototype.alwaysMakePathsAbsolute = function alwaysMakePathsAbsolute() {\n        return true;\n    };\n    FileManager.prototype.join = function join(basePath, laterPath) {\n        if (!basePath) {\n            return laterPath;\n        }\n        return this.extractUrlParts(laterPath, basePath).path;\n    };\n    FileManager.prototype.doXHR = function doXHR(url, type, callback, errback) {\n\n        var xhr = getXMLHttpRequest();\n        var async = options.isFileProtocol ? options.fileAsync : true;\n\n        if (typeof xhr.overrideMimeType === 'function') {\n            xhr.overrideMimeType('text/css');\n        }\n        logger.debug(\"XHR: Getting '\" + url + \"'\");\n        xhr.open('GET', url, async);\n        xhr.setRequestHeader('Accept', type || 'text/x-less, text/css; q=0.9, */*; q=0.5');\n        xhr.send(null);\n\n        function handleResponse(xhr, callback, errback) {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                callback(xhr.responseText,\n                    xhr.getResponseHeader(\"Last-Modified\"));\n            } else if (typeof errback === 'function') {\n                errback(xhr.status, url);\n            }\n        }\n\n        if (options.isFileProtocol && !options.fileAsync) {\n            if (xhr.status === 0 || (xhr.status >= 200 && xhr.status < 300)) {\n                callback(xhr.responseText);\n            } else {\n                errback(xhr.status, url);\n            }\n        } else if (async) {\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState == 4) {\n                    handleResponse(xhr, callback, errback);\n                }\n            };\n        } else {\n            handleResponse(xhr, callback, errback);\n        }\n    };\n    FileManager.prototype.supports = function(filename, currentDirectory, options, environment) {\n        return true;\n    };\n\n    FileManager.prototype.clearFileCache = function() {\n        fileCache = {};\n    };\n\n    FileManager.prototype.loadFile = function loadFile(filename, currentDirectory, options, environment, callback) {\n        if (currentDirectory && !this.isPathAbsolute(filename)) {\n            filename = currentDirectory + filename;\n        }\n\n        options = options || {};\n\n        // sheet may be set to the stylesheet for the initial load or a collection of properties including\n        // some context variables for imports\n        var hrefParts = this.extractUrlParts(filename, window.location.href);\n        var href      = hrefParts.url;\n\n        if (options.useFileCache && fileCache[href]) {\n            try {\n                var lessText = fileCache[href];\n                callback(null, { contents: lessText, filename: href, webInfo: { lastModified: new Date() }});\n            } catch (e) {\n                callback({filename: href, message: \"Error loading file \" + href + \" error was \" + e.message});\n            }\n            return;\n        }\n\n        this.doXHR(href, options.mime, function doXHRCallback(data, lastModified) {\n            // per file cache\n            fileCache[href] = data;\n\n            // Use remote copy (re-parse)\n            callback(null, { contents: data, filename: href, webInfo: { lastModified: lastModified }});\n        }, function doXHRError(status, url) {\n            callback({ type: 'File', message: \"'\" + url + \"' wasn't found (\" + status + \")\", href: href });\n        });\n    };\n\n    return FileManager;\n};\n\n},{\"../less/environment/abstract-file-manager.js\":15}],7:[function(require,module,exports){\nmodule.exports = function() {\n\n    var functionRegistry = require(\"./../less/functions/function-registry\");\n\n    function imageSize() {\n        throw {\n            type: \"Runtime\",\n            message: \"Image size functions are not supported in browser version of less\"\n        };\n    }\n\n    var imageFunctions = {\n        \"image-size\": function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        },\n        \"image-width\": function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        },\n        \"image-height\": function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        }\n    };\n\n    functionRegistry.addMultiple(imageFunctions);\n};\n\n},{\"./../less/functions/function-registry\":22}],8:[function(require,module,exports){\n//\n// index.js\n// Should expose the additional browser functions on to the less object\n//\nvar addDataAttr = require(\"./utils\").addDataAttr,\n    browser = require(\"./browser\");\n\nmodule.exports = function(window, options) {\n    var document = window.document;\n    var less = require('../less')();\n\n    //module.exports = less;\n    less.options = options;\n    var environment = less.environment,\n        FileManager = require(\"./file-manager\")(options, less.logger),\n        fileManager = new FileManager();\n    environment.addFileManager(fileManager);\n    less.FileManager = FileManager;\n\n    require(\"./log-listener\")(less, options);\n    var errors = require(\"./error-reporting\")(window, less, options);\n    var cache = less.cache = options.cache || require(\"./cache\")(window, options, less.logger);\n    require('./image-size')(less.environment);\n\n    //Setup user functions\n    if (options.functions) {\n        less.functions.functionRegistry.addMultiple(options.functions);\n    }\n\n    var typePattern = /^text\\/(x-)?less$/;\n\n    function postProcessCSS(styles) { // deprecated, use a plugin for postprocesstasks\n        if (options.postProcessor && typeof options.postProcessor === 'function') {\n            styles = options.postProcessor.call(styles, styles) || styles;\n        }\n        return styles;\n    }\n\n    function clone(obj) {\n        var cloned = {};\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                cloned[prop] = obj[prop];\n            }\n        }\n        return cloned;\n    }\n\n    // only really needed for phantom\n    function bind(func, thisArg) {\n        var curryArgs = Array.prototype.slice.call(arguments, 2);\n        return function() {\n            var args = curryArgs.concat(Array.prototype.slice.call(arguments, 0));\n            return func.apply(thisArg, args);\n        };\n    }\n\n    function loadStyles(modifyVars) {\n        var styles = document.getElementsByTagName('style'),\n            style;\n\n        for (var i = 0; i < styles.length; i++) {\n            style = styles[i];\n            if (style.type.match(typePattern)) {\n                var instanceOptions = clone(options);\n                instanceOptions.modifyVars = modifyVars;\n                var lessText = style.innerHTML || '';\n                instanceOptions.filename = document.location.href.replace(/#.*$/, '');\n\n                /*jshint loopfunc:true */\n                // use closure to store current style\n                less.render(lessText, instanceOptions,\n                        bind(function(style, e, result) {\n                            if (e) {\n                                errors.add(e, \"inline\");\n                            } else {\n                                style.type = 'text/css';\n                                if (style.styleSheet) {\n                                    style.styleSheet.cssText = result.css;\n                                } else {\n                                    style.innerHTML = result.css;\n                                }\n                            }\n                        }, null, style));\n            }\n        }\n    }\n\n    function loadStyleSheet(sheet, callback, reload, remaining, modifyVars) {\n\n        var instanceOptions = clone(options);\n        addDataAttr(instanceOptions, sheet);\n        instanceOptions.mime = sheet.type;\n\n        if (modifyVars) {\n            instanceOptions.modifyVars = modifyVars;\n        }\n\n        function loadInitialFileCallback(loadedFile) {\n\n            var data = loadedFile.contents,\n                path = loadedFile.filename,\n                webInfo = loadedFile.webInfo;\n\n            var newFileInfo = {\n                currentDirectory: fileManager.getPath(path),\n                filename: path,\n                rootFilename: path,\n                relativeUrls: instanceOptions.relativeUrls};\n\n            newFileInfo.entryPath = newFileInfo.currentDirectory;\n            newFileInfo.rootpath = instanceOptions.rootpath || newFileInfo.currentDirectory;\n\n            if (webInfo) {\n                webInfo.remaining = remaining;\n\n                var css = cache.getCSS(path, webInfo, instanceOptions.modifyVars);\n                if (!reload && css) {\n                    webInfo.local = true;\n                    callback(null, css, data, sheet, webInfo, path);\n                    return;\n                }\n\n            }\n\n            //TODO add tests around how this behaves when reloading\n            errors.remove(path);\n\n            instanceOptions.rootFileInfo = newFileInfo;\n            less.render(data, instanceOptions, function(e, result) {\n                if (e) {\n                    e.href = path;\n                    callback(e);\n                } else {\n                    result.css = postProcessCSS(result.css);\n                    cache.setCSS(sheet.href, webInfo.lastModified, instanceOptions.modifyVars, result.css);\n                    callback(null, result.css, data, sheet, webInfo, path);\n                }\n            });\n        }\n\n        fileManager.loadFile(sheet.href, null, instanceOptions, environment, function(e, loadedFile) {\n            if (e) {\n                callback(e);\n                return;\n            }\n            loadInitialFileCallback(loadedFile);\n        });\n    }\n\n    function loadStyleSheets(callback, reload, modifyVars) {\n        for (var i = 0; i < less.sheets.length; i++) {\n            loadStyleSheet(less.sheets[i], callback, reload, less.sheets.length - (i + 1), modifyVars);\n        }\n    }\n\n    function initRunningMode() {\n        if (less.env === 'development') {\n            less.watchTimer = setInterval(function () {\n                if (less.watchMode) {\n                    fileManager.clearFileCache();\n                    loadStyleSheets(function (e, css, _, sheet, webInfo) {\n                        if (e) {\n                            errors.add(e, e.href || sheet.href);\n                        } else if (css) {\n                            browser.createCSS(window.document, css, sheet);\n                        }\n                    });\n                }\n            }, options.poll);\n        }\n    }\n\n    //\n    // Watch mode\n    //\n    less.watch   = function () {\n        if (!less.watchMode ) {\n            less.env = 'development';\n            initRunningMode();\n        }\n        this.watchMode = true;\n        return true;\n    };\n\n    less.unwatch = function () {clearInterval(less.watchTimer); this.watchMode = false; return false; };\n\n    //\n    // Synchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\".\n    //\n    less.registerStylesheetsImmediately = function() {\n        var links = document.getElementsByTagName('link');\n        less.sheets = [];\n\n        for (var i = 0; i < links.length; i++) {\n            if (links[i].rel === 'stylesheet/less' || (links[i].rel.match(/stylesheet/) &&\n                (links[i].type.match(typePattern)))) {\n                less.sheets.push(links[i]);\n            }\n        }\n    };\n\n    //\n    // Asynchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\", returning a Promise.\n    //\n    less.registerStylesheets = function() {\n        return new Promise(function(resolve, reject) {\n            less.registerStylesheetsImmediately();\n            resolve();\n        });\n    };\n\n    //\n    // With this function, it's possible to alter variables and re-render\n    // CSS without reloading less-files\n    //\n    less.modifyVars = function(record) {\n        return less.refresh(true, record, false);\n    };\n\n    less.refresh = function (reload, modifyVars, clearFileCache) {\n        if ((reload || clearFileCache) && clearFileCache !== false) {\n            fileManager.clearFileCache();\n        }\n        return new Promise(function (resolve, reject) {\n            var startTime, endTime, totalMilliseconds, remainingSheets;\n            startTime = endTime = new Date();\n\n            // Set counter for remaining unprocessed sheets\n            remainingSheets = less.sheets.length;\n\n            if (remainingSheets === 0) {\n\n                endTime = new Date();\n                totalMilliseconds = endTime - startTime;\n                less.logger.info(\"Less has finished and no sheets were loaded.\");\n                resolve({\n                    startTime: startTime,\n                    endTime: endTime,\n                    totalMilliseconds: totalMilliseconds,\n                    sheets: less.sheets.length\n                });\n\n            } else {\n                // Relies on less.sheets array, callback seems to be guaranteed to be called for every element of the array\n                loadStyleSheets(function (e, css, _, sheet, webInfo) {\n                    if (e) {\n                        errors.add(e, e.href || sheet.href);\n                        reject(e);\n                        return;\n                    }\n                    if (webInfo.local) {\n                        less.logger.info(\"Loading \" + sheet.href + \" from cache.\");\n                    } else {\n                        less.logger.info(\"Rendered \" + sheet.href + \" successfully.\");\n                    }\n                    browser.createCSS(window.document, css, sheet);\n                    less.logger.info(\"CSS for \" + sheet.href + \" generated in \" + (new Date() - endTime) + 'ms');\n\n                    // Count completed sheet\n                    remainingSheets--;\n\n                    // Check if the last remaining sheet was processed and then call the promise\n                    if (remainingSheets === 0) {\n                        totalMilliseconds = new Date() - startTime;\n                        less.logger.info(\"Less has finished. CSS generated in \" + totalMilliseconds + 'ms');\n                        resolve({\n                            startTime: startTime,\n                            endTime: endTime,\n                            totalMilliseconds: totalMilliseconds,\n                            sheets: less.sheets.length\n                        });\n                    }\n                    endTime = new Date();\n                }, reload, modifyVars);\n            }\n\n            loadStyles(modifyVars);\n        });\n    };\n\n    less.refreshStyles = loadStyles;\n    return less;\n};\n\n},{\"../less\":31,\"./browser\":3,\"./cache\":4,\"./error-reporting\":5,\"./file-manager\":6,\"./image-size\":7,\"./log-listener\":9,\"./utils\":10}],9:[function(require,module,exports){\nmodule.exports = function(less, options) {\n\n    var logLevel_debug = 4,\n        logLevel_info = 3,\n        logLevel_warn = 2,\n        logLevel_error = 1;\n\n    // The amount of logging in the javascript console.\n    // 3 - Debug, information and errors\n    // 2 - Information and errors\n    // 1 - Errors\n    // 0 - None\n    // Defaults to 2\n    options.logLevel = typeof options.logLevel !== 'undefined' ? options.logLevel : (options.env === 'development' ?  logLevel_info : logLevel_error);\n\n    if (!options.loggers) {\n        options.loggers = [{\n            debug: function(msg) {\n                if (options.logLevel >= logLevel_debug) {\n                    console.log(msg);\n                }\n            },\n            info: function(msg) {\n                if (options.logLevel >= logLevel_info) {\n                    console.log(msg);\n                }\n            },\n            warn: function(msg) {\n                if (options.logLevel >= logLevel_warn) {\n                    console.warn(msg);\n                }\n            },\n            error: function(msg) {\n                if (options.logLevel >= logLevel_error) {\n                    console.error(msg);\n                }\n            }\n        }];\n    }\n    for (var i = 0; i < options.loggers.length; i++) {\n        less.logger.addListener(options.loggers[i]);\n    }\n};\n\n},{}],10:[function(require,module,exports){\nmodule.exports = {\n    extractId: function(href) {\n        return href.replace(/^[a-z-]+:\\/+?[^\\/]+/, '')  // Remove protocol & domain\n            .replace(/[\\?\\&]livereload=\\w+/, '')        // Remove LiveReload cachebuster\n            .replace(/^\\//, '')                         // Remove root /\n            .replace(/\\.[a-zA-Z]+$/, '')                // Remove simple extension\n            .replace(/[^\\.\\w-]+/g, '-')                 // Replace illegal characters\n            .replace(/\\./g, ':');                       // Replace dots with colons(for valid id)\n    },\n    addDataAttr: function(options, tag) {\n        for (var opt in tag.dataset) {\n            if (tag.dataset.hasOwnProperty(opt)) {\n                if (opt === \"env\" || opt === \"dumpLineNumbers\" || opt === \"rootpath\" || opt === \"errorReporting\") {\n                    options[opt] = tag.dataset[opt];\n                } else {\n                    try {\n                        options[opt] = JSON.parse(tag.dataset[opt]);\n                    }\n                    catch(_) {}\n                }\n            }\n        }\n    }\n};\n\n},{}],11:[function(require,module,exports){\nvar contexts = {};\nmodule.exports = contexts;\n\nvar copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {\n    if (!original) { return; }\n\n    for (var i = 0; i < propertiesToCopy.length; i++) {\n        if (original.hasOwnProperty(propertiesToCopy[i])) {\n            destination[propertiesToCopy[i]] = original[propertiesToCopy[i]];\n        }\n    }\n};\n\n/*\n parse is used whilst parsing\n */\nvar parseCopyProperties = [\n    // options\n    'paths',            // option - unmodified - paths to search for imports on\n    'relativeUrls',     // option - whether to adjust URL's to be relative\n    'rootpath',         // option - rootpath to append to URL's\n    'strictImports',    // option -\n    'insecure',         // option - whether to allow imports from insecure ssl hosts\n    'dumpLineNumbers',  // option - whether to dump line numbers\n    'compress',         // option - whether to compress\n    'syncImport',       // option - whether to import synchronously\n    'chunkInput',       // option - whether to chunk input. more performant but causes parse issues.\n    'mime',             // browser only - mime type for sheet import\n    'useFileCache',     // browser only - whether to use the per file session cache\n    // context\n    'processImports',   // option & context - whether to process imports. if false then imports will not be imported.\n                        // Used by the import manager to stop multiple import visitors being created.\n    'pluginManager'     // Used as the plugin manager for the session\n];\n\ncontexts.Parse = function(options) {\n    copyFromOriginal(options, this, parseCopyProperties);\n\n    if (typeof this.paths === \"string\") { this.paths = [this.paths]; }\n};\n\nvar evalCopyProperties = [\n    'paths',          // additional include paths\n    'compress',       // whether to compress\n    'ieCompat',       // whether to enforce IE compatibility (IE8 data-uri)\n    'strictMath',     // whether math has to be within parenthesis\n    'strictUnits',    // whether units need to evaluate correctly\n    'sourceMap',      // whether to output a source map\n    'importMultiple', // whether we are currently importing multiple copies\n    'urlArgs',        // whether to add args into url tokens\n    'javascriptEnabled',// option - whether JavaScript is enabled. if undefined, defaults to true\n    'pluginManager',  // Used as the plugin manager for the session\n    'importantScope'  // used to bubble up !important statements\n    ];\n\ncontexts.Eval = function(options, frames) {\n    copyFromOriginal(options, this, evalCopyProperties);\n\n    if (typeof this.paths === \"string\") { this.paths = [this.paths]; }\n\n    this.frames = frames || [];\n    this.importantScope = this.importantScope || [];\n};\n\ncontexts.Eval.prototype.inParenthesis = function () {\n    if (!this.parensStack) {\n        this.parensStack = [];\n    }\n    this.parensStack.push(true);\n};\n\ncontexts.Eval.prototype.outOfParenthesis = function () {\n    this.parensStack.pop();\n};\n\ncontexts.Eval.prototype.isMathOn = function () {\n    return this.strictMath ? (this.parensStack && this.parensStack.length) : true;\n};\n\ncontexts.Eval.prototype.isPathRelative = function (path) {\n    return !/^(?:[a-z-]+:|\\/|#)/i.test(path);\n};\n\ncontexts.Eval.prototype.normalizePath = function( path ) {\n    var\n      segments = path.split(\"/\").reverse(),\n      segment;\n\n    path = [];\n    while (segments.length !== 0 ) {\n        segment = segments.pop();\n        switch( segment ) {\n            case \".\":\n                break;\n            case \"..\":\n                if ((path.length === 0) || (path[path.length - 1] === \"..\")) {\n                    path.push( segment );\n                } else {\n                    path.pop();\n                }\n                break;\n            default:\n                path.push( segment );\n                break;\n        }\n    }\n\n    return path.join(\"/\");\n};\n\n//todo - do the same for the toCSS ?\n\n},{}],12:[function(require,module,exports){\nmodule.exports = {\n    'aliceblue':'#f0f8ff',\n    'antiquewhite':'#faebd7',\n    'aqua':'#00ffff',\n    'aquamarine':'#7fffd4',\n    'azure':'#f0ffff',\n    'beige':'#f5f5dc',\n    'bisque':'#ffe4c4',\n    'black':'#000000',\n    'blanchedalmond':'#ffebcd',\n    'blue':'#0000ff',\n    'blueviolet':'#8a2be2',\n    'brown':'#a52a2a',\n    'burlywood':'#deb887',\n    'cadetblue':'#5f9ea0',\n    'chartreuse':'#7fff00',\n    'chocolate':'#d2691e',\n    'coral':'#ff7f50',\n    'cornflowerblue':'#6495ed',\n    'cornsilk':'#fff8dc',\n    'crimson':'#dc143c',\n    'cyan':'#00ffff',\n    'darkblue':'#00008b',\n    'darkcyan':'#008b8b',\n    'darkgoldenrod':'#b8860b',\n    'darkgray':'#a9a9a9',\n    'darkgrey':'#a9a9a9',\n    'darkgreen':'#006400',\n    'darkkhaki':'#bdb76b',\n    'darkmagenta':'#8b008b',\n    'darkolivegreen':'#556b2f',\n    'darkorange':'#ff8c00',\n    'darkorchid':'#9932cc',\n    'darkred':'#8b0000',\n    'darksalmon':'#e9967a',\n    'darkseagreen':'#8fbc8f',\n    'darkslateblue':'#483d8b',\n    'darkslategray':'#2f4f4f',\n    'darkslategrey':'#2f4f4f',\n    'darkturquoise':'#00ced1',\n    'darkviolet':'#9400d3',\n    'deeppink':'#ff1493',\n    'deepskyblue':'#00bfff',\n    'dimgray':'#696969',\n    'dimgrey':'#696969',\n    'dodgerblue':'#1e90ff',\n    'firebrick':'#b22222',\n    'floralwhite':'#fffaf0',\n    'forestgreen':'#228b22',\n    'fuchsia':'#ff00ff',\n    'gainsboro':'#dcdcdc',\n    'ghostwhite':'#f8f8ff',\n    'gold':'#ffd700',\n    'goldenrod':'#daa520',\n    'gray':'#808080',\n    'grey':'#808080',\n    'green':'#008000',\n    'greenyellow':'#adff2f',\n    'honeydew':'#f0fff0',\n    'hotpink':'#ff69b4',\n    'indianred':'#cd5c5c',\n    'indigo':'#4b0082',\n    'ivory':'#fffff0',\n    'khaki':'#f0e68c',\n    'lavender':'#e6e6fa',\n    'lavenderblush':'#fff0f5',\n    'lawngreen':'#7cfc00',\n    'lemonchiffon':'#fffacd',\n    'lightblue':'#add8e6',\n    'lightcoral':'#f08080',\n    'lightcyan':'#e0ffff',\n    'lightgoldenrodyellow':'#fafad2',\n    'lightgray':'#d3d3d3',\n    'lightgrey':'#d3d3d3',\n    'lightgreen':'#90ee90',\n    'lightpink':'#ffb6c1',\n    'lightsalmon':'#ffa07a',\n    'lightseagreen':'#20b2aa',\n    'lightskyblue':'#87cefa',\n    'lightslategray':'#778899',\n    'lightslategrey':'#778899',\n    'lightsteelblue':'#b0c4de',\n    'lightyellow':'#ffffe0',\n    'lime':'#00ff00',\n    'limegreen':'#32cd32',\n    'linen':'#faf0e6',\n    'magenta':'#ff00ff',\n    'maroon':'#800000',\n    'mediumaquamarine':'#66cdaa',\n    'mediumblue':'#0000cd',\n    'mediumorchid':'#ba55d3',\n    'mediumpurple':'#9370d8',\n    'mediumseagreen':'#3cb371',\n    'mediumslateblue':'#7b68ee',\n    'mediumspringgreen':'#00fa9a',\n    'mediumturquoise':'#48d1cc',\n    'mediumvioletred':'#c71585',\n    'midnightblue':'#191970',\n    'mintcream':'#f5fffa',\n    'mistyrose':'#ffe4e1',\n    'moccasin':'#ffe4b5',\n    'navajowhite':'#ffdead',\n    'navy':'#000080',\n    'oldlace':'#fdf5e6',\n    'olive':'#808000',\n    'olivedrab':'#6b8e23',\n    'orange':'#ffa500',\n    'orangered':'#ff4500',\n    'orchid':'#da70d6',\n    'palegoldenrod':'#eee8aa',\n    'palegreen':'#98fb98',\n    'paleturquoise':'#afeeee',\n    'palevioletred':'#d87093',\n    'papayawhip':'#ffefd5',\n    'peachpuff':'#ffdab9',\n    'peru':'#cd853f',\n    'pink':'#ffc0cb',\n    'plum':'#dda0dd',\n    'powderblue':'#b0e0e6',\n    'purple':'#800080',\n    'rebeccapurple':'#663399',\n    'red':'#ff0000',\n    'rosybrown':'#bc8f8f',\n    'royalblue':'#4169e1',\n    'saddlebrown':'#8b4513',\n    'salmon':'#fa8072',\n    'sandybrown':'#f4a460',\n    'seagreen':'#2e8b57',\n    'seashell':'#fff5ee',\n    'sienna':'#a0522d',\n    'silver':'#c0c0c0',\n    'skyblue':'#87ceeb',\n    'slateblue':'#6a5acd',\n    'slategray':'#708090',\n    'slategrey':'#708090',\n    'snow':'#fffafa',\n    'springgreen':'#00ff7f',\n    'steelblue':'#4682b4',\n    'tan':'#d2b48c',\n    'teal':'#008080',\n    'thistle':'#d8bfd8',\n    'tomato':'#ff6347',\n    'turquoise':'#40e0d0',\n    'violet':'#ee82ee',\n    'wheat':'#f5deb3',\n    'white':'#ffffff',\n    'whitesmoke':'#f5f5f5',\n    'yellow':'#ffff00',\n    'yellowgreen':'#9acd32'\n};\n},{}],13:[function(require,module,exports){\nmodule.exports = {\n    colors: require(\"./colors\"),\n    unitConversions: require(\"./unit-conversions\")\n};\n\n},{\"./colors\":12,\"./unit-conversions\":14}],14:[function(require,module,exports){\nmodule.exports = {\n    length: {\n        'm': 1,\n        'cm': 0.01,\n        'mm': 0.001,\n        'in': 0.0254,\n        'px': 0.0254 / 96,\n        'pt': 0.0254 / 72,\n        'pc': 0.0254 / 72 * 12\n    },\n    duration: {\n        's': 1,\n        'ms': 0.001\n    },\n    angle: {\n        'rad': 1 / (2 * Math.PI),\n        'deg': 1 / 360,\n        'grad': 1 / 400,\n        'turn': 1\n    }\n};\n},{}],15:[function(require,module,exports){\nvar abstractFileManager = function() {\n};\n\nabstractFileManager.prototype.getPath = function (filename) {\n    var j = filename.lastIndexOf('?');\n    if (j > 0) {\n        filename = filename.slice(0, j);\n    }\n    j = filename.lastIndexOf('/');\n    if (j < 0) {\n        j = filename.lastIndexOf('\\\\');\n    }\n    if (j < 0) {\n        return \"\";\n    }\n    return filename.slice(0, j + 1);\n};\n\nabstractFileManager.prototype.tryAppendExtension = function(path, ext) {\n    return /(\\.[a-z]*$)|([\\?;].*)$/.test(path) ? path : path + ext;\n};\n\nabstractFileManager.prototype.tryAppendLessExtension = function(path) {\n    return this.tryAppendExtension(path, '.less');\n};\n\nabstractFileManager.prototype.supportsSync = function() {\n    return false;\n};\n\nabstractFileManager.prototype.alwaysMakePathsAbsolute = function() {\n    return false;\n};\n\nabstractFileManager.prototype.isPathAbsolute = function(filename) {\n    return (/^(?:[a-z-]+:|\\/|\\\\|#)/i).test(filename);\n};\n\nabstractFileManager.prototype.join = function(basePath, laterPath) {\n    if (!basePath) {\n        return laterPath;\n    }\n    return basePath + laterPath;\n};\nabstractFileManager.prototype.pathDiff = function pathDiff(url, baseUrl) {\n    // diff between two paths to create a relative path\n\n    var urlParts = this.extractUrlParts(url),\n        baseUrlParts = this.extractUrlParts(baseUrl),\n        i, max, urlDirectories, baseUrlDirectories, diff = \"\";\n    if (urlParts.hostPart !== baseUrlParts.hostPart) {\n        return \"\";\n    }\n    max = Math.max(baseUrlParts.directories.length, urlParts.directories.length);\n    for (i = 0; i < max; i++) {\n        if (baseUrlParts.directories[i] !== urlParts.directories[i]) { break; }\n    }\n    baseUrlDirectories = baseUrlParts.directories.slice(i);\n    urlDirectories = urlParts.directories.slice(i);\n    for (i = 0; i < baseUrlDirectories.length - 1; i++) {\n        diff += \"../\";\n    }\n    for (i = 0; i < urlDirectories.length - 1; i++) {\n        diff += urlDirectories[i] + \"/\";\n    }\n    return diff;\n};\n// helper function, not part of API\nabstractFileManager.prototype.extractUrlParts = function extractUrlParts(url, baseUrl) {\n    // urlParts[1] = protocol://hostname/ OR /\n    // urlParts[2] = / if path relative to host base\n    // urlParts[3] = directories\n    // urlParts[4] = filename\n    // urlParts[5] = parameters\n\n    var urlPartsRegex = /^((?:[a-z-]+:)?\\/{2}(?:[^\\/\\?#]*\\/)|([\\/\\\\]))?((?:[^\\/\\\\\\?#]*[\\/\\\\])*)([^\\/\\\\\\?#]*)([#\\?].*)?$/i,\n        urlParts = url.match(urlPartsRegex),\n        returner = {}, directories = [], i, baseUrlParts;\n\n    if (!urlParts) {\n        throw new Error(\"Could not parse sheet href - '\" + url + \"'\");\n    }\n\n    // Stylesheets in IE don't always return the full path\n    if (baseUrl && (!urlParts[1] || urlParts[2])) {\n        baseUrlParts = baseUrl.match(urlPartsRegex);\n        if (!baseUrlParts) {\n            throw new Error(\"Could not parse page url - '\" + baseUrl + \"'\");\n        }\n        urlParts[1] = urlParts[1] || baseUrlParts[1] || \"\";\n        if (!urlParts[2]) {\n            urlParts[3] = baseUrlParts[3] + urlParts[3];\n        }\n    }\n\n    if (urlParts[3]) {\n        directories = urlParts[3].replace(/\\\\/g, \"/\").split(\"/\");\n\n        // extract out . before .. so .. doesn't absorb a non-directory\n        for (i = 0; i < directories.length; i++) {\n            if (directories[i] === \".\") {\n                directories.splice(i, 1);\n                i -= 1;\n            }\n        }\n\n        for (i = 0; i < directories.length; i++) {\n            if (directories[i] === \"..\" && i > 0) {\n                directories.splice(i - 1, 2);\n                i -= 2;\n            }\n        }\n    }\n\n    returner.hostPart = urlParts[1];\n    returner.directories = directories;\n    returner.path = (urlParts[1] || \"\") + directories.join(\"/\");\n    returner.fileUrl = returner.path + (urlParts[4] || \"\");\n    returner.url = returner.fileUrl + (urlParts[5] || \"\");\n    return returner;\n};\n\nmodule.exports = abstractFileManager;\n\n},{}],16:[function(require,module,exports){\nvar logger = require(\"../logger\");\nvar environment = function(externalEnvironment, fileManagers) {\n    this.fileManagers = fileManagers || [];\n    externalEnvironment = externalEnvironment || {};\n\n    var optionalFunctions = [\"encodeBase64\", \"mimeLookup\", \"charsetLookup\", \"getSourceMapGenerator\"],\n        requiredFunctions = [],\n        functions = requiredFunctions.concat(optionalFunctions);\n\n    for (var i = 0; i < functions.length; i++) {\n        var propName = functions[i],\n            environmentFunc = externalEnvironment[propName];\n        if (environmentFunc) {\n            this[propName] = environmentFunc.bind(externalEnvironment);\n        } else if (i < requiredFunctions.length) {\n            this.warn(\"missing required function in environment - \" + propName);\n        }\n    }\n};\n\nenvironment.prototype.getFileManager = function (filename, currentDirectory, options, environment, isSync) {\n\n    if (!filename) {\n        logger.warn(\"getFileManager called with no filename.. Please report this issue. continuing.\");\n    }\n    if (currentDirectory == null) {\n        logger.warn(\"getFileManager called with null directory.. Please report this issue. continuing.\");\n    }\n\n    var fileManagers = this.fileManagers;\n    if (options.pluginManager) {\n        fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());\n    }\n    for (var i = fileManagers.length - 1; i >= 0 ; i--) {\n        var fileManager = fileManagers[i];\n        if (fileManager[isSync ? \"supportsSync\" : \"supports\"](filename, currentDirectory, options, environment)) {\n            return fileManager;\n        }\n    }\n    return null;\n};\n\nenvironment.prototype.addFileManager = function (fileManager) {\n    this.fileManagers.push(fileManager);\n};\n\nenvironment.prototype.clearFileManagers = function () {\n    this.fileManagers = [];\n};\n\nmodule.exports = environment;\n\n},{\"../logger\":33}],17:[function(require,module,exports){\nvar Color = require(\"../tree/color\"),\n    functionRegistry = require(\"./function-registry\");\n\n// Color Blending\n// ref: http://www.w3.org/TR/compositing-1\n\nfunction colorBlend(mode, color1, color2) {\n    var ab = color1.alpha, cb, // backdrop\n        as = color2.alpha, cs, // source\n        ar, cr, r = [];        // result\n\n    ar = as + ab * (1 - as);\n    for (var i = 0; i < 3; i++) {\n        cb = color1.rgb[i] / 255;\n        cs = color2.rgb[i] / 255;\n        cr = mode(cb, cs);\n        if (ar) {\n            cr = (as * cs + ab * (cb -\n                  as * (cb + cs - cr))) / ar;\n        }\n        r[i] = cr * 255;\n    }\n\n    return new Color(r, ar);\n}\n\nvar colorBlendModeFunctions = {\n    multiply: function(cb, cs) {\n        return cb * cs;\n    },\n    screen: function(cb, cs) {\n        return cb + cs - cb * cs;\n    },\n    overlay: function(cb, cs) {\n        cb *= 2;\n        return (cb <= 1) ?\n            colorBlendModeFunctions.multiply(cb, cs) :\n            colorBlendModeFunctions.screen(cb - 1, cs);\n    },\n    softlight: function(cb, cs) {\n        var d = 1, e = cb;\n        if (cs > 0.5) {\n            e = 1;\n            d = (cb > 0.25) ? Math.sqrt(cb)\n                : ((16 * cb - 12) * cb + 4) * cb;\n        }\n        return cb - (1 - 2 * cs) * e * (d - cb);\n    },\n    hardlight: function(cb, cs) {\n        return colorBlendModeFunctions.overlay(cs, cb);\n    },\n    difference: function(cb, cs) {\n        return Math.abs(cb - cs);\n    },\n    exclusion: function(cb, cs) {\n        return cb + cs - 2 * cb * cs;\n    },\n\n    // non-w3c functions:\n    average: function(cb, cs) {\n        return (cb + cs) / 2;\n    },\n    negation: function(cb, cs) {\n        return 1 - Math.abs(cb + cs - 1);\n    }\n};\n\nfor (var f in colorBlendModeFunctions) {\n    if (colorBlendModeFunctions.hasOwnProperty(f)) {\n        colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);\n    }\n}\n\nfunctionRegistry.addMultiple(colorBlend);\n\n},{\"../tree/color\":50,\"./function-registry\":22}],18:[function(require,module,exports){\nvar Dimension = require(\"../tree/dimension\"),\n    Color = require(\"../tree/color\"),\n    Quoted = require(\"../tree/quoted\"),\n    Anonymous = require(\"../tree/anonymous\"),\n    functionRegistry = require(\"./function-registry\"),\n    colorFunctions;\n\nfunction clamp(val) {\n    return Math.min(1, Math.max(0, val));\n}\nfunction hsla(color) {\n    return colorFunctions.hsla(color.h, color.s, color.l, color.a);\n}\nfunction number(n) {\n    if (n instanceof Dimension) {\n        return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);\n    } else if (typeof n === 'number') {\n        return n;\n    } else {\n        throw {\n            type: \"Argument\",\n            message: \"color functions take numbers as parameters\"\n        };\n    }\n}\nfunction scaled(n, size) {\n    if (n instanceof Dimension && n.unit.is('%')) {\n        return parseFloat(n.value * size / 100);\n    } else {\n        return number(n);\n    }\n}\ncolorFunctions = {\n    rgb: function (r, g, b) {\n        return colorFunctions.rgba(r, g, b, 1.0);\n    },\n    rgba: function (r, g, b, a) {\n        var rgb = [r, g, b].map(function (c) { return scaled(c, 255); });\n        a = number(a);\n        return new Color(rgb, a);\n    },\n    hsl: function (h, s, l) {\n        return colorFunctions.hsla(h, s, l, 1.0);\n    },\n    hsla: function (h, s, l, a) {\n\n        var m1, m2;\n\n        function hue(h) {\n            h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);\n            if (h * 6 < 1) {\n                return m1 + (m2 - m1) * h * 6;\n            }\n            else if (h * 2 < 1) {\n                return m2;\n            }\n            else if (h * 3 < 2) {\n                return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n            }\n            else {\n                return m1;\n            }\n        }\n\n        h = (number(h) % 360) / 360;\n        s = clamp(number(s)); l = clamp(number(l)); a = clamp(number(a));\n\n        m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n        m1 = l * 2 - m2;\n\n        return colorFunctions.rgba(hue(h + 1 / 3) * 255,\n            hue(h)       * 255,\n            hue(h - 1 / 3) * 255,\n            a);\n    },\n\n    hsv: function(h, s, v) {\n        return colorFunctions.hsva(h, s, v, 1.0);\n    },\n\n    hsva: function(h, s, v, a) {\n        h = ((number(h) % 360) / 360) * 360;\n        s = number(s); v = number(v); a = number(a);\n\n        var i, f;\n        i = Math.floor((h / 60) % 6);\n        f = (h / 60) - i;\n\n        var vs = [v,\n            v * (1 - s),\n            v * (1 - f * s),\n            v * (1 - (1 - f) * s)];\n        var perm = [[0, 3, 1],\n            [2, 0, 1],\n            [1, 0, 3],\n            [1, 2, 0],\n            [3, 1, 0],\n            [0, 1, 2]];\n\n        return colorFunctions.rgba(vs[perm[i][0]] * 255,\n            vs[perm[i][1]] * 255,\n            vs[perm[i][2]] * 255,\n            a);\n    },\n\n    hue: function (color) {\n        return new Dimension(color.toHSL().h);\n    },\n    saturation: function (color) {\n        return new Dimension(color.toHSL().s * 100, '%');\n    },\n    lightness: function (color) {\n        return new Dimension(color.toHSL().l * 100, '%');\n    },\n    hsvhue: function(color) {\n        return new Dimension(color.toHSV().h);\n    },\n    hsvsaturation: function (color) {\n        return new Dimension(color.toHSV().s * 100, '%');\n    },\n    hsvvalue: function (color) {\n        return new Dimension(color.toHSV().v * 100, '%');\n    },\n    red: function (color) {\n        return new Dimension(color.rgb[0]);\n    },\n    green: function (color) {\n        return new Dimension(color.rgb[1]);\n    },\n    blue: function (color) {\n        return new Dimension(color.rgb[2]);\n    },\n    alpha: function (color) {\n        return new Dimension(color.toHSL().a);\n    },\n    luma: function (color) {\n        return new Dimension(color.luma() * color.alpha * 100, '%');\n    },\n    luminance: function (color) {\n        var luminance =\n            (0.2126 * color.rgb[0] / 255) +\n                (0.7152 * color.rgb[1] / 255) +\n                (0.0722 * color.rgb[2] / 255);\n\n        return new Dimension(luminance * color.alpha * 100, '%');\n    },\n    saturate: function (color, amount, method) {\n        // filter: saturate(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        var hsl = color.toHSL();\n\n        if (typeof method !== \"undefined\" && method.value === \"relative\") {\n            hsl.s +=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s += amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(hsl);\n    },\n    desaturate: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== \"undefined\" && method.value === \"relative\") {\n            hsl.s -=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s -= amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(hsl);\n    },\n    lighten: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== \"undefined\" && method.value === \"relative\") {\n            hsl.l +=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l += amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(hsl);\n    },\n    darken: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== \"undefined\" && method.value === \"relative\") {\n            hsl.l -=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l -= amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(hsl);\n    },\n    fadein: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== \"undefined\" && method.value === \"relative\") {\n            hsl.a +=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a += amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(hsl);\n    },\n    fadeout: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== \"undefined\" && method.value === \"relative\") {\n            hsl.a -=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a -= amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(hsl);\n    },\n    fade: function (color, amount) {\n        var hsl = color.toHSL();\n\n        hsl.a = amount.value / 100;\n        hsl.a = clamp(hsl.a);\n        return hsla(hsl);\n    },\n    spin: function (color, amount) {\n        var hsl = color.toHSL();\n        var hue = (hsl.h + amount.value) % 360;\n\n        hsl.h = hue < 0 ? 360 + hue : hue;\n\n        return hsla(hsl);\n    },\n    //\n    // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein\n    // http://sass-lang.com\n    //\n    mix: function (color1, color2, weight) {\n        if (!color1.toHSL || !color2.toHSL) {\n            console.log(color2.type);\n            console.dir(color2);\n        }\n        if (!weight) {\n            weight = new Dimension(50);\n        }\n        var p = weight.value / 100.0;\n        var w = p * 2 - 1;\n        var a = color1.toHSL().a - color2.toHSL().a;\n\n        var w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        var w2 = 1 - w1;\n\n        var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\n            color1.rgb[1] * w1 + color2.rgb[1] * w2,\n            color1.rgb[2] * w1 + color2.rgb[2] * w2];\n\n        var alpha = color1.alpha * p + color2.alpha * (1 - p);\n\n        return new Color(rgb, alpha);\n    },\n    greyscale: function (color) {\n        return colorFunctions.desaturate(color, new Dimension(100));\n    },\n    contrast: function (color, dark, light, threshold) {\n        // filter: contrast(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        if (typeof light === 'undefined') {\n            light = colorFunctions.rgba(255, 255, 255, 1.0);\n        }\n        if (typeof dark === 'undefined') {\n            dark = colorFunctions.rgba(0, 0, 0, 1.0);\n        }\n        //Figure out which is actually light and dark!\n        if (dark.luma() > light.luma()) {\n            var t = light;\n            light = dark;\n            dark = t;\n        }\n        if (typeof threshold === 'undefined') {\n            threshold = 0.43;\n        } else {\n            threshold = number(threshold);\n        }\n        if (color.luma() < threshold) {\n            return light;\n        } else {\n            return dark;\n        }\n    },\n    argb: function (color) {\n        return new Anonymous(color.toARGB());\n    },\n    color: function(c) {\n        if ((c instanceof Quoted) &&\n            (/^#([a-f0-9]{6}|[a-f0-9]{3})$/i.test(c.value))) {\n            return new Color(c.value.slice(1));\n        }\n        if ((c instanceof Color) || (c = Color.fromKeyword(c.value))) {\n            c.value = undefined;\n            return c;\n        }\n        throw {\n            type:    \"Argument\",\n            message: \"argument must be a color keyword or 3/6 digit hex e.g. #FFF\"\n        };\n    },\n    tint: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);\n    },\n    shade: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);\n    }\n};\nfunctionRegistry.addMultiple(colorFunctions);\n\n},{\"../tree/anonymous\":46,\"../tree/color\":50,\"../tree/dimension\":56,\"../tree/quoted\":73,\"./function-registry\":22}],19:[function(require,module,exports){\nmodule.exports = function(environment) {\n    var Quoted = require(\"../tree/quoted\"),\n        URL = require(\"../tree/url\"),\n        functionRegistry = require(\"./function-registry\"),\n        fallback = function(functionThis, node) {\n            return new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context);\n        },\n        logger = require('../logger');\n\n    functionRegistry.add(\"data-uri\", function(mimetypeNode, filePathNode) {\n\n        if (!filePathNode) {\n            filePathNode = mimetypeNode;\n            mimetypeNode = null;\n        }\n\n        var mimetype = mimetypeNode && mimetypeNode.value;\n        var filePath = filePathNode.value;\n        var currentFileInfo = this.currentFileInfo;\n        var currentDirectory = currentFileInfo.relativeUrls ?\n            currentFileInfo.currentDirectory : currentFileInfo.entryPath;\n\n        var fragmentStart = filePath.indexOf('#');\n        var fragment = '';\n        if (fragmentStart !== -1) {\n            fragment = filePath.slice(fragmentStart);\n            filePath = filePath.slice(0, fragmentStart);\n        }\n\n        var fileManager = environment.getFileManager(filePath, currentDirectory, this.context, environment, true);\n\n        if (!fileManager) {\n            return fallback(this, filePathNode);\n        }\n\n        var useBase64 = false;\n\n        // detect the mimetype if not given\n        if (!mimetypeNode) {\n\n            mimetype = environment.mimeLookup(filePath);\n\n            if (mimetype === \"image/svg+xml\") {\n                useBase64 = false;\n            } else {\n                // use base 64 unless it's an ASCII or UTF-8 format\n                var charset = environment.charsetLookup(mimetype);\n                useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0;\n            }\n            if (useBase64) { mimetype += ';base64'; }\n        }\n        else {\n            useBase64 = /;base64$/.test(mimetype);\n        }\n\n        var fileSync = fileManager.loadFileSync(filePath, currentDirectory, this.context, environment);\n        if (!fileSync.contents) {\n            logger.warn(\"Skipped data-uri embedding of \" + filePath + \" because file not found\");\n            return fallback(this, filePathNode || mimetypeNode);\n        }\n        var buf = fileSync.contents;\n        if (useBase64 && !environment.encodeBase64) {\n            return fallback(this, filePathNode);\n        }\n\n        buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);\n\n        var uri = \"data:\" + mimetype + ',' + buf + fragment;\n\n        // IE8 cannot handle a data-uri larger than 32,768 characters. If this is exceeded\n        // and the --ieCompat flag is enabled, return a normal url() instead.\n        var DATA_URI_MAX = 32768;\n        if (uri.length >= DATA_URI_MAX) {\n\n            if (this.context.ieCompat !== false) {\n                logger.warn(\"Skipped data-uri embedding of \" + filePath + \" because its size (\" + uri.length +\n                    \" characters) exceeds IE8-safe \" + DATA_URI_MAX + \" characters!\");\n\n                return fallback(this, filePathNode || mimetypeNode);\n            }\n        }\n\n        return new URL(new Quoted('\"' + uri + '\"', uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    });\n};\n\n},{\"../logger\":33,\"../tree/quoted\":73,\"../tree/url\":80,\"./function-registry\":22}],20:[function(require,module,exports){\nvar Keyword = require(\"../tree/keyword\"),\n    functionRegistry = require(\"./function-registry\");\n\nvar defaultFunc = {\n    eval: function () {\n        var v = this.value_, e = this.error_;\n        if (e) {\n            throw e;\n        }\n        if (v != null) {\n            return v ? Keyword.True : Keyword.False;\n        }\n    },\n    value: function (v) {\n        this.value_ = v;\n    },\n    error: function (e) {\n        this.error_ = e;\n    },\n    reset: function () {\n        this.value_ = this.error_ = null;\n    }\n};\n\nfunctionRegistry.add(\"default\", defaultFunc.eval.bind(defaultFunc));\n\nmodule.exports = defaultFunc;\n\n},{\"../tree/keyword\":65,\"./function-registry\":22}],21:[function(require,module,exports){\nvar Expression = require(\"../tree/expression\");\n\nvar functionCaller = function(name, context, index, currentFileInfo) {\n    this.name = name.toLowerCase();\n    this.index = index;\n    this.context = context;\n    this.currentFileInfo = currentFileInfo;\n\n    this.func = context.frames[0].functionRegistry.get(this.name);\n};\nfunctionCaller.prototype.isValid = function() {\n    return Boolean(this.func);\n};\nfunctionCaller.prototype.call = function(args) {\n\n    // This code is terrible and should be replaced as per this issue...\n    // https://github.com/less/less.js/issues/2477\n    if (Array.isArray(args)) {\n        args = args.filter(function (item) {\n            if (item.type === \"Comment\") {\n                return false;\n            }\n            return true;\n        })\n        .map(function(item) {\n            if (item.type === \"Expression\") {\n                var subNodes = item.value.filter(function (item) {\n                    if (item.type === \"Comment\") {\n                        return false;\n                    }\n                    return true;\n                });\n                if (subNodes.length === 1) {\n                    return subNodes[0];\n                } else {\n                    return new Expression(subNodes);\n                }\n            }\n            return item;\n        });\n    }\n\n    return this.func.apply(this, args);\n};\n\nmodule.exports = functionCaller;\n\n},{\"../tree/expression\":59}],22:[function(require,module,exports){\nfunction makeRegistry( base ) {\n    return {\n        _data: {},\n        add: function(name, func) {\n            // precautionary case conversion, as later querying of\n            // the registry by function-caller uses lower case as well.\n            name = name.toLowerCase();\n\n            if (this._data.hasOwnProperty(name)) {\n                //TODO warn\n            }\n            this._data[name] = func;\n        },\n        addMultiple: function(functions) {\n            Object.keys(functions).forEach(\n                function(name) {\n                    this.add(name, functions[name]);\n                }.bind(this));\n        },\n        get: function(name) {\n            return this._data[name] || ( base && base.get( name ));\n        },\n        inherit : function() {\n            return makeRegistry( this );\n        }\n    };\n}\n\nmodule.exports = makeRegistry( null );\n},{}],23:[function(require,module,exports){\nmodule.exports = function(environment) {\n    var functions = {\n        functionRegistry: require(\"./function-registry\"),\n        functionCaller: require(\"./function-caller\")\n    };\n\n    //register functions\n    require(\"./default\");\n    require(\"./color\");\n    require(\"./color-blending\");\n    require(\"./data-uri\")(environment);\n    require(\"./math\");\n    require(\"./number\");\n    require(\"./string\");\n    require(\"./svg\")(environment);\n    require(\"./types\");\n\n    return functions;\n};\n\n},{\"./color\":18,\"./color-blending\":17,\"./data-uri\":19,\"./default\":20,\"./function-caller\":21,\"./function-registry\":22,\"./math\":25,\"./number\":26,\"./string\":27,\"./svg\":28,\"./types\":29}],24:[function(require,module,exports){\nvar Dimension = require(\"../tree/dimension\");\n\nvar MathHelper = function() {\n};\nMathHelper._math = function (fn, unit, n) {\n    if (!(n instanceof Dimension)) {\n        throw { type: \"Argument\", message: \"argument must be a number\" };\n    }\n    if (unit == null) {\n        unit = n.unit;\n    } else {\n        n = n.unify();\n    }\n    return new Dimension(fn(parseFloat(n.value)), unit);\n};\nmodule.exports = MathHelper;\n},{\"../tree/dimension\":56}],25:[function(require,module,exports){\nvar functionRegistry = require(\"./function-registry\"),\n    mathHelper = require(\"./math-helper.js\");\n\nvar mathFunctions = {\n    // name,  unit\n    ceil:  null,\n    floor: null,\n    sqrt:  null,\n    abs:   null,\n    tan:   \"\",\n    sin:   \"\",\n    cos:   \"\",\n    atan:  \"rad\",\n    asin:  \"rad\",\n    acos:  \"rad\"\n};\n\nfor (var f in mathFunctions) {\n    if (mathFunctions.hasOwnProperty(f)) {\n        mathFunctions[f] = mathHelper._math.bind(null, Math[f], mathFunctions[f]);\n    }\n}\n\nmathFunctions.round = function (n, f) {\n    var fraction = typeof f === \"undefined\" ? 0 : f.value;\n    return mathHelper._math(function(num) { return num.toFixed(fraction); }, null, n);\n};\n\nfunctionRegistry.addMultiple(mathFunctions);\n\n},{\"./function-registry\":22,\"./math-helper.js\":24}],26:[function(require,module,exports){\nvar Dimension = require(\"../tree/dimension\"),\n    Anonymous = require(\"../tree/anonymous\"),\n    functionRegistry = require(\"./function-registry\"),\n    mathHelper = require(\"./math-helper.js\");\n\nvar minMax = function (isMin, args) {\n    args = Array.prototype.slice.call(args);\n    switch(args.length) {\n        case 0: throw { type: \"Argument\", message: \"one or more arguments required\" };\n    }\n    var i, j, current, currentUnified, referenceUnified, unit, unitStatic, unitClone,\n        order  = [], // elems only contains original argument values.\n        values = {}; // key is the unit.toString() for unified Dimension values,\n    // value is the index into the order array.\n    for (i = 0; i < args.length; i++) {\n        current = args[i];\n        if (!(current instanceof Dimension)) {\n            if (Array.isArray(args[i].value)) {\n                Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));\n            }\n            continue;\n        }\n        currentUnified = current.unit.toString() === \"\" && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();\n        unit = currentUnified.unit.toString() === \"\" && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();\n        unitStatic = unit !== \"\" && unitStatic === undefined || unit !== \"\" && order[0].unify().unit.toString() === \"\" ? unit : unitStatic;\n        unitClone = unit !== \"\" && unitClone === undefined ? current.unit.toString() : unitClone;\n        j = values[\"\"] !== undefined && unit !== \"\" && unit === unitStatic ? values[\"\"] : values[unit];\n        if (j === undefined) {\n            if (unitStatic !== undefined && unit !== unitStatic) {\n                throw{ type: \"Argument\", message: \"incompatible types\" };\n            }\n            values[unit] = order.length;\n            order.push(current);\n            continue;\n        }\n        referenceUnified = order[j].unit.toString() === \"\" && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();\n        if ( isMin && currentUnified.value < referenceUnified.value ||\n            !isMin && currentUnified.value > referenceUnified.value) {\n            order[j] = current;\n        }\n    }\n    if (order.length == 1) {\n        return order[0];\n    }\n    args = order.map(function (a) { return a.toCSS(this.context); }).join(this.context.compress ? \",\" : \", \");\n    return new Anonymous((isMin ? \"min\" : \"max\") + \"(\" + args + \")\");\n};\nfunctionRegistry.addMultiple({\n    min: function () {\n        return minMax(true, arguments);\n    },\n    max: function () {\n        return minMax(false, arguments);\n    },\n    convert: function (val, unit) {\n        return val.convertTo(unit.value);\n    },\n    pi: function () {\n        return new Dimension(Math.PI);\n    },\n    mod: function(a, b) {\n        return new Dimension(a.value % b.value, a.unit);\n    },\n    pow: function(x, y) {\n        if (typeof x === \"number\" && typeof y === \"number\") {\n            x = new Dimension(x);\n            y = new Dimension(y);\n        } else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {\n            throw { type: \"Argument\", message: \"arguments must be numbers\" };\n        }\n\n        return new Dimension(Math.pow(x.value, y.value), x.unit);\n    },\n    percentage: function (n) {\n        var result = mathHelper._math(function(num) {\n            return num * 100;\n        }, '%', n);\n\n        return result;\n    }\n});\n\n},{\"../tree/anonymous\":46,\"../tree/dimension\":56,\"./function-registry\":22,\"./math-helper.js\":24}],27:[function(require,module,exports){\nvar Quoted = require(\"../tree/quoted\"),\n    Anonymous = require(\"../tree/anonymous\"),\n    JavaScript = require(\"../tree/javascript\"),\n    functionRegistry = require(\"./function-registry\");\n\nfunctionRegistry.addMultiple({\n    e: function (str) {\n        return new Anonymous(str instanceof JavaScript ? str.evaluated : str.value);\n    },\n    escape: function (str) {\n        return new Anonymous(\n            encodeURI(str.value).replace(/=/g, \"%3D\").replace(/:/g, \"%3A\").replace(/#/g, \"%23\").replace(/;/g, \"%3B\")\n                .replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\"));\n    },\n    replace: function (string, pattern, replacement, flags) {\n        var result = string.value;\n        replacement = (replacement.type === \"Quoted\") ?\n            replacement.value : replacement.toCSS();\n        result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);\n        return new Quoted(string.quote || '', result, string.escaped);\n    },\n    '%': function (string /* arg, arg, ...*/) {\n        var args = Array.prototype.slice.call(arguments, 1),\n            result = string.value;\n\n        for (var i = 0; i < args.length; i++) {\n            /*jshint loopfunc:true */\n            result = result.replace(/%[sda]/i, function(token) {\n                var value = ((args[i].type === \"Quoted\") &&\n                    token.match(/s/i)) ? args[i].value : args[i].toCSS();\n                return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;\n            });\n        }\n        result = result.replace(/%%/g, '%');\n        return new Quoted(string.quote || '', result, string.escaped);\n    }\n});\n\n},{\"../tree/anonymous\":46,\"../tree/javascript\":63,\"../tree/quoted\":73,\"./function-registry\":22}],28:[function(require,module,exports){\nmodule.exports = function(environment) {\n    var Dimension = require(\"../tree/dimension\"),\n        Color = require(\"../tree/color\"),\n        Expression = require(\"../tree/expression\"),\n        Quoted = require(\"../tree/quoted\"),\n        URL = require(\"../tree/url\"),\n        functionRegistry = require(\"./function-registry\");\n\n    functionRegistry.add(\"svg-gradient\", function(direction) {\n\n        var stops,\n            gradientDirectionSvg,\n            gradientType = \"linear\",\n            rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"',\n            renderEnv = {compress: false},\n            returner,\n            directionValue = direction.toCSS(renderEnv),\n\t\t\ti, color, position, positionValue, alpha;\n\n        function throwArgumentDescriptor() {\n            throw { type: \"Argument\",\n\t\t\t\t\tmessage: \"svg-gradient expects direction, start_color [start_position], [color position,]...,\" +\n\t\t\t\t\t\t\t\" end_color [end_position] or direction, color list\" };\n        }\n\n        if (arguments.length == 2) {\n            if (arguments[1].value.length < 2) {\n                throwArgumentDescriptor();\n            }\n            stops = arguments[1].value;\n        } else if (arguments.length < 3) {\n            throwArgumentDescriptor();\n        } else {\n            stops = Array.prototype.slice.call(arguments, 1);\n        }\n\n        switch (directionValue) {\n            case \"to bottom\":\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"';\n                break;\n            case \"to right\":\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case \"to bottom right\":\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"';\n                break;\n            case \"to top right\":\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case \"ellipse\":\n            case \"ellipse at center\":\n                gradientType = \"radial\";\n                gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"';\n                rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"';\n                break;\n            default:\n                throw { type: \"Argument\", message: \"svg-gradient direction must be 'to bottom', 'to right',\" +\n                    \" 'to bottom right', 'to top right' or 'ellipse at center'\" };\n        }\n        returner = '<?xml version=\"1.0\" ?>' +\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"100%\" height=\"100%\" viewBox=\"0 0 1 1\" preserveAspectRatio=\"none\">' +\n            '<' + gradientType + 'Gradient id=\"gradient\" gradientUnits=\"userSpaceOnUse\" ' + gradientDirectionSvg + '>';\n\n        for (i = 0; i < stops.length; i+= 1) {\n            if (stops[i] instanceof Expression) {\n                color = stops[i].value[0];\n                position = stops[i].value[1];\n            } else {\n                color = stops[i];\n                position = undefined;\n            }\n\n            if (!(color instanceof Color) || (!((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension))) {\n                throwArgumentDescriptor();\n            }\n            positionValue = position ? position.toCSS(renderEnv) : i === 0 ? \"0%\" : \"100%\";\n            alpha = color.alpha;\n            returner += '<stop offset=\"' + positionValue + '\" stop-color=\"' + color.toRGB() + '\"' + (alpha < 1 ? ' stop-opacity=\"' + alpha + '\"' : '') + '/>';\n        }\n        returner += '</' + gradientType + 'Gradient>' +\n            '<rect ' + rectangleDimension + ' fill=\"url(#gradient)\" /></svg>';\n\n        returner = encodeURIComponent(returner);\n\n        returner = \"data:image/svg+xml,\" + returner;\n        return new URL(new Quoted(\"'\" + returner + \"'\", returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    });\n};\n\n},{\"../tree/color\":50,\"../tree/dimension\":56,\"../tree/expression\":59,\"../tree/quoted\":73,\"../tree/url\":80,\"./function-registry\":22}],29:[function(require,module,exports){\nvar Keyword = require(\"../tree/keyword\"),\n    DetachedRuleset = require(\"../tree/detached-ruleset\"),\n    Dimension = require(\"../tree/dimension\"),\n    Color = require(\"../tree/color\"),\n    Quoted = require(\"../tree/quoted\"),\n    Anonymous = require(\"../tree/anonymous\"),\n    URL = require(\"../tree/url\"),\n    Operation = require(\"../tree/operation\"),\n    functionRegistry = require(\"./function-registry\");\n\nvar isa = function (n, Type) {\n        return (n instanceof Type) ? Keyword.True : Keyword.False;\n    },\n    isunit = function (n, unit) {\n        if (unit === undefined) {\n            throw { type: \"Argument\", message: \"missing the required second argument to isunit.\" };\n        }\n        unit = typeof unit.value === \"string\" ? unit.value : unit;\n        if (typeof unit !== \"string\") {\n            throw { type: \"Argument\", message: \"Second argument to isunit should be a unit or a string.\" };\n        }\n        return (n instanceof Dimension) && n.unit.is(unit) ? Keyword.True : Keyword.False;\n    },\n    getItemsFromNode = function(node) {\n        // handle non-array values as an array of length 1\n        // return 'undefined' if index is invalid\n        var items = Array.isArray(node.value) ?\n            node.value : Array(node);\n\n        return items;\n    };\nfunctionRegistry.addMultiple({\n    isruleset: function (n) {\n        return isa(n, DetachedRuleset);\n    },\n    iscolor: function (n) {\n        return isa(n, Color);\n    },\n    isnumber: function (n) {\n        return isa(n, Dimension);\n    },\n    isstring: function (n) {\n        return isa(n, Quoted);\n    },\n    iskeyword: function (n) {\n        return isa(n, Keyword);\n    },\n    isurl: function (n) {\n        return isa(n, URL);\n    },\n    ispixel: function (n) {\n        return isunit(n, 'px');\n    },\n    ispercentage: function (n) {\n        return isunit(n, '%');\n    },\n    isem: function (n) {\n        return isunit(n, 'em');\n    },\n    isunit: isunit,\n    unit: function (val, unit) {\n        if (!(val instanceof Dimension)) {\n            throw { type: \"Argument\",\n                message: \"the first argument to unit must be a number\" +\n                    (val instanceof Operation ? \". Have you forgotten parenthesis?\" : \"\") };\n        }\n        if (unit) {\n            if (unit instanceof Keyword) {\n                unit = unit.value;\n            } else {\n                unit = unit.toCSS();\n            }\n        } else {\n            unit = \"\";\n        }\n        return new Dimension(val.value, unit);\n    },\n    \"get-unit\": function (n) {\n        return new Anonymous(n.unit);\n    },\n    extract: function(values, index) {\n        index = index.value - 1; // (1-based index)\n\n        return getItemsFromNode(values)[index];\n    },\n    length: function(values) {\n        return new Dimension(getItemsFromNode(values).length);\n    }\n});\n\n},{\"../tree/anonymous\":46,\"../tree/color\":50,\"../tree/detached-ruleset\":55,\"../tree/dimension\":56,\"../tree/keyword\":65,\"../tree/operation\":71,\"../tree/quoted\":73,\"../tree/url\":80,\"./function-registry\":22}],30:[function(require,module,exports){\nvar contexts = require(\"./contexts\"),\n    Parser = require('./parser/parser'),\n    FunctionImporter = require('./plugins/function-importer');\n\nmodule.exports = function(environment) {\n\n    // FileInfo = {\n    //  'relativeUrls' - option - whether to adjust URL's to be relative\n    //  'filename' - full resolved filename of current file\n    //  'rootpath' - path to append to normal URLs for this node\n    //  'currentDirectory' - path to the current file, absolute\n    //  'rootFilename' - filename of the base file\n    //  'entryPath' - absolute path to the entry file\n    //  'reference' - whether the file should not be output and only output parts that are referenced\n\n    var ImportManager = function(context, rootFileInfo) {\n        this.rootFilename = rootFileInfo.filename;\n        this.paths = context.paths || [];  // Search paths, when importing\n        this.contents = {};             // map - filename to contents of all the files\n        this.contentsIgnoredChars = {}; // map - filename to lines at the beginning of each file to ignore\n        this.mime = context.mime;\n        this.error = null;\n        this.context = context;\n        // Deprecated? Unused outside of here, could be useful.\n        this.queue = [];        // Files which haven't been imported yet\n        this.files = {};        // Holds the imported parse trees.\n    };\n    /**\n     * Add an import to be imported\n     * @param path - the raw path\n     * @param tryAppendLessExtension - whether to try appending the less extension (if the path has no extension)\n     * @param currentFileInfo - the current file info (used for instance to work out relative paths)\n     * @param importOptions - import options\n     * @param callback - callback for when it is imported\n     */\n    ImportManager.prototype.push = function (path, tryAppendLessExtension, currentFileInfo, importOptions, callback) {\n        var importManager = this;\n        this.queue.push(path);\n\n        var fileParsedFunc = function (e, root, fullPath) {\n            importManager.queue.splice(importManager.queue.indexOf(path), 1); // Remove the path from the queue\n\n            var importedEqualsRoot = fullPath === importManager.rootFilename;\n            if (importOptions.optional && e) {\n                callback(null, {rules:[]}, false, null);\n            }\n            else {\n                importManager.files[fullPath] = root;\n                if (e && !importManager.error) { importManager.error = e; }\n                callback(e, root, importedEqualsRoot, fullPath);\n            }\n        };\n\n        var newFileInfo = {\n            relativeUrls: this.context.relativeUrls,\n            entryPath: currentFileInfo.entryPath,\n            rootpath: currentFileInfo.rootpath,\n            rootFilename: currentFileInfo.rootFilename\n        };\n\n        var fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);\n\n        if (!fileManager) {\n            fileParsedFunc({ message: \"Could not find a file-manager for \" + path });\n            return;\n        }\n\n        if (tryAppendLessExtension) {\n            path = fileManager.tryAppendExtension(path, importOptions.plugin ? \".js\" : \".less\");\n        }\n\n        var loadFileCallback = function(loadedFile) {\n            var resolvedFilename = loadedFile.filename,\n                contents = loadedFile.contents.replace(/^\\uFEFF/, '');\n\n            // Pass on an updated rootpath if path of imported file is relative and file\n            // is in a (sub|sup) directory\n            //\n            // Examples:\n            // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\n            //   then rootpath should become 'less/module/nav/'\n            // - If path of imported file is '../mixins.less' and rootpath is 'less/',\n            //   then rootpath should become 'less/../'\n            newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);\n            if (newFileInfo.relativeUrls) {\n                newFileInfo.rootpath = fileManager.join(\n                    (importManager.context.rootpath || \"\"),\n                    fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));\n\n                if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {\n                    newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);\n                }\n            }\n            newFileInfo.filename = resolvedFilename;\n\n            var newEnv = new contexts.Parse(importManager.context);\n\n            newEnv.processImports = false;\n            importManager.contents[resolvedFilename] = contents;\n\n            if (currentFileInfo.reference || importOptions.reference) {\n                newFileInfo.reference = true;\n            }\n\n            if (importOptions.plugin) {\n                new FunctionImporter(newEnv, newFileInfo).eval(contents, function (e, root) {\n                    fileParsedFunc(e, root, resolvedFilename);\n                });\n            } else if (importOptions.inline) {\n                fileParsedFunc(null, contents, resolvedFilename);\n            } else {\n                new Parser(newEnv, importManager, newFileInfo).parse(contents, function (e, root) {\n                    fileParsedFunc(e, root, resolvedFilename);\n                });\n            }\n        };\n\n        var promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, this.context, environment,\n            function(err, loadedFile) {\n            if (err) {\n                fileParsedFunc(err);\n            } else {\n                loadFileCallback(loadedFile);\n            }\n        });\n        if (promise) {\n            promise.then(loadFileCallback, fileParsedFunc);\n        }\n    };\n    return ImportManager;\n};\n\n},{\"./contexts\":11,\"./parser/parser\":38,\"./plugins/function-importer\":40}],31:[function(require,module,exports){\nmodule.exports = function(environment, fileManagers) {\n    var SourceMapOutput, SourceMapBuilder, ParseTree, ImportManager, Environment;\n\n    var less = {\n        version: [2, 7, 2],\n        data: require('./data'),\n        tree: require('./tree'),\n        Environment: (Environment = require(\"./environment/environment\")),\n        AbstractFileManager: require(\"./environment/abstract-file-manager\"),\n        environment: (environment = new Environment(environment, fileManagers)),\n        visitors: require('./visitors'),\n        Parser: require('./parser/parser'),\n        functions: require('./functions')(environment),\n        contexts: require(\"./contexts\"),\n        SourceMapOutput: (SourceMapOutput = require('./source-map-output')(environment)),\n        SourceMapBuilder: (SourceMapBuilder = require('./source-map-builder')(SourceMapOutput, environment)),\n        ParseTree: (ParseTree = require('./parse-tree')(SourceMapBuilder)),\n        ImportManager: (ImportManager = require('./import-manager')(environment)),\n        render: require(\"./render\")(environment, ParseTree, ImportManager),\n        parse: require(\"./parse\")(environment, ParseTree, ImportManager),\n        LessError: require('./less-error'),\n        transformTree: require('./transform-tree'),\n        utils: require('./utils'),\n        PluginManager: require('./plugin-manager'),\n        logger: require('./logger')\n    };\n\n    return less;\n};\n\n},{\"./contexts\":11,\"./data\":13,\"./environment/abstract-file-manager\":15,\"./environment/environment\":16,\"./functions\":23,\"./import-manager\":30,\"./less-error\":32,\"./logger\":33,\"./parse\":35,\"./parse-tree\":34,\"./parser/parser\":38,\"./plugin-manager\":39,\"./render\":41,\"./source-map-builder\":42,\"./source-map-output\":43,\"./transform-tree\":44,\"./tree\":62,\"./utils\":83,\"./visitors\":87}],32:[function(require,module,exports){\nvar utils = require(\"./utils\");\n\nvar LessError = module.exports = function LessError(e, importManager, currentFilename) {\n\n    Error.call(this);\n\n    var filename = e.filename || currentFilename;\n\n    if (importManager && filename) {\n        var input = importManager.contents[filename],\n            loc = utils.getLocation(e.index, input),\n            line = loc.line,\n            col  = loc.column,\n            callLine = e.call && utils.getLocation(e.call, input).line,\n            lines = input.split('\\n');\n\n        this.type = e.type || 'Syntax';\n        this.filename = filename;\n        this.index = e.index;\n        this.line = typeof line === 'number' ? line + 1 : null;\n        this.callLine = callLine + 1;\n        this.callExtract = lines[callLine];\n        this.column = col;\n        this.extract = [\n            lines[line - 1],\n            lines[line],\n            lines[line + 1]\n        ];\n    }\n    this.message = e.message;\n    this.stack = e.stack;\n};\n\nif (typeof Object.create === 'undefined') {\n    var F = function () {};\n    F.prototype = Error.prototype;\n    LessError.prototype = new F();\n} else {\n    LessError.prototype = Object.create(Error.prototype);\n}\n\nLessError.prototype.constructor = LessError;\n\n},{\"./utils\":83}],33:[function(require,module,exports){\nmodule.exports = {\n    error: function(msg) {\n        this._fireEvent(\"error\", msg);\n    },\n    warn: function(msg) {\n        this._fireEvent(\"warn\", msg);\n    },\n    info: function(msg) {\n        this._fireEvent(\"info\", msg);\n    },\n    debug: function(msg) {\n        this._fireEvent(\"debug\", msg);\n    },\n    addListener: function(listener) {\n        this._listeners.push(listener);\n    },\n    removeListener: function(listener) {\n        for (var i = 0; i < this._listeners.length; i++) {\n            if (this._listeners[i] === listener) {\n                this._listeners.splice(i, 1);\n                return;\n            }\n        }\n    },\n    _fireEvent: function(type, msg) {\n        for (var i = 0; i < this._listeners.length; i++) {\n            var logFunction = this._listeners[i][type];\n            if (logFunction) {\n                logFunction(msg);\n            }\n        }\n    },\n    _listeners: []\n};\n\n},{}],34:[function(require,module,exports){\nvar LessError = require('./less-error'),\n    transformTree = require(\"./transform-tree\"),\n    logger = require(\"./logger\");\n\nmodule.exports = function(SourceMapBuilder) {\n    var ParseTree = function(root, imports) {\n        this.root = root;\n        this.imports = imports;\n    };\n\n    ParseTree.prototype.toCSS = function(options) {\n        var evaldRoot, result = {}, sourceMapBuilder;\n        try {\n            evaldRoot = transformTree(this.root, options);\n        } catch (e) {\n            throw new LessError(e, this.imports);\n        }\n\n        try {\n            var compress = Boolean(options.compress);\n            if (compress) {\n                logger.warn(\"The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.\");\n            }\n\n            var toCSSOptions = {\n                compress: compress,\n                dumpLineNumbers: options.dumpLineNumbers,\n                strictUnits: Boolean(options.strictUnits),\n                numPrecision: 8};\n\n            if (options.sourceMap) {\n                sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\n                result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\n            } else {\n                result.css = evaldRoot.toCSS(toCSSOptions);\n            }\n        } catch (e) {\n            throw new LessError(e, this.imports);\n        }\n\n        if (options.pluginManager) {\n            var postProcessors = options.pluginManager.getPostProcessors();\n            for (var i = 0; i < postProcessors.length; i++) {\n                result.css = postProcessors[i].process(result.css, { sourceMap: sourceMapBuilder, options: options, imports: this.imports });\n            }\n        }\n        if (options.sourceMap) {\n            result.map = sourceMapBuilder.getExternalSourceMap();\n        }\n\n        result.imports = [];\n        for (var file in this.imports.files) {\n            if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {\n                result.imports.push(file);\n            }\n        }\n        return result;\n    };\n    return ParseTree;\n};\n\n},{\"./less-error\":32,\"./logger\":33,\"./transform-tree\":44}],35:[function(require,module,exports){\nvar PromiseConstructor,\n    contexts = require(\"./contexts\"),\n    Parser = require('./parser/parser'),\n    PluginManager = require('./plugin-manager');\n\nmodule.exports = function(environment, ParseTree, ImportManager) {\n    var parse = function (input, options, callback) {\n        options = options || {};\n\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback) {\n            if (!PromiseConstructor) {\n                PromiseConstructor = typeof Promise === 'undefined' ? require('promise') : Promise;\n            }\n            var self = this;\n            return new PromiseConstructor(function (resolve, reject) {\n                parse.call(self, input, options, function(err, output) {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            var context,\n                rootFileInfo,\n                pluginManager = new PluginManager(this);\n\n            pluginManager.addPlugins(options.plugins);\n            options.pluginManager = pluginManager;\n\n            context = new contexts.Parse(options);\n\n            if (options.rootFileInfo) {\n                rootFileInfo = options.rootFileInfo;\n            } else {\n                var filename = options.filename || \"input\";\n                var entryPath = filename.replace(/[^\\/\\\\]*$/, \"\");\n                rootFileInfo = {\n                    filename: filename,\n                    relativeUrls: context.relativeUrls,\n                    rootpath: context.rootpath || \"\",\n                    currentDirectory: entryPath,\n                    entryPath: entryPath,\n                    rootFilename: filename\n                };\n                // add in a missing trailing slash\n                if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== \"/\") {\n                    rootFileInfo.rootpath += \"/\";\n                }\n            }\n\n            var imports = new ImportManager(context, rootFileInfo);\n\n            new Parser(context, imports, rootFileInfo)\n                .parse(input, function (e, root) {\n                if (e) { return callback(e); }\n                callback(null, root, imports, options);\n            }, options);\n        }\n    };\n    return parse;\n};\n\n},{\"./contexts\":11,\"./parser/parser\":38,\"./plugin-manager\":39,\"promise\":undefined}],36:[function(require,module,exports){\n// Split the input into chunks.\nmodule.exports = function (input, fail) {\n    var len = input.length, level = 0, parenLevel = 0,\n        lastOpening, lastOpeningParen, lastMultiComment, lastMultiCommentEndBrace,\n        chunks = [], emitFrom = 0,\n        chunkerCurrentIndex, currentChunkStartIndex, cc, cc2, matched;\n\n    function emitChunk(force) {\n        var len = chunkerCurrentIndex - emitFrom;\n        if (((len < 512) && !force) || !len) {\n            return;\n        }\n        chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));\n        emitFrom = chunkerCurrentIndex + 1;\n    }\n\n    for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n        cc = input.charCodeAt(chunkerCurrentIndex);\n        if (((cc >= 97) && (cc <= 122)) || (cc < 34)) {\n            // a-z or whitespace\n            continue;\n        }\n\n        switch (cc) {\n            case 40:                        // (\n                parenLevel++;\n                lastOpeningParen = chunkerCurrentIndex;\n                continue;\n            case 41:                        // )\n                if (--parenLevel < 0) {\n                    return fail(\"missing opening `(`\", chunkerCurrentIndex);\n                }\n                continue;\n            case 59:                        // ;\n                if (!parenLevel) { emitChunk(); }\n                continue;\n            case 123:                       // {\n                level++;\n                lastOpening = chunkerCurrentIndex;\n                continue;\n            case 125:                       // }\n                if (--level < 0) {\n                    return fail(\"missing opening `{`\", chunkerCurrentIndex);\n                }\n                if (!level && !parenLevel) { emitChunk(); }\n                continue;\n            case 92:                        // \\\n                if (chunkerCurrentIndex < len - 1) { chunkerCurrentIndex++; continue; }\n                return fail(\"unescaped `\\\\`\", chunkerCurrentIndex);\n            case 34:\n            case 39:\n            case 96:                        // \", ' and `\n                matched = 0;\n                currentChunkStartIndex = chunkerCurrentIndex;\n                for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                    cc2 = input.charCodeAt(chunkerCurrentIndex);\n                    if (cc2 > 96) { continue; }\n                    if (cc2 == cc) { matched = 1; break; }\n                    if (cc2 == 92) {        // \\\n                        if (chunkerCurrentIndex == len - 1) {\n                            return fail(\"unescaped `\\\\`\", chunkerCurrentIndex);\n                        }\n                        chunkerCurrentIndex++;\n                    }\n                }\n                if (matched) { continue; }\n                return fail(\"unmatched `\" + String.fromCharCode(cc) + \"`\", currentChunkStartIndex);\n            case 47:                        // /, check for comment\n                if (parenLevel || (chunkerCurrentIndex == len - 1)) { continue; }\n                cc2 = input.charCodeAt(chunkerCurrentIndex + 1);\n                if (cc2 == 47) {\n                    // //, find lnfeed\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if ((cc2 <= 13) && ((cc2 == 10) || (cc2 == 13))) { break; }\n                    }\n                } else if (cc2 == 42) {\n                    // /*, find */\n                    lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if (cc2 == 125) { lastMultiCommentEndBrace = chunkerCurrentIndex; }\n                        if (cc2 != 42) { continue; }\n                        if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) { break; }\n                    }\n                    if (chunkerCurrentIndex == len - 1) {\n                        return fail(\"missing closing `*/`\", currentChunkStartIndex);\n                    }\n                    chunkerCurrentIndex++;\n                }\n                continue;\n            case 42:                       // *, check for unmatched */\n                if ((chunkerCurrentIndex < len - 1) && (input.charCodeAt(chunkerCurrentIndex + 1) == 47)) {\n                    return fail(\"unmatched `/*`\", chunkerCurrentIndex);\n                }\n                continue;\n        }\n    }\n\n    if (level !== 0) {\n        if ((lastMultiComment > lastOpening) && (lastMultiCommentEndBrace > lastMultiComment)) {\n            return fail(\"missing closing `}` or `*/`\", lastOpening);\n        } else {\n            return fail(\"missing closing `}`\", lastOpening);\n        }\n    } else if (parenLevel !== 0) {\n        return fail(\"missing closing `)`\", lastOpeningParen);\n    }\n\n    emitChunk(true);\n    return chunks;\n};\n\n},{}],37:[function(require,module,exports){\nvar chunker = require('./chunker');\n\nmodule.exports = function() {\n    var input,       // LeSS input string\n        j,           // current chunk\n        saveStack = [],   // holds state for backtracking\n        furthest,    // furthest index the parser has gone to\n        furthestPossibleErrorMessage,// if this is furthest we got to, this is the probably cause\n        chunks,      // chunkified input\n        current,     // current chunk\n        currentPos,  // index of current chunk, in `input`\n        parserInput = {};\n\n    var CHARCODE_SPACE = 32,\n        CHARCODE_TAB = 9,\n        CHARCODE_LF = 10,\n        CHARCODE_CR = 13,\n        CHARCODE_PLUS = 43,\n        CHARCODE_COMMA = 44,\n        CHARCODE_FORWARD_SLASH = 47,\n        CHARCODE_9 = 57;\n\n    function skipWhitespace(length) {\n        var oldi = parserInput.i, oldj = j,\n            curr = parserInput.i - currentPos,\n            endIndex = parserInput.i + current.length - curr,\n            mem = (parserInput.i += length),\n            inp = input,\n            c, nextChar, comment;\n\n        for (; parserInput.i < endIndex; parserInput.i++) {\n            c = inp.charCodeAt(parserInput.i);\n\n            if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {\n                nextChar = inp.charAt(parserInput.i + 1);\n                if (nextChar === '/') {\n                    comment = {index: parserInput.i, isLineComment: true};\n                    var nextNewLine = inp.indexOf(\"\\n\", parserInput.i + 2);\n                    if (nextNewLine < 0) {\n                        nextNewLine = endIndex;\n                    }\n                    parserInput.i = nextNewLine;\n                    comment.text = inp.substr(comment.index, parserInput.i - comment.index);\n                    parserInput.commentStore.push(comment);\n                    continue;\n                } else if (nextChar === '*') {\n                    var nextStarSlash = inp.indexOf(\"*/\", parserInput.i + 2);\n                    if (nextStarSlash >= 0) {\n                        comment = {\n                            index: parserInput.i,\n                            text: inp.substr(parserInput.i, nextStarSlash + 2 - parserInput.i),\n                            isLineComment: false\n                        };\n                        parserInput.i += comment.text.length - 1;\n                        parserInput.commentStore.push(comment);\n                        continue;\n                    }\n                }\n                break;\n            }\n\n            if ((c !== CHARCODE_SPACE) && (c !== CHARCODE_LF) && (c !== CHARCODE_TAB) && (c !== CHARCODE_CR)) {\n                break;\n            }\n        }\n\n        current = current.slice(length + parserInput.i - mem + curr);\n        currentPos = parserInput.i;\n\n        if (!current.length) {\n            if (j < chunks.length - 1) {\n                current = chunks[++j];\n                skipWhitespace(0); // skip space at the beginning of a chunk\n                return true; // things changed\n            }\n            parserInput.finished = true;\n        }\n\n        return oldi !== parserInput.i || oldj !== j;\n    }\n\n    parserInput.save = function() {\n        currentPos = parserInput.i;\n        saveStack.push( { current: current, i: parserInput.i, j: j });\n    };\n    parserInput.restore = function(possibleErrorMessage) {\n\n        if (parserInput.i > furthest || (parserInput.i === furthest && possibleErrorMessage && !furthestPossibleErrorMessage)) {\n            furthest = parserInput.i;\n            furthestPossibleErrorMessage = possibleErrorMessage;\n        }\n        var state = saveStack.pop();\n        current = state.current;\n        currentPos = parserInput.i = state.i;\n        j = state.j;\n    };\n    parserInput.forget = function() {\n        saveStack.pop();\n    };\n    parserInput.isWhitespace = function (offset) {\n        var pos = parserInput.i + (offset || 0),\n            code = input.charCodeAt(pos);\n        return (code === CHARCODE_SPACE || code === CHARCODE_CR || code === CHARCODE_TAB || code === CHARCODE_LF);\n    };\n\n    // Specialization of $(tok)\n    parserInput.$re = function(tok) {\n        if (parserInput.i > currentPos) {\n            current = current.slice(parserInput.i - currentPos);\n            currentPos = parserInput.i;\n        }\n\n        var m = tok.exec(current);\n        if (!m) {\n            return null;\n        }\n\n        skipWhitespace(m[0].length);\n        if (typeof m === \"string\") {\n            return m;\n        }\n\n        return m.length === 1 ? m[0] : m;\n    };\n\n    parserInput.$char = function(tok) {\n        if (input.charAt(parserInput.i) !== tok) {\n            return null;\n        }\n        skipWhitespace(1);\n        return tok;\n    };\n\n    parserInput.$str = function(tok) {\n        var tokLength = tok.length;\n\n        // https://jsperf.com/string-startswith/21\n        for (var i = 0; i < tokLength; i++) {\n            if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n                return null;\n            }\n        }\n\n        skipWhitespace(tokLength);\n        return tok;\n    };\n\n    parserInput.$quoted = function() {\n\n        var startChar = input.charAt(parserInput.i);\n        if (startChar !== \"'\" && startChar !== '\"') {\n            return;\n        }\n        var length = input.length,\n            currentPosition = parserInput.i;\n\n        for (var i = 1; i + currentPosition < length; i++) {\n            var nextChar = input.charAt(i + currentPosition);\n            switch(nextChar) {\n                case \"\\\\\":\n                    i++;\n                    continue;\n                case \"\\r\":\n                case \"\\n\":\n                    break;\n                case startChar:\n                    var str = input.substr(currentPosition, i + 1);\n                    skipWhitespace(i + 1);\n                    return str;\n                default:\n            }\n        }\n        return null;\n    };\n\n    parserInput.autoCommentAbsorb = true;\n    parserInput.commentStore = [];\n    parserInput.finished = false;\n\n    // Same as $(), but don't change the state of the parser,\n    // just return the match.\n    parserInput.peek = function(tok) {\n        if (typeof tok === 'string') {\n            // https://jsperf.com/string-startswith/21\n            for (var i = 0; i < tok.length; i++) {\n                if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            return tok.test(current);\n        }\n    };\n\n    // Specialization of peek()\n    // TODO remove or change some currentChar calls to peekChar\n    parserInput.peekChar = function(tok) {\n        return input.charAt(parserInput.i) === tok;\n    };\n\n    parserInput.currentChar = function() {\n        return input.charAt(parserInput.i);\n    };\n\n    parserInput.getInput = function() {\n        return input;\n    };\n\n    parserInput.peekNotNumeric = function() {\n        var c = input.charCodeAt(parserInput.i);\n        //Is the first char of the dimension 0-9, '.', '+' or '-'\n        return (c > CHARCODE_9 || c < CHARCODE_PLUS) || c === CHARCODE_FORWARD_SLASH || c === CHARCODE_COMMA;\n    };\n\n    parserInput.start = function(str, chunkInput, failFunction) {\n        input = str;\n        parserInput.i = j = currentPos = furthest = 0;\n\n        // chunking apparently makes things quicker (but my tests indicate\n        // it might actually make things slower in node at least)\n        // and it is a non-perfect parse - it can't recognise\n        // unquoted urls, meaning it can't distinguish comments\n        // meaning comments with quotes or {}() in them get 'counted'\n        // and then lead to parse errors.\n        // In addition if the chunking chunks in the wrong place we might\n        // not be able to parse a parser statement in one go\n        // this is officially deprecated but can be switched on via an option\n        // in the case it causes too much performance issues.\n        if (chunkInput) {\n            chunks = chunker(str, failFunction);\n        } else {\n            chunks = [str];\n        }\n\n        current = chunks[0];\n\n        skipWhitespace(0);\n    };\n\n    parserInput.end = function() {\n        var message,\n            isFinished = parserInput.i >= input.length;\n\n        if (parserInput.i < furthest) {\n            message = furthestPossibleErrorMessage;\n            parserInput.i = furthest;\n        }\n        return {\n            isFinished: isFinished,\n            furthest: parserInput.i,\n            furthestPossibleErrorMessage: message,\n            furthestReachedEnd: parserInput.i >= input.length - 1,\n            furthestChar: input[parserInput.i]\n        };\n    };\n\n    return parserInput;\n};\n\n},{\"./chunker\":36}],38:[function(require,module,exports){\nvar LessError = require('../less-error'),\n    tree = require(\"../tree\"),\n    visitors = require(\"../visitors\"),\n    getParserInput = require(\"./parser-input\"),\n    utils = require(\"../utils\");\n\n//\n// less.js - parser\n//\n//    A relatively straight-forward predictive parser.\n//    There is no tokenization/lexing stage, the input is parsed\n//    in one sweep.\n//\n//    To make the parser fast enough to run in the browser, several\n//    optimization had to be made:\n//\n//    - Matching and slicing on a huge input is often cause of slowdowns.\n//      The solution is to chunkify the input into smaller strings.\n//      The chunks are stored in the `chunks` var,\n//      `j` holds the current chunk index, and `currentPos` holds\n//      the index of the current chunk in relation to `input`.\n//      This gives us an almost 4x speed-up.\n//\n//    - In many cases, we don't need to match individual tokens;\n//      for example, if a value doesn't hold any variables, operations\n//      or dynamic references, the parser can effectively 'skip' it,\n//      treating it as a literal.\n//      An example would be '1px solid #000' - which evaluates to itself,\n//      we don't need to know what the individual components are.\n//      The drawback, of course is that you don't get the benefits of\n//      syntax-checking on the CSS. This gives us a 50% speed-up in the parser,\n//      and a smaller speed-up in the code-gen.\n//\n//\n//    Token matching is done with the `$` function, which either takes\n//    a terminal string or regexp, or a non-terminal function to call.\n//    It also takes care of moving all the indices forwards.\n//`\n//\nvar Parser = function Parser(context, imports, fileInfo) {\n    var parsers,\n        parserInput = getParserInput();\n\n    function error(msg, type) {\n        throw new LessError(\n            {\n                index: parserInput.i,\n                filename: fileInfo.filename,\n                type: type || 'Syntax',\n                message: msg\n            },\n            imports\n        );\n    }\n\n    function expect(arg, msg, index) {\n        // some older browsers return typeof 'function' for RegExp\n        var result = (arg instanceof Function) ? arg.call(parsers) : parserInput.$re(arg);\n        if (result) {\n            return result;\n        }\n        error(msg || (typeof arg === 'string' ? \"expected '\" + arg + \"' got '\" + parserInput.currentChar() + \"'\"\n                                               : \"unexpected token\"));\n    }\n\n    // Specialization of expect()\n    function expectChar(arg, msg) {\n        if (parserInput.$char(arg)) {\n            return arg;\n        }\n        error(msg || \"expected '\" + arg + \"' got '\" + parserInput.currentChar() + \"'\");\n    }\n\n    function getDebugInfo(index) {\n        var filename = fileInfo.filename;\n\n        return {\n            lineNumber: utils.getLocation(index, parserInput.getInput()).line + 1,\n            fileName: filename\n        };\n    }\n\n    //\n    // The Parser\n    //\n    return {\n\n        //\n        // Parse an input string into an abstract syntax tree,\n        // @param str A string containing 'less' markup\n        // @param callback call `callback` when done.\n        // @param [additionalData] An optional map which can contains vars - a map (key, value) of variables to apply\n        //\n        parse: function (str, callback, additionalData) {\n            var root, error = null, globalVars, modifyVars, ignored, preText = \"\";\n\n            globalVars = (additionalData && additionalData.globalVars) ? Parser.serializeVars(additionalData.globalVars) + '\\n' : '';\n            modifyVars = (additionalData && additionalData.modifyVars) ? '\\n' + Parser.serializeVars(additionalData.modifyVars) : '';\n\n            if (context.pluginManager) {\n                var preProcessors = context.pluginManager.getPreProcessors();\n                for (var i = 0; i < preProcessors.length; i++) {\n                    str = preProcessors[i].process(str, { context: context, imports: imports, fileInfo: fileInfo });\n                }\n            }\n\n            if (globalVars || (additionalData && additionalData.banner)) {\n                preText = ((additionalData && additionalData.banner) ? additionalData.banner : \"\") + globalVars;\n                ignored = imports.contentsIgnoredChars;\n                ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0;\n                ignored[fileInfo.filename] += preText.length;\n            }\n\n            str = str.replace(/\\r\\n?/g, '\\n');\n            // Remove potential UTF Byte Order Mark\n            str = preText + str.replace(/^\\uFEFF/, '') + modifyVars;\n            imports.contents[fileInfo.filename] = str;\n\n            // Start with the primary rule.\n            // The whole syntax tree is held under a Ruleset node,\n            // with the `root` property set to true, so no `{}` are\n            // output. The callback is called when the input is parsed.\n            try {\n                parserInput.start(str, context.chunkInput, function fail(msg, index) {\n                    throw new LessError({\n                        index: index,\n                        type: 'Parse',\n                        message: msg,\n                        filename: fileInfo.filename\n                    }, imports);\n                });\n\n                root = new(tree.Ruleset)(null, this.parsers.primary());\n                root.root = true;\n                root.firstRoot = true;\n            } catch (e) {\n                return callback(new LessError(e, imports, fileInfo.filename));\n            }\n\n            // If `i` is smaller than the `input.length - 1`,\n            // it means the parser wasn't able to parse the whole\n            // string, so we've got a parsing error.\n            //\n            // We try to extract a \\n delimited string,\n            // showing the line where the parse error occurred.\n            // We split it up into two parts (the part which parsed,\n            // and the part which didn't), so we can color them differently.\n            var endInfo = parserInput.end();\n            if (!endInfo.isFinished) {\n\n                var message = endInfo.furthestPossibleErrorMessage;\n\n                if (!message) {\n                    message = \"Unrecognised input\";\n                    if (endInfo.furthestChar === '}') {\n                        message += \". Possibly missing opening '{'\";\n                    } else if (endInfo.furthestChar === ')') {\n                        message += \". Possibly missing opening '('\";\n                    } else if (endInfo.furthestReachedEnd) {\n                        message += \". Possibly missing something\";\n                    }\n                }\n\n                error = new LessError({\n                    type: \"Parse\",\n                    message: message,\n                    index: endInfo.furthest,\n                    filename: fileInfo.filename\n                }, imports);\n            }\n\n            var finish = function (e) {\n                e = error || e || imports.error;\n\n                if (e) {\n                    if (!(e instanceof LessError)) {\n                        e = new LessError(e, imports, fileInfo.filename);\n                    }\n\n                    return callback(e);\n                }\n                else {\n                    return callback(null, root);\n                }\n            };\n\n            if (context.processImports !== false) {\n                new visitors.ImportVisitor(imports, finish)\n                    .run(root);\n            } else {\n                return finish();\n            }\n        },\n\n        //\n        // Here in, the parsing rules/functions\n        //\n        // The basic structure of the syntax tree generated is as follows:\n        //\n        //   Ruleset ->  Rule -> Value -> Expression -> Entity\n        //\n        // Here's some Less code:\n        //\n        //    .class {\n        //      color: #fff;\n        //      border: 1px solid #000;\n        //      width: @w + 4px;\n        //      > .child {...}\n        //    }\n        //\n        // And here's what the parse tree might look like:\n        //\n        //     Ruleset (Selector '.class', [\n        //         Rule (\"color\",  Value ([Expression [Color #fff]]))\n        //         Rule (\"border\", Value ([Expression [Dimension 1px][Keyword \"solid\"][Color #000]]))\n        //         Rule (\"width\",  Value ([Expression [Operation \" + \" [Variable \"@w\"][Dimension 4px]]]))\n        //         Ruleset (Selector [Element '>', '.child'], [...])\n        //     ])\n        //\n        //  In general, most rules will try to parse a token with the `$re()` function, and if the return\n        //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\n        //  first, before parsing, that's when we use `peek()`.\n        //\n        parsers: parsers = {\n            //\n            // The `primary` rule is the *entry* and *exit* point of the parser.\n            // The rules here can appear at any level of the parse tree.\n            //\n            // The recursive nature of the grammar is an interplay between the `block`\n            // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\n            // as represented by this simplified grammar:\n            //\n            //     primary  →  (ruleset | rule)+\n            //     ruleset  →  selector+ block\n            //     block    →  '{' primary '}'\n            //\n            // Only at one point is the primary rule not called from the\n            // block rule: at the root level.\n            //\n            primary: function () {\n                var mixin = this.mixin, root = [], node;\n\n                while (true) {\n                    while (true) {\n                        node = this.comment();\n                        if (!node) { break; }\n                        root.push(node);\n                    }\n                    // always process comments before deciding if finished\n                    if (parserInput.finished) {\n                        break;\n                    }\n                    if (parserInput.peek('}')) {\n                        break;\n                    }\n\n                    node = this.extendRule();\n                    if (node) {\n                        root = root.concat(node);\n                        continue;\n                    }\n\n                    node = mixin.definition() || this.rule() || this.ruleset() ||\n                        mixin.call() || this.rulesetCall() || this.entities.call() || this.directive();\n                    if (node) {\n                        root.push(node);\n                    } else {\n                        var foundSemiColon = false;\n                        while (parserInput.$char(\";\")) {\n                            foundSemiColon = true;\n                        }\n                        if (!foundSemiColon) {\n                            break;\n                        }\n                    }\n                }\n\n                return root;\n            },\n\n            // comments are collected by the main parsing mechanism and then assigned to nodes\n            // where the current structure allows it\n            comment: function () {\n                if (parserInput.commentStore.length) {\n                    var comment = parserInput.commentStore.shift();\n                    return new(tree.Comment)(comment.text, comment.isLineComment, comment.index, fileInfo);\n                }\n            },\n\n            //\n            // Entities are tokens which can be found inside an Expression\n            //\n            entities: {\n                //\n                // A string, which supports escaping \" and '\n                //\n                //     \"milky way\" 'he\\'s the one!'\n                //\n                quoted: function () {\n                    var str, index = parserInput.i, isEscaped = false;\n\n                    parserInput.save();\n                    if (parserInput.$char(\"~\")) {\n                        isEscaped = true;\n                    }\n                    str = parserInput.$quoted();\n                    if (!str) {\n                        parserInput.restore();\n                        return;\n                    }\n                    parserInput.forget();\n\n                    return new(tree.Quoted)(str.charAt(0), str.substr(1, str.length - 2), isEscaped, index, fileInfo);\n                },\n\n                //\n                // A catch-all word, such as:\n                //\n                //     black border-collapse\n                //\n                keyword: function () {\n                    var k = parserInput.$char(\"%\") || parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]*/);\n                    if (k) {\n                        return tree.Color.fromKeyword(k) || new(tree.Keyword)(k);\n                    }\n                },\n\n                //\n                // A function call\n                //\n                //     rgb(255, 0, 255)\n                //\n                // We also try to catch IE's `alpha()`, but let the `alpha` parser\n                // deal with the details.\n                //\n                // The arguments are parsed with the `entities.arguments` parser.\n                //\n                call: function () {\n                    var name, nameLC, args, alpha, index = parserInput.i;\n\n                    // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                    if (parserInput.peek(/^url\\(/i)) {\n                        return;\n                    }\n\n                    parserInput.save();\n\n                    name = parserInput.$re(/^([\\w-]+|%|progid:[\\w\\.]+)\\(/);\n                    if (!name) { parserInput.forget(); return; }\n\n                    name = name[1];\n                    nameLC = name.toLowerCase();\n\n                    if (nameLC === 'alpha') {\n                        alpha = parsers.alpha();\n                        if (alpha) {\n                            parserInput.forget();\n                            return alpha;\n                        }\n                    }\n\n                    args = this.arguments();\n\n                    if (! parserInput.$char(')')) {\n                        parserInput.restore(\"Could not parse call arguments or missing ')'\");\n                        return;\n                    }\n\n                    parserInput.forget();\n                    return new(tree.Call)(name, args, index, fileInfo);\n                },\n                arguments: function () {\n                    var argsSemiColon = [], argsComma = [],\n                        expressions = [],\n                        isSemiColonSeparated, value, arg;\n\n                    parserInput.save();\n\n                    while (true) {\n\n                        arg = parsers.detachedRuleset() || this.assignment() || parsers.expression();\n\n                        if (!arg) {\n                            break;\n                        }\n\n                        value = arg;\n\n                        if (arg.value && arg.value.length == 1) {\n                            value = arg.value[0];\n                        }\n\n                        if (value) {\n                            expressions.push(value);\n                        }\n\n                        argsComma.push(value);\n\n                        if (parserInput.$char(',')) {\n                            continue;\n                        }\n\n                        if (parserInput.$char(';') || isSemiColonSeparated) {\n\n                            isSemiColonSeparated = true;\n\n                            if (expressions.length > 1) {\n                                value = new(tree.Value)(expressions);\n                            }\n                            argsSemiColon.push(value);\n\n                            expressions = [];\n                        }\n                    }\n\n                    parserInput.forget();\n                    return isSemiColonSeparated ? argsSemiColon : argsComma;\n                },\n                literal: function () {\n                    return this.dimension() ||\n                           this.color() ||\n                           this.quoted() ||\n                           this.unicodeDescriptor();\n                },\n\n                // Assignments are argument entities for calls.\n                // They are present in ie filter properties as shown below.\n                //\n                //     filter: progid:DXImageTransform.Microsoft.Alpha( *opacity=50* )\n                //\n\n                assignment: function () {\n                    var key, value;\n                    parserInput.save();\n                    key = parserInput.$re(/^\\w+(?=\\s?=)/i);\n                    if (!key) {\n                        parserInput.restore();\n                        return;\n                    }\n                    if (!parserInput.$char('=')) {\n                        parserInput.restore();\n                        return;\n                    }\n                    value = parsers.entity();\n                    if (value) {\n                        parserInput.forget();\n                        return new(tree.Assignment)(key, value);\n                    } else {\n                        parserInput.restore();\n                    }\n                },\n\n                //\n                // Parse url() tokens\n                //\n                // We use a specific rule for urls, because they don't really behave like\n                // standard function calls. The difference is that the argument doesn't have\n                // to be enclosed within a string, so it can't be parsed as an Expression.\n                //\n                url: function () {\n                    var value, index = parserInput.i;\n\n                    parserInput.autoCommentAbsorb = false;\n\n                    if (!parserInput.$str(\"url(\")) {\n                        parserInput.autoCommentAbsorb = true;\n                        return;\n                    }\n\n                    value = this.quoted() || this.variable() ||\n                            parserInput.$re(/^(?:(?:\\\\[\\(\\)'\"])|[^\\(\\)'\"])+/) || \"\";\n\n                    parserInput.autoCommentAbsorb = true;\n\n                    expectChar(')');\n\n                    return new(tree.URL)((value.value != null || value instanceof tree.Variable) ?\n                                        value : new(tree.Anonymous)(value), index, fileInfo);\n                },\n\n                //\n                // A Variable entity, such as `@fink`, in\n                //\n                //     width: @fink + 2px\n                //\n                // We use a different parser for variable definitions,\n                // see `parsers.variable`.\n                //\n                variable: function () {\n                    var name, index = parserInput.i;\n\n                    if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^@@?[\\w-]+/))) {\n                        return new(tree.Variable)(name, index, fileInfo);\n                    }\n                },\n\n                // A variable entity using the protective {} e.g. @{var}\n                variableCurly: function () {\n                    var curly, index = parserInput.i;\n\n                    if (parserInput.currentChar() === '@' && (curly = parserInput.$re(/^@\\{([\\w-]+)\\}/))) {\n                        return new(tree.Variable)(\"@\" + curly[1], index, fileInfo);\n                    }\n                },\n\n                //\n                // A Hexadecimal color\n                //\n                //     #4F3C2F\n                //\n                // `rgb` and `hsl` colors are parsed through the `entities.call` parser.\n                //\n                color: function () {\n                    var rgb;\n\n                    if (parserInput.currentChar() === '#' && (rgb = parserInput.$re(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/))) {\n                        // strip colons, brackets, whitespaces and other characters that should not\n                        // definitely be part of color string\n                        var colorCandidateString = rgb.input.match(/^#([\\w]+).*/);\n                        colorCandidateString = colorCandidateString[1];\n                        if (!colorCandidateString.match(/^[A-Fa-f0-9]+$/)) { // verify if candidate consists only of allowed HEX characters\n                            error(\"Invalid HEX color code\");\n                        }\n                        return new(tree.Color)(rgb[1], undefined, '#' + colorCandidateString);\n                    }\n                },\n\n                colorKeyword: function () {\n                    parserInput.save();\n                    var autoCommentAbsorb = parserInput.autoCommentAbsorb;\n                    parserInput.autoCommentAbsorb = false;\n                    var k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/);\n                    parserInput.autoCommentAbsorb = autoCommentAbsorb;\n                    if (!k) {\n                        parserInput.forget();\n                        return;\n                    }\n                    parserInput.restore();\n                    var color = tree.Color.fromKeyword(k);\n                    if (color) {\n                        parserInput.$str(k);\n                        return color;\n                    }\n                },\n\n                //\n                // A Dimension, that is, a number and a unit\n                //\n                //     0.5em 95%\n                //\n                dimension: function () {\n                    if (parserInput.peekNotNumeric()) {\n                        return;\n                    }\n\n                    var value = parserInput.$re(/^([+-]?\\d*\\.?\\d+)(%|[a-z_]+)?/i);\n                    if (value) {\n                        return new(tree.Dimension)(value[1], value[2]);\n                    }\n                },\n\n                //\n                // A unicode descriptor, as is used in unicode-range\n                //\n                // U+0??  or U+00A1-00A9\n                //\n                unicodeDescriptor: function () {\n                    var ud;\n\n                    ud = parserInput.$re(/^U\\+[0-9a-fA-F?]+(\\-[0-9a-fA-F?]+)?/);\n                    if (ud) {\n                        return new(tree.UnicodeDescriptor)(ud[0]);\n                    }\n                },\n\n                //\n                // JavaScript code to be evaluated\n                //\n                //     `window.location.href`\n                //\n                javascript: function () {\n                    var js, index = parserInput.i;\n\n                    parserInput.save();\n\n                    var escape = parserInput.$char(\"~\");\n                    var jsQuote = parserInput.$char(\"`\");\n\n                    if (!jsQuote) {\n                        parserInput.restore();\n                        return;\n                    }\n\n                    js = parserInput.$re(/^[^`]*`/);\n                    if (js) {\n                        parserInput.forget();\n                        return new(tree.JavaScript)(js.substr(0, js.length - 1), Boolean(escape), index, fileInfo);\n                    }\n                    parserInput.restore(\"invalid javascript definition\");\n                }\n            },\n\n            //\n            // The variable part of a variable definition. Used in the `rule` parser\n            //\n            //     @fink:\n            //\n            variable: function () {\n                var name;\n\n                if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\\w-]+)\\s*:/))) { return name[1]; }\n            },\n\n            //\n            // The variable part of a variable definition. Used in the `rule` parser\n            //\n            //     @fink();\n            //\n            rulesetCall: function () {\n                var name;\n\n                if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\\w-]+)\\(\\s*\\)\\s*;/))) {\n                    return new tree.RulesetCall(name[1]);\n                }\n            },\n\n            //\n            // extend syntax - used to extend selectors\n            //\n            extend: function(isRule) {\n                var elements, e, index = parserInput.i, option, extendList, extend;\n\n                if (!parserInput.$str(isRule ? \"&:extend(\" : \":extend(\")) {\n                    return;\n                }\n\n                do {\n                    option = null;\n                    elements = null;\n                    while (! (option = parserInput.$re(/^(all)(?=\\s*(\\)|,))/))) {\n                        e = this.element();\n                        if (!e) {\n                            break;\n                        }\n                        if (elements) {\n                            elements.push(e);\n                        } else {\n                            elements = [ e ];\n                        }\n                    }\n\n                    option = option && option[1];\n                    if (!elements) {\n                        error(\"Missing target selector for :extend().\");\n                    }\n                    extend = new(tree.Extend)(new(tree.Selector)(elements), option, index, fileInfo);\n                    if (extendList) {\n                        extendList.push(extend);\n                    } else {\n                        extendList = [ extend ];\n                    }\n                } while (parserInput.$char(\",\"));\n\n                expect(/^\\)/);\n\n                if (isRule) {\n                    expect(/^;/);\n                }\n\n                return extendList;\n            },\n\n            //\n            // extendRule - used in a rule to extend all the parent selectors\n            //\n            extendRule: function() {\n                return this.extend(true);\n            },\n\n            //\n            // Mixins\n            //\n            mixin: {\n                //\n                // A Mixin call, with an optional argument list\n                //\n                //     #mixins > .square(#fff);\n                //     .rounded(4px, black);\n                //     .button;\n                //\n                // The `while` loop is there because mixins can be\n                // namespaced, but we only support the child and descendant\n                // selector for now.\n                //\n                call: function () {\n                    var s = parserInput.currentChar(), important = false, index = parserInput.i, elemIndex,\n                        elements, elem, e, c, args;\n\n                    if (s !== '.' && s !== '#') { return; }\n\n                    parserInput.save(); // stop us absorbing part of an invalid selector\n\n                    while (true) {\n                        elemIndex = parserInput.i;\n                        e = parserInput.$re(/^[#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/);\n                        if (!e) {\n                            break;\n                        }\n                        elem = new(tree.Element)(c, e, elemIndex, fileInfo);\n                        if (elements) {\n                            elements.push(elem);\n                        } else {\n                            elements = [ elem ];\n                        }\n                        c = parserInput.$char('>');\n                    }\n\n                    if (elements) {\n                        if (parserInput.$char('(')) {\n                            args = this.args(true).args;\n                            expectChar(')');\n                        }\n\n                        if (parsers.important()) {\n                            important = true;\n                        }\n\n                        if (parsers.end()) {\n                            parserInput.forget();\n                            return new(tree.mixin.Call)(elements, args, index, fileInfo, important);\n                        }\n                    }\n\n                    parserInput.restore();\n                },\n                args: function (isCall) {\n                    var entities = parsers.entities,\n                        returner = { args:null, variadic: false },\n                        expressions = [], argsSemiColon = [], argsComma = [],\n                        isSemiColonSeparated, expressionContainsNamed, name, nameLoop,\n                        value, arg, expand;\n\n                    parserInput.save();\n\n                    while (true) {\n                        if (isCall) {\n                            arg = parsers.detachedRuleset() || parsers.expression();\n                        } else {\n                            parserInput.commentStore.length = 0;\n                            if (parserInput.$str(\"...\")) {\n                                returner.variadic = true;\n                                if (parserInput.$char(\";\") && !isSemiColonSeparated) {\n                                    isSemiColonSeparated = true;\n                                }\n                                (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                    .push({ variadic: true });\n                                break;\n                            }\n                            arg = entities.variable() || entities.literal() || entities.keyword();\n                        }\n\n                        if (!arg) {\n                            break;\n                        }\n\n                        nameLoop = null;\n                        if (arg.throwAwayComments) {\n                            arg.throwAwayComments();\n                        }\n                        value = arg;\n                        var val = null;\n\n                        if (isCall) {\n                            // Variable\n                            if (arg.value && arg.value.length == 1) {\n                                val = arg.value[0];\n                            }\n                        } else {\n                            val = arg;\n                        }\n\n                        if (val && val instanceof tree.Variable) {\n                            if (parserInput.$char(':')) {\n                                if (expressions.length > 0) {\n                                    if (isSemiColonSeparated) {\n                                        error(\"Cannot mix ; and , as delimiter types\");\n                                    }\n                                    expressionContainsNamed = true;\n                                }\n\n                                value = parsers.detachedRuleset() || parsers.expression();\n\n                                if (!value) {\n                                    if (isCall) {\n                                        error(\"could not understand value for named argument\");\n                                    } else {\n                                        parserInput.restore();\n                                        returner.args = [];\n                                        return returner;\n                                    }\n                                }\n                                nameLoop = (name = val.name);\n                            } else if (parserInput.$str(\"...\")) {\n                                if (!isCall) {\n                                    returner.variadic = true;\n                                    if (parserInput.$char(\";\") && !isSemiColonSeparated) {\n                                        isSemiColonSeparated = true;\n                                    }\n                                    (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                        .push({ name: arg.name, variadic: true });\n                                    break;\n                                } else {\n                                    expand = true;\n                                }\n                            } else if (!isCall) {\n                                name = nameLoop = val.name;\n                                value = null;\n                            }\n                        }\n\n                        if (value) {\n                            expressions.push(value);\n                        }\n\n                        argsComma.push({ name:nameLoop, value:value, expand:expand });\n\n                        if (parserInput.$char(',')) {\n                            continue;\n                        }\n\n                        if (parserInput.$char(';') || isSemiColonSeparated) {\n\n                            if (expressionContainsNamed) {\n                                error(\"Cannot mix ; and , as delimiter types\");\n                            }\n\n                            isSemiColonSeparated = true;\n\n                            if (expressions.length > 1) {\n                                value = new(tree.Value)(expressions);\n                            }\n                            argsSemiColon.push({ name:name, value:value, expand:expand });\n\n                            name = null;\n                            expressions = [];\n                            expressionContainsNamed = false;\n                        }\n                    }\n\n                    parserInput.forget();\n                    returner.args = isSemiColonSeparated ? argsSemiColon : argsComma;\n                    return returner;\n                },\n                //\n                // A Mixin definition, with a list of parameters\n                //\n                //     .rounded (@radius: 2px, @color) {\n                //        ...\n                //     }\n                //\n                // Until we have a finer grained state-machine, we have to\n                // do a look-ahead, to make sure we don't have a mixin call.\n                // See the `rule` function for more information.\n                //\n                // We start by matching `.rounded (`, and then proceed on to\n                // the argument list, which has optional default values.\n                // We store the parameters in `params`, with a `value` key,\n                // if there is a value, such as in the case of `@radius`.\n                //\n                // Once we've got our params list, and a closing `)`, we parse\n                // the `{...}` block.\n                //\n                definition: function () {\n                    var name, params = [], match, ruleset, cond, variadic = false;\n                    if ((parserInput.currentChar() !== '.' && parserInput.currentChar() !== '#') ||\n                        parserInput.peek(/^[^{]*\\}/)) {\n                        return;\n                    }\n\n                    parserInput.save();\n\n                    match = parserInput.$re(/^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(/);\n                    if (match) {\n                        name = match[1];\n\n                        var argInfo = this.args(false);\n                        params = argInfo.args;\n                        variadic = argInfo.variadic;\n\n                        // .mixincall(\"@{a}\");\n                        // looks a bit like a mixin definition..\n                        // also\n                        // .mixincall(@a: {rule: set;});\n                        // so we have to be nice and restore\n                        if (!parserInput.$char(')')) {\n                            parserInput.restore(\"Missing closing ')'\");\n                            return;\n                        }\n\n                        parserInput.commentStore.length = 0;\n\n                        if (parserInput.$str(\"when\")) { // Guard\n                            cond = expect(parsers.conditions, 'expected condition');\n                        }\n\n                        ruleset = parsers.block();\n\n                        if (ruleset) {\n                            parserInput.forget();\n                            return new(tree.mixin.Definition)(name, params, ruleset, cond, variadic);\n                        } else {\n                            parserInput.restore();\n                        }\n                    } else {\n                        parserInput.forget();\n                    }\n                }\n            },\n\n            //\n            // Entities are the smallest recognized token,\n            // and can be found inside a rule's value.\n            //\n            entity: function () {\n                var entities = this.entities;\n\n                return this.comment() || entities.literal() || entities.variable() || entities.url() ||\n                       entities.call()    || entities.keyword()  || entities.javascript();\n            },\n\n            //\n            // A Rule terminator. Note that we use `peek()` to check for '}',\n            // because the `block` rule will be expecting it, but we still need to make sure\n            // it's there, if ';' was omitted.\n            //\n            end: function () {\n                return parserInput.$char(';') || parserInput.peek('}');\n            },\n\n            //\n            // IE's alpha function\n            //\n            //     alpha(opacity=88)\n            //\n            alpha: function () {\n                var value;\n\n                // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                if (! parserInput.$re(/^opacity=/i)) { return; }\n                value = parserInput.$re(/^\\d+/);\n                if (!value) {\n                    value = expect(this.entities.variable, \"Could not parse alpha\");\n                }\n                expectChar(')');\n                return new(tree.Alpha)(value);\n            },\n\n            //\n            // A Selector Element\n            //\n            //     div\n            //     + h1\n            //     #socks\n            //     input[type=\"text\"]\n            //\n            // Elements are the building blocks for Selectors,\n            // they are made out of a `Combinator` (see combinator rule),\n            // and an element name, such as a tag a class, or `*`.\n            //\n            element: function () {\n                var e, c, v, index = parserInput.i;\n\n                c = this.combinator();\n\n                e = parserInput.$re(/^(?:\\d+\\.\\d+|\\d+)%/) ||\n                    parserInput.$re(/^(?:[.#]?|:*)(?:[\\w-]|[^\\x00-\\x9f]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/) ||\n                    parserInput.$char('*') || parserInput.$char('&') || this.attribute() ||\n                    parserInput.$re(/^\\([^&()@]+\\)/) ||  parserInput.$re(/^[\\.#:](?=@)/) ||\n                    this.entities.variableCurly();\n\n                if (! e) {\n                    parserInput.save();\n                    if (parserInput.$char('(')) {\n                        if ((v = this.selector()) && parserInput.$char(')')) {\n                            e = new(tree.Paren)(v);\n                            parserInput.forget();\n                        } else {\n                            parserInput.restore(\"Missing closing ')'\");\n                        }\n                    } else {\n                        parserInput.forget();\n                    }\n                }\n\n                if (e) { return new(tree.Element)(c, e, index, fileInfo); }\n            },\n\n            //\n            // Combinators combine elements together, in a Selector.\n            //\n            // Because our parser isn't white-space sensitive, special care\n            // has to be taken, when parsing the descendant combinator, ` `,\n            // as it's an empty space. We have to check the previous character\n            // in the input, to see if it's a ` ` character. More info on how\n            // we deal with this in *combinator.js*.\n            //\n            combinator: function () {\n                var c = parserInput.currentChar();\n\n                if (c === '/') {\n                    parserInput.save();\n                    var slashedCombinator = parserInput.$re(/^\\/[a-z]+\\//i);\n                    if (slashedCombinator) {\n                        parserInput.forget();\n                        return new(tree.Combinator)(slashedCombinator);\n                    }\n                    parserInput.restore();\n                }\n\n                if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {\n                    parserInput.i++;\n                    if (c === '^' && parserInput.currentChar() === '^') {\n                        c = '^^';\n                        parserInput.i++;\n                    }\n                    while (parserInput.isWhitespace()) { parserInput.i++; }\n                    return new(tree.Combinator)(c);\n                } else if (parserInput.isWhitespace(-1)) {\n                    return new(tree.Combinator)(\" \");\n                } else {\n                    return new(tree.Combinator)(null);\n                }\n            },\n            //\n            // A CSS selector (see selector below)\n            // with less extensions e.g. the ability to extend and guard\n            //\n            lessSelector: function () {\n                return this.selector(true);\n            },\n            //\n            // A CSS Selector\n            //\n            //     .class > div + h1\n            //     li a:hover\n            //\n            // Selectors are made out of one or more Elements, see above.\n            //\n            selector: function (isLess) {\n                var index = parserInput.i, elements, extendList, c, e, allExtends, when, condition;\n\n                while ((isLess && (extendList = this.extend())) || (isLess && (when = parserInput.$str(\"when\"))) || (e = this.element())) {\n                    if (when) {\n                        condition = expect(this.conditions, 'expected condition');\n                    } else if (condition) {\n                        error(\"CSS guard can only be used at the end of selector\");\n                    } else if (extendList) {\n                        if (allExtends) {\n                            allExtends = allExtends.concat(extendList);\n                        } else {\n                            allExtends = extendList;\n                        }\n                    } else {\n                        if (allExtends) { error(\"Extend can only be used at the end of selector\"); }\n                        c = parserInput.currentChar();\n                        if (elements) {\n                            elements.push(e);\n                        } else {\n                            elements = [ e ];\n                        }\n                        e = null;\n                    }\n                    if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {\n                        break;\n                    }\n                }\n\n                if (elements) { return new(tree.Selector)(elements, allExtends, condition, index, fileInfo); }\n                if (allExtends) { error(\"Extend must be used to extend a selector, it cannot be used on its own\"); }\n            },\n            attribute: function () {\n                if (! parserInput.$char('[')) { return; }\n\n                var entities = this.entities,\n                    key, val, op;\n\n                if (!(key = entities.variableCurly())) {\n                    key = expect(/^(?:[_A-Za-z0-9-\\*]*\\|)?(?:[_A-Za-z0-9-]|\\\\.)+/);\n                }\n\n                op = parserInput.$re(/^[|~*$^]?=/);\n                if (op) {\n                    val = entities.quoted() || parserInput.$re(/^[0-9]+%/) || parserInput.$re(/^[\\w-]+/) || entities.variableCurly();\n                }\n\n                expectChar(']');\n\n                return new(tree.Attribute)(key, op, val);\n            },\n\n            //\n            // The `block` rule is used by `ruleset` and `mixin.definition`.\n            // It's a wrapper around the `primary` rule, with added `{}`.\n            //\n            block: function () {\n                var content;\n                if (parserInput.$char('{') && (content = this.primary()) && parserInput.$char('}')) {\n                    return content;\n                }\n            },\n\n            blockRuleset: function() {\n                var block = this.block();\n\n                if (block) {\n                    block = new tree.Ruleset(null, block);\n                }\n                return block;\n            },\n\n            detachedRuleset: function() {\n                var blockRuleset = this.blockRuleset();\n                if (blockRuleset) {\n                    return new tree.DetachedRuleset(blockRuleset);\n                }\n            },\n\n            //\n            // div, .class, body > p {...}\n            //\n            ruleset: function () {\n                var selectors, s, rules, debugInfo;\n\n                parserInput.save();\n\n                if (context.dumpLineNumbers) {\n                    debugInfo = getDebugInfo(parserInput.i);\n                }\n\n                while (true) {\n                    s = this.lessSelector();\n                    if (!s) {\n                        break;\n                    }\n                    if (selectors) {\n                        selectors.push(s);\n                    } else {\n                        selectors = [ s ];\n                    }\n                    parserInput.commentStore.length = 0;\n                    if (s.condition && selectors.length > 1) {\n                        error(\"Guards are only currently allowed on a single selector.\");\n                    }\n                    if (! parserInput.$char(',')) { break; }\n                    if (s.condition) {\n                        error(\"Guards are only currently allowed on a single selector.\");\n                    }\n                    parserInput.commentStore.length = 0;\n                }\n\n                if (selectors && (rules = this.block())) {\n                    parserInput.forget();\n                    var ruleset = new(tree.Ruleset)(selectors, rules, context.strictImports);\n                    if (context.dumpLineNumbers) {\n                        ruleset.debugInfo = debugInfo;\n                    }\n                    return ruleset;\n                } else {\n                    parserInput.restore();\n                }\n            },\n            rule: function (tryAnonymous) {\n                var name, value, startOfRule = parserInput.i, c = parserInput.currentChar(), important, merge, isVariable;\n\n                if (c === '.' || c === '#' || c === '&' || c === ':') { return; }\n\n                parserInput.save();\n\n                name = this.variable() || this.ruleProperty();\n                if (name) {\n                    isVariable = typeof name === \"string\";\n\n                    if (isVariable) {\n                        value = this.detachedRuleset();\n                    }\n\n                    parserInput.commentStore.length = 0;\n                    if (!value) {\n                        // a name returned by this.ruleProperty() is always an array of the form:\n                        // [string-1, ..., string-n, \"\"] or [string-1, ..., string-n, \"+\"]\n                        // where each item is a tree.Keyword or tree.Variable\n                        merge = !isVariable && name.length > 1 && name.pop().value;\n\n                        // prefer to try to parse first if its a variable or we are compressing\n                        // but always fallback on the other one\n                        var tryValueFirst = !tryAnonymous && (context.compress || isVariable);\n\n                        if (tryValueFirst) {\n                            value = this.value();\n                        }\n                        if (!value) {\n                            value = this.anonymousValue();\n                            if (value) {\n                                parserInput.forget();\n                                // anonymous values absorb the end ';' which is required for them to work\n                                return new (tree.Rule)(name, value, false, merge, startOfRule, fileInfo);\n                            }\n                        }\n                        if (!tryValueFirst && !value) {\n                            value = this.value();\n                        }\n\n                        important = this.important();\n                    }\n\n                    if (value && this.end()) {\n                        parserInput.forget();\n                        return new (tree.Rule)(name, value, important, merge, startOfRule, fileInfo);\n                    } else {\n                        parserInput.restore();\n                        if (value && !tryAnonymous) {\n                            return this.rule(true);\n                        }\n                    }\n                } else {\n                    parserInput.forget();\n                }\n            },\n            anonymousValue: function () {\n                var match = parserInput.$re(/^([^@+\\/'\"*`(;{}-]*);/);\n                if (match) {\n                    return new(tree.Anonymous)(match[1]);\n                }\n            },\n\n            //\n            // An @import directive\n            //\n            //     @import \"lib\";\n            //\n            // Depending on our environment, importing is done differently:\n            // In the browser, it's an XHR request, in Node, it would be a\n            // file-system operation. The function used for importing is\n            // stored in `import`, which we pass to the Import constructor.\n            //\n            \"import\": function () {\n                var path, features, index = parserInput.i;\n\n                var dir = parserInput.$re(/^@import?\\s+/);\n\n                if (dir) {\n                    var options = (dir ? this.importOptions() : null) || {};\n\n                    if ((path = this.entities.quoted() || this.entities.url())) {\n                        features = this.mediaFeatures();\n\n                        if (!parserInput.$char(';')) {\n                            parserInput.i = index;\n                            error(\"missing semi-colon or unrecognised media features on import\");\n                        }\n                        features = features && new(tree.Value)(features);\n                        return new(tree.Import)(path, features, options, index, fileInfo);\n                    }\n                    else {\n                        parserInput.i = index;\n                        error(\"malformed import statement\");\n                    }\n                }\n            },\n\n            importOptions: function() {\n                var o, options = {}, optionName, value;\n\n                // list of options, surrounded by parens\n                if (! parserInput.$char('(')) { return null; }\n                do {\n                    o = this.importOption();\n                    if (o) {\n                        optionName = o;\n                        value = true;\n                        switch(optionName) {\n                            case \"css\":\n                                optionName = \"less\";\n                                value = false;\n                                break;\n                            case \"once\":\n                                optionName = \"multiple\";\n                                value = false;\n                                break;\n                        }\n                        options[optionName] = value;\n                        if (! parserInput.$char(',')) { break; }\n                    }\n                } while (o);\n                expectChar(')');\n                return options;\n            },\n\n            importOption: function() {\n                var opt = parserInput.$re(/^(less|css|multiple|once|inline|reference|optional)/);\n                if (opt) {\n                    return opt[1];\n                }\n            },\n\n            mediaFeature: function () {\n                var entities = this.entities, nodes = [], e, p;\n                parserInput.save();\n                do {\n                    e = entities.keyword() || entities.variable();\n                    if (e) {\n                        nodes.push(e);\n                    } else if (parserInput.$char('(')) {\n                        p = this.property();\n                        e = this.value();\n                        if (parserInput.$char(')')) {\n                            if (p && e) {\n                                nodes.push(new(tree.Paren)(new(tree.Rule)(p, e, null, null, parserInput.i, fileInfo, true)));\n                            } else if (e) {\n                                nodes.push(new(tree.Paren)(e));\n                            } else {\n                                error(\"badly formed media feature definition\");\n                            }\n                        } else {\n                            error(\"Missing closing ')'\", \"Parse\");\n                        }\n                    }\n                } while (e);\n\n                parserInput.forget();\n                if (nodes.length > 0) {\n                    return new(tree.Expression)(nodes);\n                }\n            },\n\n            mediaFeatures: function () {\n                var entities = this.entities, features = [], e;\n                do {\n                    e = this.mediaFeature();\n                    if (e) {\n                        features.push(e);\n                        if (! parserInput.$char(',')) { break; }\n                    } else {\n                        e = entities.variable();\n                        if (e) {\n                            features.push(e);\n                            if (! parserInput.$char(',')) { break; }\n                        }\n                    }\n                } while (e);\n\n                return features.length > 0 ? features : null;\n            },\n\n            media: function () {\n                var features, rules, media, debugInfo, index = parserInput.i;\n\n                if (context.dumpLineNumbers) {\n                    debugInfo = getDebugInfo(index);\n                }\n\n                parserInput.save();\n\n                if (parserInput.$str(\"@media\")) {\n                    features = this.mediaFeatures();\n\n                    rules = this.block();\n\n                    if (!rules) {\n                        error(\"media definitions require block statements after any features\");\n                    }\n\n                    parserInput.forget();\n\n                    media = new(tree.Media)(rules, features, index, fileInfo);\n                    if (context.dumpLineNumbers) {\n                        media.debugInfo = debugInfo;\n                    }\n\n                    return media;\n                }\n\n                parserInput.restore();\n            },\n\n            //\n            // A @plugin directive, used to import compiler extensions dynamically.\n            //\n            //     @plugin \"lib\";\n            //\n            // Depending on our environment, importing is done differently:\n            // In the browser, it's an XHR request, in Node, it would be a\n            // file-system operation. The function used for importing is\n            // stored in `import`, which we pass to the Import constructor.\n            //\n            plugin: function () {\n                var path,\n                    index = parserInput.i,\n                    dir   = parserInput.$re(/^@plugin?\\s+/);\n\n                if (dir) {\n                    var options = { plugin : true };\n\n                    if ((path = this.entities.quoted() || this.entities.url())) {\n\n                        if (!parserInput.$char(';')) {\n                            parserInput.i = index;\n                            error(\"missing semi-colon on plugin\");\n                        }\n\n                        return new(tree.Import)(path, null, options, index, fileInfo);\n                    }\n                    else {\n                        parserInput.i = index;\n                        error(\"malformed plugin statement\");\n                    }\n                }\n            },\n\n            //\n            // A CSS Directive\n            //\n            //     @charset \"utf-8\";\n            //\n            directive: function () {\n                var index = parserInput.i, name, value, rules, nonVendorSpecificName,\n                    hasIdentifier, hasExpression, hasUnknown, hasBlock = true, isRooted = true;\n\n                if (parserInput.currentChar() !== '@') { return; }\n\n                value = this['import']() || this.plugin() || this.media();\n                if (value) {\n                    return value;\n                }\n\n                parserInput.save();\n\n                name = parserInput.$re(/^@[a-z-]+/);\n\n                if (!name) { return; }\n\n                nonVendorSpecificName = name;\n                if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {\n                    nonVendorSpecificName = \"@\" + name.slice(name.indexOf('-', 2) + 1);\n                }\n\n                switch(nonVendorSpecificName) {\n                    case \"@charset\":\n                        hasIdentifier = true;\n                        hasBlock = false;\n                        break;\n                    case \"@namespace\":\n                        hasExpression = true;\n                        hasBlock = false;\n                        break;\n                    case \"@keyframes\":\n                    case \"@counter-style\":\n                        hasIdentifier = true;\n                        break;\n                    case \"@document\":\n                    case \"@supports\":\n                        hasUnknown = true;\n                        isRooted = false;\n                        break;\n                    default:\n                        hasUnknown = true;\n                        break;\n                }\n\n                parserInput.commentStore.length = 0;\n\n                if (hasIdentifier) {\n                    value = this.entity();\n                    if (!value) {\n                        error(\"expected \" + name + \" identifier\");\n                    }\n                } else if (hasExpression) {\n                    value = this.expression();\n                    if (!value) {\n                        error(\"expected \" + name + \" expression\");\n                    }\n                } else if (hasUnknown) {\n                    value = (parserInput.$re(/^[^{;]+/) || '').trim();\n                    hasBlock = (parserInput.currentChar() == '{');\n                    if (value) {\n                        value = new(tree.Anonymous)(value);\n                    }\n                }\n\n                if (hasBlock) {\n                    rules = this.blockRuleset();\n                }\n\n                if (rules || (!hasBlock && value && parserInput.$char(';'))) {\n                    parserInput.forget();\n                    return new (tree.Directive)(name, value, rules, index, fileInfo,\n                        context.dumpLineNumbers ? getDebugInfo(index) : null,\n                        isRooted\n                    );\n                }\n\n                parserInput.restore(\"directive options not recognised\");\n            },\n\n            //\n            // A Value is a comma-delimited list of Expressions\n            //\n            //     font-family: Baskerville, Georgia, serif;\n            //\n            // In a Rule, a Value represents everything after the `:`,\n            // and before the `;`.\n            //\n            value: function () {\n                var e, expressions = [];\n\n                do {\n                    e = this.expression();\n                    if (e) {\n                        expressions.push(e);\n                        if (! parserInput.$char(',')) { break; }\n                    }\n                } while (e);\n\n                if (expressions.length > 0) {\n                    return new(tree.Value)(expressions);\n                }\n            },\n            important: function () {\n                if (parserInput.currentChar() === '!') {\n                    return parserInput.$re(/^! *important/);\n                }\n            },\n            sub: function () {\n                var a, e;\n\n                parserInput.save();\n                if (parserInput.$char('(')) {\n                    a = this.addition();\n                    if (a && parserInput.$char(')')) {\n                        parserInput.forget();\n                        e = new(tree.Expression)([a]);\n                        e.parens = true;\n                        return e;\n                    }\n                    parserInput.restore(\"Expected ')'\");\n                    return;\n                }\n                parserInput.restore();\n            },\n            multiplication: function () {\n                var m, a, op, operation, isSpaced;\n                m = this.operand();\n                if (m) {\n                    isSpaced = parserInput.isWhitespace(-1);\n                    while (true) {\n                        if (parserInput.peek(/^\\/[*\\/]/)) {\n                            break;\n                        }\n\n                        parserInput.save();\n\n                        op = parserInput.$char('/') || parserInput.$char('*');\n\n                        if (!op) { parserInput.forget(); break; }\n\n                        a = this.operand();\n\n                        if (!a) { parserInput.restore(); break; }\n                        parserInput.forget();\n\n                        m.parensInOp = true;\n                        a.parensInOp = true;\n                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced);\n                        isSpaced = parserInput.isWhitespace(-1);\n                    }\n                    return operation || m;\n                }\n            },\n            addition: function () {\n                var m, a, op, operation, isSpaced;\n                m = this.multiplication();\n                if (m) {\n                    isSpaced = parserInput.isWhitespace(-1);\n                    while (true) {\n                        op = parserInput.$re(/^[-+]\\s+/) || (!isSpaced && (parserInput.$char('+') || parserInput.$char('-')));\n                        if (!op) {\n                            break;\n                        }\n                        a = this.multiplication();\n                        if (!a) {\n                            break;\n                        }\n\n                        m.parensInOp = true;\n                        a.parensInOp = true;\n                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced);\n                        isSpaced = parserInput.isWhitespace(-1);\n                    }\n                    return operation || m;\n                }\n            },\n            conditions: function () {\n                var a, b, index = parserInput.i, condition;\n\n                a = this.condition();\n                if (a) {\n                    while (true) {\n                        if (!parserInput.peek(/^,\\s*(not\\s*)?\\(/) || !parserInput.$char(',')) {\n                            break;\n                        }\n                        b = this.condition();\n                        if (!b) {\n                            break;\n                        }\n                        condition = new(tree.Condition)('or', condition || a, b, index);\n                    }\n                    return condition || a;\n                }\n            },\n            condition: function () {\n                var result, logical, next;\n                function or() {\n                    return parserInput.$str(\"or\");\n                }\n\n                result = this.conditionAnd(this);\n                if (!result) {\n                    return ;\n                }\n                logical = or();\n                if (logical) {\n                    next = this.condition();\n                    if (next) {\n                        result = new(tree.Condition)(logical, result, next);\n                    } else {\n                        return ;\n                    }\n                }\n                return result;\n            },\n            conditionAnd: function () {\n                var result, logical, next;\n                function insideCondition(me) {\n                    return me.negatedCondition() || me.parenthesisCondition();\n                }\n                function and() {\n                    return parserInput.$str(\"and\");\n                }\n\n                result = insideCondition(this);\n                if (!result) {\n                    return ;\n                }\n                logical = and();\n                if (logical) {\n                    next = this.conditionAnd();\n                    if (next) {\n                        result = new(tree.Condition)(logical, result, next);\n                    } else {\n                        return ;\n                    }\n                }\n                return result;\n            },\n            negatedCondition: function () {\n                if (parserInput.$str(\"not\")) {\n                    var result = this.parenthesisCondition();\n                    if (result) {\n                        result.negate = !result.negate;\n                    }\n                    return result;\n                }\n            },\n            parenthesisCondition: function () {\n                function tryConditionFollowedByParenthesis(me) {\n                    var body;\n                    parserInput.save();\n                    body = me.condition();\n                    if (!body) {\n                        parserInput.restore();\n                        return ;\n                    }\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore();\n                        return ;\n                    }\n                    parserInput.forget();\n                    return body;\n                }\n\n                var body;\n                parserInput.save();\n                if (!parserInput.$str(\"(\")) {\n                    parserInput.restore();\n                    return ;\n                }\n                body = tryConditionFollowedByParenthesis(this);\n                if (body) {\n                    parserInput.forget();\n                    return body;\n                }\n\n                body = this.atomicCondition();\n                if (!body) {\n                    parserInput.restore();\n                    return ;\n                }\n                if (!parserInput.$char(')')) {\n                    parserInput.restore(\"expected ')' got '\" + parserInput.currentChar() + \"'\");\n                    return ;\n                }\n                parserInput.forget();\n                return body;\n            },\n            atomicCondition: function () {\n                var entities = this.entities, index = parserInput.i, a, b, c, op;\n\n                a = this.addition() || entities.keyword() || entities.quoted();\n                if (a) {\n                    if (parserInput.$char('>')) {\n                        if (parserInput.$char('=')) {\n                            op = \">=\";\n                        } else {\n                            op = '>';\n                        }\n                    } else\n                    if (parserInput.$char('<')) {\n                        if (parserInput.$char('=')) {\n                            op = \"<=\";\n                        } else {\n                            op = '<';\n                        }\n                    } else\n                    if (parserInput.$char('=')) {\n                        if (parserInput.$char('>')) {\n                            op = \"=>\";\n                        } else if (parserInput.$char('<')) {\n                            op = '=<';\n                        } else {\n                            op = '=';\n                        }\n                    }\n                    if (op) {\n                        b = this.addition() || entities.keyword() || entities.quoted();\n                        if (b) {\n                            c = new(tree.Condition)(op, a, b, index, false);\n                        } else {\n                            error('expected expression');\n                        }\n                    } else {\n                        c = new(tree.Condition)('=', a, new(tree.Keyword)('true'), index, false);\n                    }\n                    return c;\n                }\n            },\n\n            //\n            // An operand is anything that can be part of an operation,\n            // such as a Color, or a Variable\n            //\n            operand: function () {\n                var entities = this.entities, negate;\n\n                if (parserInput.peek(/^-[@\\(]/)) {\n                    negate = parserInput.$char('-');\n                }\n\n                var o = this.sub() || entities.dimension() ||\n                        entities.color() || entities.variable() ||\n                        entities.call() || entities.colorKeyword();\n\n                if (negate) {\n                    o.parensInOp = true;\n                    o = new(tree.Negative)(o);\n                }\n\n                return o;\n            },\n\n            //\n            // Expressions either represent mathematical operations,\n            // or white-space delimited Entities.\n            //\n            //     1px solid black\n            //     @var * 2\n            //\n            expression: function () {\n                var entities = [], e, delim;\n\n                do {\n                    e = this.comment();\n                    if (e) {\n                        entities.push(e);\n                        continue;\n                    }\n                    e = this.addition() || this.entity();\n                    if (e) {\n                        entities.push(e);\n                        // operations do not allow keyword \"/\" dimension (e.g. small/20px) so we support that here\n                        if (!parserInput.peek(/^\\/[\\/*]/)) {\n                            delim = parserInput.$char('/');\n                            if (delim) {\n                                entities.push(new(tree.Anonymous)(delim));\n                            }\n                        }\n                    }\n                } while (e);\n                if (entities.length > 0) {\n                    return new(tree.Expression)(entities);\n                }\n            },\n            property: function () {\n                var name = parserInput.$re(/^(\\*?-?[_a-zA-Z0-9-]+)\\s*:/);\n                if (name) {\n                    return name[1];\n                }\n            },\n            ruleProperty: function () {\n                var name = [], index = [], s, k;\n\n                parserInput.save();\n\n                var simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\\s*:/);\n                if (simpleProperty) {\n                    name = [new(tree.Keyword)(simpleProperty[1])];\n                    parserInput.forget();\n                    return name;\n                }\n\n                function match(re) {\n                    var i = parserInput.i,\n                        chunk = parserInput.$re(re);\n                    if (chunk) {\n                        index.push(i);\n                        return name.push(chunk[1]);\n                    }\n                }\n\n                match(/^(\\*?)/);\n                while (true) {\n                    if (!match(/^((?:[\\w-]+)|(?:@\\{[\\w-]+\\}))/)) {\n                        break;\n                    }\n                }\n\n                if ((name.length > 1) && match(/^((?:\\+_|\\+)?)\\s*:/)) {\n                    parserInput.forget();\n\n                    // at last, we have the complete match now. move forward,\n                    // convert name particles to tree objects and return:\n                    if (name[0] === '') {\n                        name.shift();\n                        index.shift();\n                    }\n                    for (k = 0; k < name.length; k++) {\n                        s = name[k];\n                        name[k] = (s.charAt(0) !== '@') ?\n                            new(tree.Keyword)(s) :\n                            new(tree.Variable)('@' + s.slice(2, -1),\n                                index[k], fileInfo);\n                    }\n                    return name;\n                }\n                parserInput.restore();\n            }\n        }\n    };\n};\nParser.serializeVars = function(vars) {\n    var s = '';\n\n    for (var name in vars) {\n        if (Object.hasOwnProperty.call(vars, name)) {\n            var value = vars[name];\n            s += ((name[0] === '@') ? '' : '@') + name + ': ' + value +\n                ((String(value).slice(-1) === ';') ? '' : ';');\n        }\n    }\n\n    return s;\n};\n\nmodule.exports = Parser;\n\n},{\"../less-error\":32,\"../tree\":62,\"../utils\":83,\"../visitors\":87,\"./parser-input\":37}],39:[function(require,module,exports){\n/**\n * Plugin Manager\n */\nvar PluginManager = function(less) {\n    this.less = less;\n    this.visitors = [];\n    this.preProcessors = [];\n    this.postProcessors = [];\n    this.installedPlugins = [];\n    this.fileManagers = [];\n};\n/**\n * Adds all the plugins in the array\n * @param {Array} plugins\n */\nPluginManager.prototype.addPlugins = function(plugins) {\n    if (plugins) {\n        for (var i = 0; i < plugins.length; i++) {\n            this.addPlugin(plugins[i]);\n        }\n    }\n};\n/**\n *\n * @param plugin\n */\nPluginManager.prototype.addPlugin = function(plugin) {\n    this.installedPlugins.push(plugin);\n    plugin.install(this.less, this);\n};\n/**\n * Adds a visitor. The visitor object has options on itself to determine\n * when it should run.\n * @param visitor\n */\nPluginManager.prototype.addVisitor = function(visitor) {\n    this.visitors.push(visitor);\n};\n/**\n * Adds a pre processor object\n * @param {object} preProcessor\n * @param {number} priority - guidelines 1 = before import, 1000 = import, 2000 = after import\n */\nPluginManager.prototype.addPreProcessor = function(preProcessor, priority) {\n    var indexToInsertAt;\n    for (indexToInsertAt = 0; indexToInsertAt < this.preProcessors.length; indexToInsertAt++) {\n        if (this.preProcessors[indexToInsertAt].priority >= priority) {\n            break;\n        }\n    }\n    this.preProcessors.splice(indexToInsertAt, 0, {preProcessor: preProcessor, priority: priority});\n};\n/**\n * Adds a post processor object\n * @param {object} postProcessor\n * @param {number} priority - guidelines 1 = before compression, 1000 = compression, 2000 = after compression\n */\nPluginManager.prototype.addPostProcessor = function(postProcessor, priority) {\n    var indexToInsertAt;\n    for (indexToInsertAt = 0; indexToInsertAt < this.postProcessors.length; indexToInsertAt++) {\n        if (this.postProcessors[indexToInsertAt].priority >= priority) {\n            break;\n        }\n    }\n    this.postProcessors.splice(indexToInsertAt, 0, {postProcessor: postProcessor, priority: priority});\n};\n/**\n *\n * @param manager\n */\nPluginManager.prototype.addFileManager = function(manager) {\n    this.fileManagers.push(manager);\n};\n/**\n *\n * @returns {Array}\n * @private\n */\nPluginManager.prototype.getPreProcessors = function() {\n    var preProcessors = [];\n    for (var i = 0; i < this.preProcessors.length; i++) {\n        preProcessors.push(this.preProcessors[i].preProcessor);\n    }\n    return preProcessors;\n};\n/**\n *\n * @returns {Array}\n * @private\n */\nPluginManager.prototype.getPostProcessors = function() {\n    var postProcessors = [];\n    for (var i = 0; i < this.postProcessors.length; i++) {\n        postProcessors.push(this.postProcessors[i].postProcessor);\n    }\n    return postProcessors;\n};\n/**\n *\n * @returns {Array}\n * @private\n */\nPluginManager.prototype.getVisitors = function() {\n    return this.visitors;\n};\n/**\n *\n * @returns {Array}\n * @private\n */\nPluginManager.prototype.getFileManagers = function() {\n    return this.fileManagers;\n};\nmodule.exports = PluginManager;\n\n},{}],40:[function(require,module,exports){\nvar LessError = require('../less-error'),\n    tree = require(\"../tree\");\n\nvar FunctionImporter = module.exports = function FunctionImporter(context, fileInfo) {\n    this.fileInfo = fileInfo;\n};\n\nFunctionImporter.prototype.eval = function(contents, callback) {\n    var loaded = {},\n        loader,\n        registry;\n\n    registry = {\n        add: function(name, func) {\n            loaded[name] = func;\n        },\n        addMultiple: function(functions) {\n            Object.keys(functions).forEach(function(name) {\n                loaded[name] = functions[name];\n            });\n        }\n    };\n\n    try {\n        loader = new Function(\"functions\", \"tree\", \"fileInfo\", contents);\n        loader(registry, tree, this.fileInfo);\n    } catch(e) {\n        callback(new LessError({\n            message: \"Plugin evaluation error: '\" + e.name + ': ' + e.message.replace(/[\"]/g, \"'\") + \"'\" ,\n            filename: this.fileInfo.filename\n        }), null );\n    }\n\n    callback(null, { functions: loaded });\n};\n\n},{\"../less-error\":32,\"../tree\":62}],41:[function(require,module,exports){\nvar PromiseConstructor;\n\nmodule.exports = function(environment, ParseTree, ImportManager) {\n    var render = function (input, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback) {\n            if (!PromiseConstructor) {\n                PromiseConstructor = typeof Promise === 'undefined' ? require('promise') : Promise;\n            }\n            var self = this;\n            return new PromiseConstructor(function (resolve, reject) {\n                render.call(self, input, options, function(err, output) {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            this.parse(input, options, function(err, root, imports, options) {\n                if (err) { return callback(err); }\n\n                var result;\n                try {\n                    var parseTree = new ParseTree(root, imports);\n                    result = parseTree.toCSS(options);\n                }\n                catch (err) { return callback(err); }\n\n                callback(null, result);\n            });\n        }\n    };\n\n    return render;\n};\n\n},{\"promise\":undefined}],42:[function(require,module,exports){\nmodule.exports = function (SourceMapOutput, environment) {\n\n    var SourceMapBuilder = function (options) {\n        this.options = options;\n    };\n\n    SourceMapBuilder.prototype.toCSS = function(rootNode, options, imports) {\n        var sourceMapOutput = new SourceMapOutput(\n            {\n                contentsIgnoredCharsMap: imports.contentsIgnoredChars,\n                rootNode: rootNode,\n                contentsMap: imports.contents,\n                sourceMapFilename: this.options.sourceMapFilename,\n                sourceMapURL: this.options.sourceMapURL,\n                outputFilename: this.options.sourceMapOutputFilename,\n                sourceMapBasepath: this.options.sourceMapBasepath,\n                sourceMapRootpath: this.options.sourceMapRootpath,\n                outputSourceFiles: this.options.outputSourceFiles,\n                sourceMapGenerator: this.options.sourceMapGenerator,\n                sourceMapFileInline: this.options.sourceMapFileInline\n            });\n\n        var css = sourceMapOutput.toCSS(options);\n        this.sourceMap = sourceMapOutput.sourceMap;\n        this.sourceMapURL = sourceMapOutput.sourceMapURL;\n        if (this.options.sourceMapInputFilename) {\n            this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(this.options.sourceMapInputFilename);\n        }\n        return css + this.getCSSAppendage();\n    };\n\n    SourceMapBuilder.prototype.getCSSAppendage = function() {\n\n        var sourceMapURL = this.sourceMapURL;\n        if (this.options.sourceMapFileInline) {\n            if (this.sourceMap === undefined) {\n                return \"\";\n            }\n            sourceMapURL = \"data:application/json;base64,\" + environment.encodeBase64(this.sourceMap);\n        }\n\n        if (sourceMapURL) {\n            return \"/*# sourceMappingURL=\" + sourceMapURL + \" */\";\n        }\n        return \"\";\n    };\n\n    SourceMapBuilder.prototype.getExternalSourceMap = function() {\n        return this.sourceMap;\n    };\n    SourceMapBuilder.prototype.setExternalSourceMap = function(sourceMap) {\n        this.sourceMap = sourceMap;\n    };\n\n    SourceMapBuilder.prototype.isInline = function() {\n        return this.options.sourceMapFileInline;\n    };\n    SourceMapBuilder.prototype.getSourceMapURL = function() {\n        return this.sourceMapURL;\n    };\n    SourceMapBuilder.prototype.getOutputFilename = function() {\n        return this.options.sourceMapOutputFilename;\n    };\n    SourceMapBuilder.prototype.getInputFilename = function() {\n        return this.sourceMapInputFilename;\n    };\n\n    return SourceMapBuilder;\n};\n\n},{}],43:[function(require,module,exports){\nmodule.exports = function (environment) {\n\n    var SourceMapOutput = function (options) {\n        this._css = [];\n        this._rootNode = options.rootNode;\n        this._contentsMap = options.contentsMap;\n        this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;\n        if (options.sourceMapFilename) {\n            this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/');\n        }\n        this._outputFilename = options.outputFilename;\n        this.sourceMapURL = options.sourceMapURL;\n        if (options.sourceMapBasepath) {\n            this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/');\n        }\n        if (options.sourceMapRootpath) {\n            this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/');\n            if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {\n                this._sourceMapRootpath += '/';\n            }\n        } else {\n            this._sourceMapRootpath = \"\";\n        }\n        this._outputSourceFiles = options.outputSourceFiles;\n        this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();\n\n        this._lineNumber = 0;\n        this._column = 0;\n    };\n\n    SourceMapOutput.prototype.normalizeFilename = function(filename) {\n        filename = filename.replace(/\\\\/g, '/');\n\n        if (this._sourceMapBasepath && filename.indexOf(this._sourceMapBasepath) === 0) {\n            filename = filename.substring(this._sourceMapBasepath.length);\n            if (filename.charAt(0) === '\\\\' || filename.charAt(0) === '/') {\n                filename = filename.substring(1);\n            }\n        }\n        return (this._sourceMapRootpath || \"\") + filename;\n    };\n\n    SourceMapOutput.prototype.add = function(chunk, fileInfo, index, mapLines) {\n\n        //ignore adding empty strings\n        if (!chunk) {\n            return;\n        }\n\n        var lines,\n            sourceLines,\n            columns,\n            sourceColumns,\n            i;\n\n        if (fileInfo) {\n            var inputSource = this._contentsMap[fileInfo.filename];\n\n            // remove vars/banner added to the top of the file\n            if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\n                // adjust the index\n                index -= this._contentsIgnoredCharsMap[fileInfo.filename];\n                if (index < 0) { index = 0; }\n                // adjust the source\n                inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);\n            }\n            inputSource = inputSource.substring(0, index);\n            sourceLines = inputSource.split(\"\\n\");\n            sourceColumns = sourceLines[sourceLines.length - 1];\n        }\n\n        lines = chunk.split(\"\\n\");\n        columns = lines[lines.length - 1];\n\n        if (fileInfo) {\n            if (!mapLines) {\n                this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + 1, column: this._column},\n                    original: { line: sourceLines.length, column: sourceColumns.length},\n                    source: this.normalizeFilename(fileInfo.filename)});\n            } else {\n                for (i = 0; i < lines.length; i++) {\n                    this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + i + 1, column: i === 0 ? this._column : 0},\n                        original: { line: sourceLines.length + i, column: i === 0 ? sourceColumns.length : 0},\n                        source: this.normalizeFilename(fileInfo.filename)});\n                }\n            }\n        }\n\n        if (lines.length === 1) {\n            this._column += columns.length;\n        } else {\n            this._lineNumber += lines.length - 1;\n            this._column = columns.length;\n        }\n\n        this._css.push(chunk);\n    };\n\n    SourceMapOutput.prototype.isEmpty = function() {\n        return this._css.length === 0;\n    };\n\n    SourceMapOutput.prototype.toCSS = function(context) {\n        this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({ file: this._outputFilename, sourceRoot: null });\n\n        if (this._outputSourceFiles) {\n            for (var filename in this._contentsMap) {\n                if (this._contentsMap.hasOwnProperty(filename)) {\n                    var source = this._contentsMap[filename];\n                    if (this._contentsIgnoredCharsMap[filename]) {\n                        source = source.slice(this._contentsIgnoredCharsMap[filename]);\n                    }\n                    this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);\n                }\n            }\n        }\n\n        this._rootNode.genCSS(context, this);\n\n        if (this._css.length > 0) {\n            var sourceMapURL,\n                sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());\n\n            if (this.sourceMapURL) {\n                sourceMapURL = this.sourceMapURL;\n            } else if (this._sourceMapFilename) {\n                sourceMapURL = this._sourceMapFilename;\n            }\n            this.sourceMapURL = sourceMapURL;\n\n            this.sourceMap = sourceMapContent;\n        }\n\n        return this._css.join('');\n    };\n\n    return SourceMapOutput;\n};\n\n},{}],44:[function(require,module,exports){\nvar contexts = require(\"./contexts\"),\n    visitor = require(\"./visitors\"),\n    tree = require(\"./tree\");\n\nmodule.exports = function(root, options) {\n    options = options || {};\n    var evaldRoot,\n        variables = options.variables,\n        evalEnv = new contexts.Eval(options);\n\n    //\n    // Allows setting variables with a hash, so:\n    //\n    //   `{ color: new tree.Color('#f01') }` will become:\n    //\n    //   new tree.Rule('@color',\n    //     new tree.Value([\n    //       new tree.Expression([\n    //         new tree.Color('#f01')\n    //       ])\n    //     ])\n    //   )\n    //\n    if (typeof variables === 'object' && !Array.isArray(variables)) {\n        variables = Object.keys(variables).map(function (k) {\n            var value = variables[k];\n\n            if (! (value instanceof tree.Value)) {\n                if (! (value instanceof tree.Expression)) {\n                    value = new tree.Expression([value]);\n                }\n                value = new tree.Value([value]);\n            }\n            return new tree.Rule('@' + k, value, false, null, 0);\n        });\n        evalEnv.frames = [new tree.Ruleset(null, variables)];\n    }\n\n    var preEvalVisitors = [],\n        visitors = [\n            new visitor.JoinSelectorVisitor(),\n            new visitor.MarkVisibleSelectorsVisitor(true),\n            new visitor.ExtendVisitor(),\n            new visitor.ToCSSVisitor({compress: Boolean(options.compress)})\n        ], i;\n\n    if (options.pluginManager) {\n        var pluginVisitors = options.pluginManager.getVisitors();\n        for (i = 0; i < pluginVisitors.length; i++) {\n            var pluginVisitor = pluginVisitors[i];\n            if (pluginVisitor.isPreEvalVisitor) {\n                preEvalVisitors.push(pluginVisitor);\n            } else {\n                if (pluginVisitor.isPreVisitor) {\n                    visitors.splice(0, 0, pluginVisitor);\n                } else {\n                    visitors.push(pluginVisitor);\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < preEvalVisitors.length; i++) {\n        preEvalVisitors[i].run(root);\n    }\n\n    evaldRoot = root.eval(evalEnv);\n\n    for (i = 0; i < visitors.length; i++) {\n        visitors[i].run(evaldRoot);\n    }\n\n    return evaldRoot;\n};\n\n},{\"./contexts\":11,\"./tree\":62,\"./visitors\":87}],45:[function(require,module,exports){\nvar Node = require(\"./node\");\n\nvar Alpha = function (val) {\n    this.value = val;\n};\nAlpha.prototype = new Node();\nAlpha.prototype.type = \"Alpha\";\n\nAlpha.prototype.accept = function (visitor) {\n    this.value = visitor.visit(this.value);\n};\nAlpha.prototype.eval = function (context) {\n    if (this.value.eval) { return new Alpha(this.value.eval(context)); }\n    return this;\n};\nAlpha.prototype.genCSS = function (context, output) {\n    output.add(\"alpha(opacity=\");\n\n    if (this.value.genCSS) {\n        this.value.genCSS(context, output);\n    } else {\n        output.add(this.value);\n    }\n\n    output.add(\")\");\n};\n\nmodule.exports = Alpha;\n\n},{\"./node\":70}],46:[function(require,module,exports){\nvar Node = require(\"./node\");\n\nvar Anonymous = function (value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {\n    this.value = value;\n    this.index = index;\n    this.mapLines = mapLines;\n    this.currentFileInfo = currentFileInfo;\n    this.rulesetLike = (typeof rulesetLike === 'undefined') ? false : rulesetLike;\n    this.allowRoot = true;\n    this.copyVisibilityInfo(visibilityInfo);\n};\nAnonymous.prototype = new Node();\nAnonymous.prototype.type = \"Anonymous\";\nAnonymous.prototype.eval = function () {\n    return new Anonymous(this.value, this.index, this.currentFileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());\n};\nAnonymous.prototype.compare = function (other) {\n    return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n};\nAnonymous.prototype.isRulesetLike = function() {\n    return this.rulesetLike;\n};\nAnonymous.prototype.genCSS = function (context, output) {\n    output.add(this.value, this.currentFileInfo, this.index, this.mapLines);\n};\nmodule.exports = Anonymous;\n\n},{\"./node\":70}],47:[function(require,module,exports){\nvar Node = require(\"./node\");\n\nvar Assignment = function (key, val) {\n    this.key = key;\n    this.value = val;\n};\n\nAssignment.prototype = new Node();\nAssignment.prototype.type = \"Assignment\";\nAssignment.prototype.accept = function (visitor) {\n    this.value = visitor.visit(this.value);\n};\nAssignment.prototype.eval = function (context) {\n    if (this.value.eval) {\n        return new Assignment(this.key, this.value.eval(context));\n    }\n    return this;\n};\nAssignment.prototype.genCSS = function (context, output) {\n    output.add(this.key + '=');\n    if (this.value.genCSS) {\n        this.value.genCSS(context, output);\n    } else {\n        output.add(this.value);\n    }\n};\nmodule.exports = Assignment;\n\n},{\"./node\":70}],48:[function(require,module,exports){\nvar Node = require(\"./node\");\n\nvar Attribute = function (key, op, value) {\n    this.key = key;\n    this.op = op;\n    this.value = value;\n};\nAttribute.prototype = new Node();\nAttribute.prototype.type = \"Attribute\";\nAttribute.prototype.eval = function (context) {\n    return new Attribute(this.key.eval ? this.key.eval(context) : this.key,\n        this.op, (this.value && this.value.eval) ? this.value.eval(context) : this.value);\n};\nAttribute.prototype.genCSS = function (context, output) {\n    output.add(this.toCSS(context));\n};\nAttribute.prototype.toCSS = function (context) {\n    var value = this.key.toCSS ? this.key.toCSS(context) : this.key;\n\n    if (this.op) {\n        value += this.op;\n        value += (this.value.toCSS ? this.value.toCSS(context) : this.value);\n    }\n\n    return '[' + value + ']';\n};\nmodule.exports = Attribute;\n\n},{\"./node\":70}],49:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    FunctionCaller = require(\"../functions/function-caller\");\n//\n// A function call node.\n//\nvar Call = function (name, args, index, currentFileInfo) {\n    this.name = name;\n    this.args = args;\n    this.index = index;\n    this.currentFileInfo = currentFileInfo;\n};\nCall.prototype = new Node();\nCall.prototype.type = \"Call\";\nCall.prototype.accept = function (visitor) {\n    if (this.args) {\n        this.args = visitor.visitArray(this.args);\n    }\n};\n//\n// When evaluating a function call,\n// we either find the function in the functionRegistry,\n// in which case we call it, passing the  evaluated arguments,\n// if this returns null or we cannot find the function, we\n// simply print it out as it appeared originally [2].\n//\n// The reason why we evaluate the arguments, is in the case where\n// we try to pass a variable to a function, like: `saturate(@color)`.\n// The function should receive the value, not the variable.\n//\nCall.prototype.eval = function (context) {\n    var args = this.args.map(function (a) { return a.eval(context); }),\n        result, funcCaller = new FunctionCaller(this.name, context, this.index, this.currentFileInfo);\n\n    if (funcCaller.isValid()) {\n        try {\n            result = funcCaller.call(args);\n        } catch (e) {\n            throw { type: e.type || \"Runtime\",\n                    message: \"error evaluating function `\" + this.name + \"`\" +\n                             (e.message ? ': ' + e.message : ''),\n                    index: this.index, filename: this.currentFileInfo.filename };\n        }\n\n        if (result != null) {\n            result.index = this.index;\n            result.currentFileInfo = this.currentFileInfo;\n            return result;\n        }\n    }\n\n    return new Call(this.name, args, this.index, this.currentFileInfo);\n};\nCall.prototype.genCSS = function (context, output) {\n    output.add(this.name + \"(\", this.currentFileInfo, this.index);\n\n    for (var i = 0; i < this.args.length; i++) {\n        this.args[i].genCSS(context, output);\n        if (i + 1 < this.args.length) {\n            output.add(\", \");\n        }\n    }\n\n    output.add(\")\");\n};\nmodule.exports = Call;\n\n},{\"../functions/function-caller\":21,\"./node\":70}],50:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    colors = require(\"../data/colors\");\n\n//\n// RGB Colors - #ff0014, #eee\n//\nvar Color = function (rgb, a, originalForm) {\n    //\n    // The end goal here, is to parse the arguments\n    // into an integer triplet, such as `128, 255, 0`\n    //\n    // This facilitates operations and conversions.\n    //\n    if (Array.isArray(rgb)) {\n        this.rgb = rgb;\n    } else if (rgb.length == 6) {\n        this.rgb = rgb.match(/.{2}/g).map(function (c) {\n            return parseInt(c, 16);\n        });\n    } else {\n        this.rgb = rgb.split('').map(function (c) {\n            return parseInt(c + c, 16);\n        });\n    }\n    this.alpha = typeof a === 'number' ? a : 1;\n    if (typeof originalForm !== 'undefined') {\n        this.value = originalForm;\n    }\n};\n\nColor.prototype = new Node();\nColor.prototype.type = \"Color\";\n\nfunction clamp(v, max) {\n    return Math.min(Math.max(v, 0), max);\n}\n\nfunction toHex(v) {\n    return '#' + v.map(function (c) {\n        c = clamp(Math.round(c), 255);\n        return (c < 16 ? '0' : '') + c.toString(16);\n    }).join('');\n}\n\nColor.prototype.luma = function () {\n    var r = this.rgb[0] / 255,\n        g = this.rgb[1] / 255,\n        b = this.rgb[2] / 255;\n\n    r = (r <= 0.03928) ? r / 12.92 : Math.pow(((r + 0.055) / 1.055), 2.4);\n    g = (g <= 0.03928) ? g / 12.92 : Math.pow(((g + 0.055) / 1.055), 2.4);\n    b = (b <= 0.03928) ? b / 12.92 : Math.pow(((b + 0.055) / 1.055), 2.4);\n\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n};\nColor.prototype.genCSS = function (context, output) {\n    output.add(this.toCSS(context));\n};\nColor.prototype.toCSS = function (context, doNotCompress) {\n    var compress = context && context.compress && !doNotCompress, color, alpha;\n\n    // `value` is set if this color was originally\n    // converted from a named color string so we need\n    // to respect this and try to output named color too.\n    if (this.value) {\n        return this.value;\n    }\n\n    // If we have some transparency, the only way to represent it\n    // is via `rgba`. Otherwise, we use the hex representation,\n    // which has better compatibility with older browsers.\n    // Values are capped between `0` and `255`, rounded and zero-padded.\n    alpha = this.fround(context, this.alpha);\n    if (alpha < 1) {\n        return \"rgba(\" + this.rgb.map(function (c) {\n            return clamp(Math.round(c), 255);\n        }).concat(clamp(alpha, 1))\n            .join(',' + (compress ? '' : ' ')) + \")\";\n    }\n\n    color = this.toRGB();\n\n    if (compress) {\n        var splitcolor = color.split('');\n\n        // Convert color to short format\n        if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {\n            color = '#' + splitcolor[1] + splitcolor[3] + splitcolor[5];\n        }\n    }\n\n    return color;\n};\n\n//\n// Operations have to be done per-channel, if not,\n// channels will spill onto each other. Once we have\n// our result, in the form of an integer triplet,\n// we create a new Color node to hold the result.\n//\nColor.prototype.operate = function (context, op, other) {\n    var rgb = [];\n    var alpha = this.alpha * (1 - other.alpha) + other.alpha;\n    for (var c = 0; c < 3; c++) {\n        rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);\n    }\n    return new Color(rgb, alpha);\n};\nColor.prototype.toRGB = function () {\n    return toHex(this.rgb);\n};\nColor.prototype.toHSL = function () {\n    var r = this.rgb[0] / 255,\n        g = this.rgb[1] / 255,\n        b = this.rgb[2] / 255,\n        a = this.alpha;\n\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\n    var h, s, l = (max + min) / 2, d = max - min;\n\n    if (max === min) {\n        h = s = 0;\n    } else {\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n        switch (max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2;               break;\n            case b: h = (r - g) / d + 4;               break;\n        }\n        h /= 6;\n    }\n    return { h: h * 360, s: s, l: l, a: a };\n};\n//Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\nColor.prototype.toHSV = function () {\n    var r = this.rgb[0] / 255,\n        g = this.rgb[1] / 255,\n        b = this.rgb[2] / 255,\n        a = this.alpha;\n\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    if (max === 0) {\n        s = 0;\n    } else {\n        s = d / max;\n    }\n\n    if (max === min) {\n        h = 0;\n    } else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h * 360, s: s, v: v, a: a };\n};\nColor.prototype.toARGB = function () {\n    return toHex([this.alpha * 255].concat(this.rgb));\n};\nColor.prototype.compare = function (x) {\n    return (x.rgb &&\n        x.rgb[0] === this.rgb[0] &&\n        x.rgb[1] === this.rgb[1] &&\n        x.rgb[2] === this.rgb[2] &&\n        x.alpha  === this.alpha) ? 0 : undefined;\n};\n\nColor.fromKeyword = function(keyword) {\n    var c, key = keyword.toLowerCase();\n    if (colors.hasOwnProperty(key)) {\n        c = new Color(colors[key].slice(1));\n    }\n    else if (key === \"transparent\") {\n        c = new Color([0, 0, 0], 0);\n    }\n\n    if (c) {\n        c.value = keyword;\n        return c;\n    }\n};\nmodule.exports = Color;\n\n},{\"../data/colors\":12,\"./node\":70}],51:[function(require,module,exports){\nvar Node = require(\"./node\");\n\nvar Combinator = function (value) {\n    if (value === ' ') {\n        this.value = ' ';\n        this.emptyOrWhitespace = true;\n    } else {\n        this.value = value ? value.trim() : \"\";\n        this.emptyOrWhitespace = this.value === \"\";\n    }\n};\nCombinator.prototype = new Node();\nCombinator.prototype.type = \"Combinator\";\nvar _noSpaceCombinators = {\n    '': true,\n    ' ': true,\n    '|': true\n};\nCombinator.prototype.genCSS = function (context, output) {\n    var spaceOrEmpty = (context.compress || _noSpaceCombinators[this.value]) ? '' : ' ';\n    output.add(spaceOrEmpty + this.value + spaceOrEmpty);\n};\nmodule.exports = Combinator;\n\n},{\"./node\":70}],52:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    getDebugInfo = require(\"./debug-info\");\n\nvar Comment = function (value, isLineComment, index, currentFileInfo) {\n    this.value = value;\n    this.isLineComment = isLineComment;\n    this.index = index;\n    this.currentFileInfo = currentFileInfo;\n    this.allowRoot = true;\n};\nComment.prototype = new Node();\nComment.prototype.type = \"Comment\";\nComment.prototype.genCSS = function (context, output) {\n    if (this.debugInfo) {\n        output.add(getDebugInfo(context, this), this.currentFileInfo, this.index);\n    }\n    output.add(this.value);\n};\nComment.prototype.isSilent = function(context) {\n    var isCompressed = context.compress && this.value[2] !== \"!\";\n    return this.isLineComment || isCompressed;\n};\nmodule.exports = Comment;\n\n},{\"./debug-info\":54,\"./node\":70}],53:[function(require,module,exports){\nvar Node = require(\"./node\");\n\nvar Condition = function (op, l, r, i, negate) {\n    this.op = op.trim();\n    this.lvalue = l;\n    this.rvalue = r;\n    this.index = i;\n    this.negate = negate;\n};\nCondition.prototype = new Node();\nCondition.prototype.type = \"Condition\";\nCondition.prototype.accept = function (visitor) {\n    this.lvalue = visitor.visit(this.lvalue);\n    this.rvalue = visitor.visit(this.rvalue);\n};\nCondition.prototype.eval = function (context) {\n    var result = (function (op, a, b) {\n        switch (op) {\n            case 'and': return a && b;\n            case 'or':  return a || b;\n            default:\n                switch (Node.compare(a, b)) {\n                    case -1:\n                        return op === '<' || op === '=<' || op === '<=';\n                    case 0:\n                        return op === '=' || op === '>=' || op === '=<' || op === '<=';\n                    case 1:\n                        return op === '>' || op === '>=';\n                    default:\n                        return false;\n                }\n        }\n    })(this.op, this.lvalue.eval(context), this.rvalue.eval(context));\n\n    return this.negate ? !result : result;\n};\nmodule.exports = Condition;\n\n},{\"./node\":70}],54:[function(require,module,exports){\nvar debugInfo = function(context, ctx, lineSeparator) {\n    var result = \"\";\n    if (context.dumpLineNumbers && !context.compress) {\n        switch(context.dumpLineNumbers) {\n            case 'comments':\n                result = debugInfo.asComment(ctx);\n                break;\n            case 'mediaquery':\n                result = debugInfo.asMediaQuery(ctx);\n                break;\n            case 'all':\n                result = debugInfo.asComment(ctx) + (lineSeparator || \"\") + debugInfo.asMediaQuery(ctx);\n                break;\n        }\n    }\n    return result;\n};\n\ndebugInfo.asComment = function(ctx) {\n    return '/* line ' + ctx.debugInfo.lineNumber + ', ' + ctx.debugInfo.fileName + ' */\\n';\n};\n\ndebugInfo.asMediaQuery = function(ctx) {\n    var filenameWithProtocol = ctx.debugInfo.fileName;\n    if (!/^[a-z]+:\\/\\//i.test(filenameWithProtocol)) {\n        filenameWithProtocol = 'file://' + filenameWithProtocol;\n    }\n    return '@media -sass-debug-info{filename{font-family:' +\n        filenameWithProtocol.replace(/([.:\\/\\\\])/g, function (a) {\n            if (a == '\\\\') {\n                a = '\\/';\n            }\n            return '\\\\' + a;\n        }) +\n        '}line{font-family:\\\\00003' + ctx.debugInfo.lineNumber + '}}\\n';\n};\n\nmodule.exports = debugInfo;\n\n},{}],55:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    contexts = require(\"../contexts\");\n\nvar DetachedRuleset = function (ruleset, frames) {\n    this.ruleset = ruleset;\n    this.frames = frames;\n};\nDetachedRuleset.prototype = new Node();\nDetachedRuleset.prototype.type = \"DetachedRuleset\";\nDetachedRuleset.prototype.evalFirst = true;\nDetachedRuleset.prototype.accept = function (visitor) {\n    this.ruleset = visitor.visit(this.ruleset);\n};\nDetachedRuleset.prototype.eval = function (context) {\n    var frames = this.frames || context.frames.slice(0);\n    return new DetachedRuleset(this.ruleset, frames);\n};\nDetachedRuleset.prototype.callEval = function (context) {\n    return this.ruleset.eval(this.frames ? new contexts.Eval(context, this.frames.concat(context.frames)) : context);\n};\nmodule.exports = DetachedRuleset;\n\n},{\"../contexts\":11,\"./node\":70}],56:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    unitConversions = require(\"../data/unit-conversions\"),\n    Unit = require(\"./unit\"),\n    Color = require(\"./color\");\n\n//\n// A number with a unit\n//\nvar Dimension = function (value, unit) {\n    this.value = parseFloat(value);\n    this.unit = (unit && unit instanceof Unit) ? unit :\n      new Unit(unit ? [unit] : undefined);\n};\n\nDimension.prototype = new Node();\nDimension.prototype.type = \"Dimension\";\nDimension.prototype.accept = function (visitor) {\n    this.unit = visitor.visit(this.unit);\n};\nDimension.prototype.eval = function (context) {\n    return this;\n};\nDimension.prototype.toColor = function () {\n    return new Color([this.value, this.value, this.value]);\n};\nDimension.prototype.genCSS = function (context, output) {\n    if ((context && context.strictUnits) && !this.unit.isSingular()) {\n        throw new Error(\"Multiple units in dimension. Correct the units or use the unit function. Bad unit: \" + this.unit.toString());\n    }\n\n    var value = this.fround(context, this.value),\n        strValue = String(value);\n\n    if (value !== 0 && value < 0.000001 && value > -0.000001) {\n        // would be output 1e-6 etc.\n        strValue = value.toFixed(20).replace(/0+$/, \"\");\n    }\n\n    if (context && context.compress) {\n        // Zero values doesn't need a unit\n        if (value === 0 && this.unit.isLength()) {\n            output.add(strValue);\n            return;\n        }\n\n        // Float values doesn't need a leading zero\n        if (value > 0 && value < 1) {\n            strValue = (strValue).substr(1);\n        }\n    }\n\n    output.add(strValue);\n    this.unit.genCSS(context, output);\n};\n\n// In an operation between two Dimensions,\n// we default to the first Dimension's unit,\n// so `1px + 2` will yield `3px`.\nDimension.prototype.operate = function (context, op, other) {\n    /*jshint noempty:false */\n    var value = this._operate(context, op, this.value, other.value),\n        unit = this.unit.clone();\n\n    if (op === '+' || op === '-') {\n        if (unit.numerator.length === 0 && unit.denominator.length === 0) {\n            unit = other.unit.clone();\n            if (this.unit.backupUnit) {\n                unit.backupUnit = this.unit.backupUnit;\n            }\n        } else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) {\n            // do nothing\n        } else {\n            other = other.convertTo(this.unit.usedUnits());\n\n            if (context.strictUnits && other.unit.toString() !== unit.toString()) {\n                throw new Error(\"Incompatible units. Change the units or use the unit function. Bad units: '\" + unit.toString() +\n                    \"' and '\" + other.unit.toString() + \"'.\");\n            }\n\n            value = this._operate(context, op, this.value, other.value);\n        }\n    } else if (op === '*') {\n        unit.numerator = unit.numerator.concat(other.unit.numerator).sort();\n        unit.denominator = unit.denominator.concat(other.unit.denominator).sort();\n        unit.cancel();\n    } else if (op === '/') {\n        unit.numerator = unit.numerator.concat(other.unit.denominator).sort();\n        unit.denominator = unit.denominator.concat(other.unit.numerator).sort();\n        unit.cancel();\n    }\n    return new Dimension(value, unit);\n};\nDimension.prototype.compare = function (other) {\n    var a, b;\n\n    if (!(other instanceof Dimension)) {\n        return undefined;\n    }\n\n    if (this.unit.isEmpty() || other.unit.isEmpty()) {\n        a = this;\n        b = other;\n    } else {\n        a = this.unify();\n        b = other.unify();\n        if (a.unit.compare(b.unit) !== 0) {\n            return undefined;\n        }\n    }\n\n    return Node.numericCompare(a.value, b.value);\n};\nDimension.prototype.unify = function () {\n    return this.convertTo({ length: 'px', duration: 's', angle: 'rad' });\n};\nDimension.prototype.convertTo = function (conversions) {\n    var value = this.value, unit = this.unit.clone(),\n        i, groupName, group, targetUnit, derivedConversions = {}, applyUnit;\n\n    if (typeof conversions === 'string') {\n        for (i in unitConversions) {\n            if (unitConversions[i].hasOwnProperty(conversions)) {\n                derivedConversions = {};\n                derivedConversions[i] = conversions;\n            }\n        }\n        conversions = derivedConversions;\n    }\n    applyUnit = function (atomicUnit, denominator) {\n        /* jshint loopfunc:true */\n        if (group.hasOwnProperty(atomicUnit)) {\n            if (denominator) {\n                value = value / (group[atomicUnit] / group[targetUnit]);\n            } else {\n                value = value * (group[atomicUnit] / group[targetUnit]);\n            }\n\n            return targetUnit;\n        }\n\n        return atomicUnit;\n    };\n\n    for (groupName in conversions) {\n        if (conversions.hasOwnProperty(groupName)) {\n            targetUnit = conversions[groupName];\n            group = unitConversions[groupName];\n\n            unit.map(applyUnit);\n        }\n    }\n\n    unit.cancel();\n\n    return new Dimension(value, unit);\n};\nmodule.exports = Dimension;\n\n},{\"../data/unit-conversions\":14,\"./color\":50,\"./node\":70,\"./unit\":79}],57:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    Selector = require(\"./selector\"),\n    Ruleset = require(\"./ruleset\");\n\nvar Directive = function (name, value, rules, index, currentFileInfo, debugInfo, isRooted, visibilityInfo) {\n    var i;\n\n    this.name  = name;\n    this.value = value;\n    if (rules) {\n        if (Array.isArray(rules)) {\n            this.rules = rules;\n        } else {\n            this.rules = [rules];\n            this.rules[0].selectors = (new Selector([], null, null, this.index, currentFileInfo)).createEmptySelectors();\n        }\n        for (i = 0; i < this.rules.length; i++) {\n            this.rules[i].allowImports = true;\n        }\n    }\n    this.index = index;\n    this.currentFileInfo = currentFileInfo;\n    this.debugInfo = debugInfo;\n    this.isRooted = isRooted || false;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n};\n\nDirective.prototype = new Node();\nDirective.prototype.type = \"Directive\";\nDirective.prototype.accept = function (visitor) {\n    var value = this.value, rules = this.rules;\n    if (rules) {\n        this.rules = visitor.visitArray(rules);\n    }\n    if (value) {\n        this.value = visitor.visit(value);\n    }\n};\nDirective.prototype.isRulesetLike = function() {\n    return this.rules || !this.isCharset();\n};\nDirective.prototype.isCharset = function() {\n    return \"@charset\" === this.name;\n};\nDirective.prototype.genCSS = function (context, output) {\n    var value = this.value, rules = this.rules;\n    output.add(this.name, this.currentFileInfo, this.index);\n    if (value) {\n        output.add(' ');\n        value.genCSS(context, output);\n    }\n    if (rules) {\n        this.outputRuleset(context, output, rules);\n    } else {\n        output.add(';');\n    }\n};\nDirective.prototype.eval = function (context) {\n    var mediaPathBackup, mediaBlocksBackup, value = this.value, rules = this.rules;\n\n    //media stored inside other directive should not bubble over it\n    //backpup media bubbling information\n    mediaPathBackup = context.mediaPath;\n    mediaBlocksBackup = context.mediaBlocks;\n    //deleted media bubbling information\n    context.mediaPath = [];\n    context.mediaBlocks = [];\n\n    if (value) {\n        value = value.eval(context);\n    }\n    if (rules) {\n        // assuming that there is only one rule at this point - that is how parser constructs the rule\n        rules = [rules[0].eval(context)];\n        rules[0].root = true;\n    }\n    //restore media bubbling information\n    context.mediaPath = mediaPathBackup;\n    context.mediaBlocks = mediaBlocksBackup;\n\n    return new Directive(this.name, value, rules,\n        this.index, this.currentFileInfo, this.debugInfo, this.isRooted, this.visibilityInfo());\n};\nDirective.prototype.variable = function (name) {\n    if (this.rules) {\n        // assuming that there is only one rule at this point - that is how parser constructs the rule\n        return Ruleset.prototype.variable.call(this.rules[0], name);\n    }\n};\nDirective.prototype.find = function () {\n    if (this.rules) {\n        // assuming that there is only one rule at this point - that is how parser constructs the rule\n        return Ruleset.prototype.find.apply(this.rules[0], arguments);\n    }\n};\nDirective.prototype.rulesets = function () {\n    if (this.rules) {\n        // assuming that there is only one rule at this point - that is how parser constructs the rule\n        return Ruleset.prototype.rulesets.apply(this.rules[0]);\n    }\n};\nDirective.prototype.outputRuleset = function (context, output, rules) {\n    var ruleCnt = rules.length, i;\n    context.tabLevel = (context.tabLevel | 0) + 1;\n\n    // Compressed\n    if (context.compress) {\n        output.add('{');\n        for (i = 0; i < ruleCnt; i++) {\n            rules[i].genCSS(context, output);\n        }\n        output.add('}');\n        context.tabLevel--;\n        return;\n    }\n\n    // Non-compressed\n    var tabSetStr = '\\n' + Array(context.tabLevel).join(\"  \"), tabRuleStr = tabSetStr + \"  \";\n    if (!ruleCnt) {\n        output.add(\" {\" + tabSetStr + '}');\n    } else {\n        output.add(\" {\" + tabRuleStr);\n        rules[0].genCSS(context, output);\n        for (i = 1; i < ruleCnt; i++) {\n            output.add(tabRuleStr);\n            rules[i].genCSS(context, output);\n        }\n        output.add(tabSetStr + '}');\n    }\n\n    context.tabLevel--;\n};\nmodule.exports = Directive;\n\n},{\"./node\":70,\"./ruleset\":76,\"./selector\":77}],58:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    Paren = require(\"./paren\"),\n    Combinator = require(\"./combinator\");\n\nvar Element = function (combinator, value, index, currentFileInfo, info) {\n    this.combinator = combinator instanceof Combinator ?\n                      combinator : new Combinator(combinator);\n\n    if (typeof value === 'string') {\n        this.value = value.trim();\n    } else if (value) {\n        this.value = value;\n    } else {\n        this.value = \"\";\n    }\n    this.index = index;\n    this.currentFileInfo = currentFileInfo;\n    this.copyVisibilityInfo(info);\n};\nElement.prototype = new Node();\nElement.prototype.type = \"Element\";\nElement.prototype.accept = function (visitor) {\n    var value = this.value;\n    this.combinator = visitor.visit(this.combinator);\n    if (typeof value === \"object\") {\n        this.value = visitor.visit(value);\n    }\n};\nElement.prototype.eval = function (context) {\n    return new Element(this.combinator,\n                             this.value.eval ? this.value.eval(context) : this.value,\n                             this.index,\n                             this.currentFileInfo, this.visibilityInfo());\n};\nElement.prototype.clone = function () {\n    return new Element(this.combinator,\n        this.value,\n        this.index,\n        this.currentFileInfo, this.visibilityInfo());\n};\nElement.prototype.genCSS = function (context, output) {\n    output.add(this.toCSS(context), this.currentFileInfo, this.index);\n};\nElement.prototype.toCSS = function (context) {\n    context = context || {};\n    var value = this.value, firstSelector = context.firstSelector;\n    if (value instanceof Paren) {\n        // selector in parens should not be affected by outer selector\n        // flags (breaks only interpolated selectors - see #1973)\n        context.firstSelector = true;\n    }\n    value = value.toCSS ? value.toCSS(context) : value;\n    context.firstSelector = firstSelector;\n    if (value === '' && this.combinator.value.charAt(0) === '&') {\n        return '';\n    } else {\n        return this.combinator.toCSS(context) + value;\n    }\n};\nmodule.exports = Element;\n\n},{\"./combinator\":51,\"./node\":70,\"./paren\":72}],59:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    Paren = require(\"./paren\"),\n    Comment = require(\"./comment\");\n\nvar Expression = function (value) {\n    this.value = value;\n    if (!value) {\n        throw new Error(\"Expression requires an array parameter\");\n    }\n};\nExpression.prototype = new Node();\nExpression.prototype.type = \"Expression\";\nExpression.prototype.accept = function (visitor) {\n    this.value = visitor.visitArray(this.value);\n};\nExpression.prototype.eval = function (context) {\n    var returnValue,\n        inParenthesis = this.parens && !this.parensInOp,\n        doubleParen = false;\n    if (inParenthesis) {\n        context.inParenthesis();\n    }\n    if (this.value.length > 1) {\n        returnValue = new Expression(this.value.map(function (e) {\n            return e.eval(context);\n        }));\n    } else if (this.value.length === 1) {\n        if (this.value[0].parens && !this.value[0].parensInOp) {\n            doubleParen = true;\n        }\n        returnValue = this.value[0].eval(context);\n    } else {\n        returnValue = this;\n    }\n    if (inParenthesis) {\n        context.outOfParenthesis();\n    }\n    if (this.parens && this.parensInOp && !(context.isMathOn()) && !doubleParen) {\n        returnValue = new Paren(returnValue);\n    }\n    return returnValue;\n};\nExpression.prototype.genCSS = function (context, output) {\n    for (var i = 0; i < this.value.length; i++) {\n        this.value[i].genCSS(context, output);\n        if (i + 1 < this.value.length) {\n            output.add(\" \");\n        }\n    }\n};\nExpression.prototype.throwAwayComments = function () {\n    this.value = this.value.filter(function(v) {\n        return !(v instanceof Comment);\n    });\n};\nmodule.exports = Expression;\n\n},{\"./comment\":52,\"./node\":70,\"./paren\":72}],60:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    Selector = require(\"./selector\");\n\nvar Extend = function Extend(selector, option, index, currentFileInfo, visibilityInfo) {\n    this.selector = selector;\n    this.option = option;\n    this.index = index;\n    this.object_id = Extend.next_id++;\n    this.parent_ids = [this.object_id];\n    this.currentFileInfo = currentFileInfo || {};\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n\n    switch(option) {\n        case \"all\":\n            this.allowBefore = true;\n            this.allowAfter = true;\n            break;\n        default:\n            this.allowBefore = false;\n            this.allowAfter = false;\n            break;\n    }\n};\nExtend.next_id = 0;\n\nExtend.prototype = new Node();\nExtend.prototype.type = \"Extend\";\nExtend.prototype.accept = function (visitor) {\n    this.selector = visitor.visit(this.selector);\n};\nExtend.prototype.eval = function (context) {\n    return new Extend(this.selector.eval(context), this.option, this.index, this.currentFileInfo, this.visibilityInfo());\n};\nExtend.prototype.clone = function (context) {\n    return new Extend(this.selector, this.option, this.index, this.currentFileInfo, this.visibilityInfo());\n};\n//it concatenates (joins) all selectors in selector array\nExtend.prototype.findSelfSelectors = function (selectors) {\n    var selfElements = [],\n        i,\n        selectorElements;\n\n    for (i = 0; i < selectors.length; i++) {\n        selectorElements = selectors[i].elements;\n        // duplicate the logic in genCSS function inside the selector node.\n        // future TODO - move both logics into the selector joiner visitor\n        if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === \"\") {\n            selectorElements[0].combinator.value = ' ';\n        }\n        selfElements = selfElements.concat(selectors[i].elements);\n    }\n\n    this.selfSelectors = [new Selector(selfElements)];\n    this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());\n};\nmodule.exports = Extend;\n\n},{\"./node\":70,\"./selector\":77}],61:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    Media = require(\"./media\"),\n    URL = require(\"./url\"),\n    Quoted = require(\"./quoted\"),\n    Ruleset = require(\"./ruleset\"),\n    Anonymous = require(\"./anonymous\");\n\n//\n// CSS @import node\n//\n// The general strategy here is that we don't want to wait\n// for the parsing to be completed, before we start importing\n// the file. That's because in the context of a browser,\n// most of the time will be spent waiting for the server to respond.\n//\n// On creation, we push the import path to our import queue, though\n// `import,push`, we also pass it a callback, which it'll call once\n// the file has been fetched, and parsed.\n//\nvar Import = function (path, features, options, index, currentFileInfo, visibilityInfo) {\n    this.options = options;\n    this.index = index;\n    this.path = path;\n    this.features = features;\n    this.currentFileInfo = currentFileInfo;\n    this.allowRoot = true;\n\n    if (this.options.less !== undefined || this.options.inline) {\n        this.css = !this.options.less || this.options.inline;\n    } else {\n        var pathValue = this.getPath();\n        if (pathValue && /[#\\.\\&\\?\\/]css([\\?;].*)?$/.test(pathValue)) {\n            this.css = true;\n        }\n    }\n    this.copyVisibilityInfo(visibilityInfo);\n};\n\n//\n// The actual import node doesn't return anything, when converted to CSS.\n// The reason is that it's used at the evaluation stage, so that the rules\n// it imports can be treated like any other rules.\n//\n// In `eval`, we make sure all Import nodes get evaluated, recursively, so\n// we end up with a flat structure, which can easily be imported in the parent\n// ruleset.\n//\nImport.prototype = new Node();\nImport.prototype.type = \"Import\";\nImport.prototype.accept = function (visitor) {\n    if (this.features) {\n        this.features = visitor.visit(this.features);\n    }\n    this.path = visitor.visit(this.path);\n    if (!this.options.plugin && !this.options.inline && this.root) {\n        this.root = visitor.visit(this.root);\n    }\n};\nImport.prototype.genCSS = function (context, output) {\n    if (this.css && this.path.currentFileInfo.reference === undefined) {\n        output.add(\"@import \", this.currentFileInfo, this.index);\n        this.path.genCSS(context, output);\n        if (this.features) {\n            output.add(\" \");\n            this.features.genCSS(context, output);\n        }\n        output.add(';');\n    }\n};\nImport.prototype.getPath = function () {\n    return (this.path instanceof URL) ?\n        this.path.value.value : this.path.value;\n};\nImport.prototype.isVariableImport = function () {\n    var path = this.path;\n    if (path instanceof URL) {\n        path = path.value;\n    }\n    if (path instanceof Quoted) {\n        return path.containsVariables();\n    }\n\n    return true;\n};\nImport.prototype.evalForImport = function (context) {\n    var path = this.path;\n\n    if (path instanceof URL) {\n        path = path.value;\n    }\n\n    return new Import(path.eval(context), this.features, this.options, this.index, this.currentFileInfo, this.visibilityInfo());\n};\nImport.prototype.evalPath = function (context) {\n    var path = this.path.eval(context);\n    var rootpath = this.currentFileInfo && this.currentFileInfo.rootpath;\n\n    if (!(path instanceof URL)) {\n        if (rootpath) {\n            var pathValue = path.value;\n            // Add the base path if the import is relative\n            if (pathValue && context.isPathRelative(pathValue)) {\n                path.value = rootpath + pathValue;\n            }\n        }\n        path.value = context.normalizePath(path.value);\n    }\n\n    return path;\n};\nImport.prototype.eval = function (context) {\n    var result = this.doEval(context);\n    if (this.options.reference || this.blocksVisibility()) {\n        if (result.length || result.length === 0) {\n            result.forEach(function (node) {\n                    node.addVisibilityBlock();\n                }\n            );\n        } else {\n            result.addVisibilityBlock();\n        }\n    }\n    return result;\n};\nImport.prototype.doEval = function (context) {\n    var ruleset, registry,\n        features = this.features && this.features.eval(context);\n\n    if (this.options.plugin) {\n        registry = context.frames[0] && context.frames[0].functionRegistry;\n        if ( registry && this.root && this.root.functions ) {\n            registry.addMultiple( this.root.functions );\n        }\n        return [];\n    }\n\n    if (this.skip) {\n        if (typeof this.skip === \"function\") {\n            this.skip = this.skip();\n        }\n        if (this.skip) {\n            return [];\n        }\n    }\n    if (this.options.inline) {\n        var contents = new Anonymous(this.root, 0,\n          {\n              filename: this.importedFilename,\n              reference: this.path.currentFileInfo && this.path.currentFileInfo.reference\n          }, true, true);\n\n        return this.features ? new Media([contents], this.features.value) : [contents];\n    } else if (this.css) {\n        var newImport = new Import(this.evalPath(context), features, this.options, this.index);\n        if (!newImport.css && this.error) {\n            throw this.error;\n        }\n        return newImport;\n    } else {\n        ruleset = new Ruleset(null, this.root.rules.slice(0));\n        ruleset.evalImports(context);\n\n        return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;\n    }\n};\nmodule.exports = Import;\n\n},{\"./anonymous\":46,\"./media\":66,\"./node\":70,\"./quoted\":73,\"./ruleset\":76,\"./url\":80}],62:[function(require,module,exports){\nvar tree = {};\n\ntree.Node = require('./node');\ntree.Alpha = require('./alpha');\ntree.Color = require('./color');\ntree.Directive = require('./directive');\ntree.DetachedRuleset = require('./detached-ruleset');\ntree.Operation = require('./operation');\ntree.Dimension = require('./dimension');\ntree.Unit = require('./unit');\ntree.Keyword = require('./keyword');\ntree.Variable = require('./variable');\ntree.Ruleset = require('./ruleset');\ntree.Element = require('./element');\ntree.Attribute = require('./attribute');\ntree.Combinator = require('./combinator');\ntree.Selector = require('./selector');\ntree.Quoted = require('./quoted');\ntree.Expression = require('./expression');\ntree.Rule = require('./rule');\ntree.Call = require('./call');\ntree.URL = require('./url');\ntree.Import = require('./import');\ntree.mixin = {\n    Call: require('./mixin-call'),\n    Definition: require('./mixin-definition')\n};\ntree.Comment = require('./comment');\ntree.Anonymous = require('./anonymous');\ntree.Value = require('./value');\ntree.JavaScript = require('./javascript');\ntree.Assignment = require('./assignment');\ntree.Condition = require('./condition');\ntree.Paren = require('./paren');\ntree.Media = require('./media');\ntree.UnicodeDescriptor = require('./unicode-descriptor');\ntree.Negative = require('./negative');\ntree.Extend = require('./extend');\ntree.RulesetCall = require('./ruleset-call');\n\nmodule.exports = tree;\n\n},{\"./alpha\":45,\"./anonymous\":46,\"./assignment\":47,\"./attribute\":48,\"./call\":49,\"./color\":50,\"./combinator\":51,\"./comment\":52,\"./condition\":53,\"./detached-ruleset\":55,\"./dimension\":56,\"./directive\":57,\"./element\":58,\"./expression\":59,\"./extend\":60,\"./import\":61,\"./javascript\":63,\"./keyword\":65,\"./media\":66,\"./mixin-call\":67,\"./mixin-definition\":68,\"./negative\":69,\"./node\":70,\"./operation\":71,\"./paren\":72,\"./quoted\":73,\"./rule\":74,\"./ruleset\":76,\"./ruleset-call\":75,\"./selector\":77,\"./unicode-descriptor\":78,\"./unit\":79,\"./url\":80,\"./value\":81,\"./variable\":82}],63:[function(require,module,exports){\nvar JsEvalNode = require(\"./js-eval-node\"),\n    Dimension = require(\"./dimension\"),\n    Quoted = require(\"./quoted\"),\n    Anonymous = require(\"./anonymous\");\n\nvar JavaScript = function (string, escaped, index, currentFileInfo) {\n    this.escaped = escaped;\n    this.expression = string;\n    this.index = index;\n    this.currentFileInfo = currentFileInfo;\n};\nJavaScript.prototype = new JsEvalNode();\nJavaScript.prototype.type = \"JavaScript\";\nJavaScript.prototype.eval = function(context) {\n    var result = this.evaluateJavaScript(this.expression, context);\n\n    if (typeof result === 'number') {\n        return new Dimension(result);\n    } else if (typeof result === 'string') {\n        return new Quoted('\"' + result + '\"', result, this.escaped, this.index);\n    } else if (Array.isArray(result)) {\n        return new Anonymous(result.join(', '));\n    } else {\n        return new Anonymous(result);\n    }\n};\n\nmodule.exports = JavaScript;\n\n},{\"./anonymous\":46,\"./dimension\":56,\"./js-eval-node\":64,\"./quoted\":73}],64:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    Variable = require(\"./variable\");\n\nvar JsEvalNode = function() {\n};\nJsEvalNode.prototype = new Node();\n\nJsEvalNode.prototype.evaluateJavaScript = function (expression, context) {\n    var result,\n        that = this,\n        evalContext = {};\n\n    if (context.javascriptEnabled !== undefined && !context.javascriptEnabled) {\n        throw { message: \"You are using JavaScript, which has been disabled.\",\n            filename: this.currentFileInfo.filename,\n            index: this.index };\n    }\n\n    expression = expression.replace(/@\\{([\\w-]+)\\}/g, function (_, name) {\n        return that.jsify(new Variable('@' + name, that.index, that.currentFileInfo).eval(context));\n    });\n\n    try {\n        expression = new Function('return (' + expression + ')');\n    } catch (e) {\n        throw { message: \"JavaScript evaluation error: \" + e.message + \" from `\" + expression + \"`\" ,\n            filename: this.currentFileInfo.filename,\n            index: this.index };\n    }\n\n    var variables = context.frames[0].variables();\n    for (var k in variables) {\n        if (variables.hasOwnProperty(k)) {\n            /*jshint loopfunc:true */\n            evalContext[k.slice(1)] = {\n                value: variables[k].value,\n                toJS: function () {\n                    return this.value.eval(context).toCSS();\n                }\n            };\n        }\n    }\n\n    try {\n        result = expression.call(evalContext);\n    } catch (e) {\n        throw { message: \"JavaScript evaluation error: '\" + e.name + ': ' + e.message.replace(/[\"]/g, \"'\") + \"'\" ,\n            filename: this.currentFileInfo.filename,\n            index: this.index };\n    }\n    return result;\n};\nJsEvalNode.prototype.jsify = function (obj) {\n    if (Array.isArray(obj.value) && (obj.value.length > 1)) {\n        return '[' + obj.value.map(function (v) { return v.toCSS(); }).join(', ') + ']';\n    } else {\n        return obj.toCSS();\n    }\n};\n\nmodule.exports = JsEvalNode;\n\n},{\"./node\":70,\"./variable\":82}],65:[function(require,module,exports){\nvar Node = require(\"./node\");\n\nvar Keyword = function (value) { this.value = value; };\nKeyword.prototype = new Node();\nKeyword.prototype.type = \"Keyword\";\nKeyword.prototype.genCSS = function (context, output) {\n    if (this.value === '%') { throw { type: \"Syntax\", message: \"Invalid % without number\" }; }\n    output.add(this.value);\n};\n\nKeyword.True = new Keyword('true');\nKeyword.False = new Keyword('false');\n\nmodule.exports = Keyword;\n\n},{\"./node\":70}],66:[function(require,module,exports){\nvar Ruleset = require(\"./ruleset\"),\n    Value = require(\"./value\"),\n    Selector = require(\"./selector\"),\n    Anonymous = require(\"./anonymous\"),\n    Expression = require(\"./expression\"),\n    Directive = require(\"./directive\");\n\nvar Media = function (value, features, index, currentFileInfo, visibilityInfo) {\n    this.index = index;\n    this.currentFileInfo = currentFileInfo;\n\n    var selectors = (new Selector([], null, null, this.index, this.currentFileInfo)).createEmptySelectors();\n\n    this.features = new Value(features);\n    this.rules = [new Ruleset(selectors, value)];\n    this.rules[0].allowImports = true;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n};\nMedia.prototype = new Directive();\nMedia.prototype.type = \"Media\";\nMedia.prototype.isRulesetLike = true;\nMedia.prototype.accept = function (visitor) {\n    if (this.features) {\n        this.features = visitor.visit(this.features);\n    }\n    if (this.rules) {\n        this.rules = visitor.visitArray(this.rules);\n    }\n};\nMedia.prototype.genCSS = function (context, output) {\n    output.add('@media ', this.currentFileInfo, this.index);\n    this.features.genCSS(context, output);\n    this.outputRuleset(context, output, this.rules);\n};\nMedia.prototype.eval = function (context) {\n    if (!context.mediaBlocks) {\n        context.mediaBlocks = [];\n        context.mediaPath = [];\n    }\n\n    var media = new Media(null, [], this.index, this.currentFileInfo, this.visibilityInfo());\n    if (this.debugInfo) {\n        this.rules[0].debugInfo = this.debugInfo;\n        media.debugInfo = this.debugInfo;\n    }\n    var strictMathBypass = false;\n    if (!context.strictMath) {\n        strictMathBypass = true;\n        context.strictMath = true;\n    }\n    try {\n        media.features = this.features.eval(context);\n    }\n    finally {\n        if (strictMathBypass) {\n            context.strictMath = false;\n        }\n    }\n\n    context.mediaPath.push(media);\n    context.mediaBlocks.push(media);\n\n    this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();\n    context.frames.unshift(this.rules[0]);\n    media.rules = [this.rules[0].eval(context)];\n    context.frames.shift();\n\n    context.mediaPath.pop();\n\n    return context.mediaPath.length === 0 ? media.evalTop(context) :\n                media.evalNested(context);\n};\nMedia.prototype.evalTop = function (context) {\n    var result = this;\n\n    // Render all dependent Media blocks.\n    if (context.mediaBlocks.length > 1) {\n        var selectors = (new Selector([], null, null, this.index, this.currentFileInfo)).createEmptySelectors();\n        result = new Ruleset(selectors, context.mediaBlocks);\n        result.multiMedia = true;\n        result.copyVisibilityInfo(this.visibilityInfo());\n    }\n\n    delete context.mediaBlocks;\n    delete context.mediaPath;\n\n    return result;\n};\nMedia.prototype.evalNested = function (context) {\n    var i, value,\n        path = context.mediaPath.concat([this]);\n\n    // Extract the media-query conditions separated with `,` (OR).\n    for (i = 0; i < path.length; i++) {\n        value = path[i].features instanceof Value ?\n                    path[i].features.value : path[i].features;\n        path[i] = Array.isArray(value) ? value : [value];\n    }\n\n    // Trace all permutations to generate the resulting media-query.\n    //\n    // (a, b and c) with nested (d, e) ->\n    //    a and d\n    //    a and e\n    //    b and c and d\n    //    b and c and e\n    this.features = new Value(this.permute(path).map(function (path) {\n        path = path.map(function (fragment) {\n            return fragment.toCSS ? fragment : new Anonymous(fragment);\n        });\n\n        for (i = path.length - 1; i > 0; i--) {\n            path.splice(i, 0, new Anonymous(\"and\"));\n        }\n\n        return new Expression(path);\n    }));\n\n    // Fake a tree-node that doesn't output anything.\n    return new Ruleset([], []);\n};\nMedia.prototype.permute = function (arr) {\n    if (arr.length === 0) {\n        return [];\n    } else if (arr.length === 1) {\n        return arr[0];\n    } else {\n        var result = [];\n        var rest = this.permute(arr.slice(1));\n        for (var i = 0; i < rest.length; i++) {\n            for (var j = 0; j < arr[0].length; j++) {\n                result.push([arr[0][j]].concat(rest[i]));\n            }\n        }\n        return result;\n    }\n};\nMedia.prototype.bubbleSelectors = function (selectors) {\n    if (!selectors) {\n        return;\n    }\n    this.rules = [new Ruleset(selectors.slice(0), [this.rules[0]])];\n};\nmodule.exports = Media;\n\n},{\"./anonymous\":46,\"./directive\":57,\"./expression\":59,\"./ruleset\":76,\"./selector\":77,\"./value\":81}],67:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    Selector = require(\"./selector\"),\n    MixinDefinition = require(\"./mixin-definition\"),\n    defaultFunc = require(\"../functions/default\");\n\nvar MixinCall = function (elements, args, index, currentFileInfo, important) {\n    this.selector = new Selector(elements);\n    this.arguments = args || [];\n    this.index = index;\n    this.currentFileInfo = currentFileInfo;\n    this.important = important;\n    this.allowRoot = true;\n};\nMixinCall.prototype = new Node();\nMixinCall.prototype.type = \"MixinCall\";\nMixinCall.prototype.accept = function (visitor) {\n    if (this.selector) {\n        this.selector = visitor.visit(this.selector);\n    }\n    if (this.arguments.length) {\n        this.arguments = visitor.visitArray(this.arguments);\n    }\n};\nMixinCall.prototype.eval = function (context) {\n    var mixins, mixin, mixinPath, args = [], arg, argValue,\n        rules = [], match = false, i, m, f, isRecursive, isOneFound,\n        candidates = [], candidate, conditionResult = [], defaultResult, defFalseEitherCase = -1,\n        defNone = 0, defTrue = 1, defFalse = 2, count, originalRuleset, noArgumentsFilter;\n\n    function calcDefGroup(mixin, mixinPath) {\n        var f, p, namespace;\n\n        for (f = 0; f < 2; f++) {\n            conditionResult[f] = true;\n            defaultFunc.value(f);\n            for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {\n                namespace = mixinPath[p];\n                if (namespace.matchCondition) {\n                    conditionResult[f] = conditionResult[f] && namespace.matchCondition(null, context);\n                }\n            }\n            if (mixin.matchCondition) {\n                conditionResult[f] = conditionResult[f] && mixin.matchCondition(args, context);\n            }\n        }\n        if (conditionResult[0] || conditionResult[1]) {\n            if (conditionResult[0] != conditionResult[1]) {\n                return conditionResult[1] ?\n                    defTrue : defFalse;\n            }\n\n            return defNone;\n        }\n        return defFalseEitherCase;\n    }\n\n    for (i = 0; i < this.arguments.length; i++) {\n        arg = this.arguments[i];\n        argValue = arg.value.eval(context);\n        if (arg.expand && Array.isArray(argValue.value)) {\n            argValue = argValue.value;\n            for (m = 0; m < argValue.length; m++) {\n                args.push({value: argValue[m]});\n            }\n        } else {\n            args.push({name: arg.name, value: argValue});\n        }\n    }\n\n    noArgumentsFilter = function(rule) {return rule.matchArgs(null, context);};\n\n    for (i = 0; i < context.frames.length; i++) {\n        if ((mixins = context.frames[i].find(this.selector, null, noArgumentsFilter)).length > 0) {\n            isOneFound = true;\n\n            // To make `default()` function independent of definition order we have two \"subpasses\" here.\n            // At first we evaluate each guard *twice* (with `default() == true` and `default() == false`),\n            // and build candidate list with corresponding flags. Then, when we know all possible matches,\n            // we make a final decision.\n\n            for (m = 0; m < mixins.length; m++) {\n                mixin = mixins[m].rule;\n                mixinPath = mixins[m].path;\n                isRecursive = false;\n                for (f = 0; f < context.frames.length; f++) {\n                    if ((!(mixin instanceof MixinDefinition)) && mixin === (context.frames[f].originalRuleset || context.frames[f])) {\n                        isRecursive = true;\n                        break;\n                    }\n                }\n                if (isRecursive) {\n                    continue;\n                }\n\n                if (mixin.matchArgs(args, context)) {\n                    candidate = {mixin: mixin, group: calcDefGroup(mixin, mixinPath)};\n\n                    if (candidate.group !== defFalseEitherCase) {\n                        candidates.push(candidate);\n                    }\n\n                    match = true;\n                }\n            }\n\n            defaultFunc.reset();\n\n            count = [0, 0, 0];\n            for (m = 0; m < candidates.length; m++) {\n                count[candidates[m].group]++;\n            }\n\n            if (count[defNone] > 0) {\n                defaultResult = defFalse;\n            } else {\n                defaultResult = defTrue;\n                if ((count[defTrue] + count[defFalse]) > 1) {\n                    throw { type: 'Runtime',\n                        message: 'Ambiguous use of `default()` found when matching for `' + this.format(args) + '`',\n                        index: this.index, filename: this.currentFileInfo.filename };\n                }\n            }\n\n            for (m = 0; m < candidates.length; m++) {\n                candidate = candidates[m].group;\n                if ((candidate === defNone) || (candidate === defaultResult)) {\n                    try {\n                        mixin = candidates[m].mixin;\n                        if (!(mixin instanceof MixinDefinition)) {\n                            originalRuleset = mixin.originalRuleset || mixin;\n                            mixin = new MixinDefinition(\"\", [], mixin.rules, null, false, null, originalRuleset.visibilityInfo());\n                            mixin.originalRuleset = originalRuleset;\n                        }\n                        var newRules = mixin.evalCall(context, args, this.important).rules;\n                        this._setVisibilityToReplacement(newRules);\n                        Array.prototype.push.apply(rules, newRules);\n                    } catch (e) {\n                        throw { message: e.message, index: this.index, filename: this.currentFileInfo.filename, stack: e.stack };\n                    }\n                }\n            }\n\n            if (match) {\n                return rules;\n            }\n        }\n    }\n    if (isOneFound) {\n        throw { type:    'Runtime',\n            message: 'No matching definition was found for `' + this.format(args) + '`',\n            index:   this.index, filename: this.currentFileInfo.filename };\n    } else {\n        throw { type:    'Name',\n            message: this.selector.toCSS().trim() + \" is undefined\",\n            index:   this.index, filename: this.currentFileInfo.filename };\n    }\n};\n\nMixinCall.prototype._setVisibilityToReplacement = function (replacement) {\n    var i, rule;\n    if (this.blocksVisibility()) {\n        for (i = 0; i < replacement.length; i++) {\n            rule = replacement[i];\n            rule.addVisibilityBlock();\n        }\n    }\n};\nMixinCall.prototype.format = function (args) {\n    return this.selector.toCSS().trim() + '(' +\n        (args ? args.map(function (a) {\n            var argValue = \"\";\n            if (a.name) {\n                argValue += a.name + \":\";\n            }\n            if (a.value.toCSS) {\n                argValue += a.value.toCSS();\n            } else {\n                argValue += \"???\";\n            }\n            return argValue;\n        }).join(', ') : \"\") + \")\";\n};\nmodule.exports = MixinCall;\n\n},{\"../functions/default\":20,\"./mixin-definition\":68,\"./node\":70,\"./selector\":77}],68:[function(require,module,exports){\nvar Selector = require(\"./selector\"),\n    Element = require(\"./element\"),\n    Ruleset = require(\"./ruleset\"),\n    Rule = require(\"./rule\"),\n    Expression = require(\"./expression\"),\n    contexts = require(\"../contexts\");\n\nvar Definition = function (name, params, rules, condition, variadic, frames, visibilityInfo) {\n    this.name = name;\n    this.selectors = [new Selector([new Element(null, name, this.index, this.currentFileInfo)])];\n    this.params = params;\n    this.condition = condition;\n    this.variadic = variadic;\n    this.arity = params.length;\n    this.rules = rules;\n    this._lookups = {};\n    var optionalParameters = [];\n    this.required = params.reduce(function (count, p) {\n        if (!p.name || (p.name && !p.value)) {\n            return count + 1;\n        }\n        else {\n            optionalParameters.push(p.name);\n            return count;\n        }\n    }, 0);\n    this.optionalParameters = optionalParameters;\n    this.frames = frames;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n};\nDefinition.prototype = new Ruleset();\nDefinition.prototype.type = \"MixinDefinition\";\nDefinition.prototype.evalFirst = true;\nDefinition.prototype.accept = function (visitor) {\n    if (this.params && this.params.length) {\n        this.params = visitor.visitArray(this.params);\n    }\n    this.rules = visitor.visitArray(this.rules);\n    if (this.condition) {\n        this.condition = visitor.visit(this.condition);\n    }\n};\nDefinition.prototype.evalParams = function (context, mixinEnv, args, evaldArguments) {\n    /*jshint boss:true */\n    var frame = new Ruleset(null, null),\n        varargs, arg,\n        params = this.params.slice(0),\n        i, j, val, name, isNamedFound, argIndex, argsLength = 0;\n\n    if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {\n        frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();\n    }\n    mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));\n\n    if (args) {\n        args = args.slice(0);\n        argsLength = args.length;\n\n        for (i = 0; i < argsLength; i++) {\n            arg = args[i];\n            if (name = (arg && arg.name)) {\n                isNamedFound = false;\n                for (j = 0; j < params.length; j++) {\n                    if (!evaldArguments[j] && name === params[j].name) {\n                        evaldArguments[j] = arg.value.eval(context);\n                        frame.prependRule(new Rule(name, arg.value.eval(context)));\n                        isNamedFound = true;\n                        break;\n                    }\n                }\n                if (isNamedFound) {\n                    args.splice(i, 1);\n                    i--;\n                    continue;\n                } else {\n                    throw { type: 'Runtime', message: \"Named argument for \" + this.name +\n                        ' ' + args[i].name + ' not found' };\n                }\n            }\n        }\n    }\n    argIndex = 0;\n    for (i = 0; i < params.length; i++) {\n        if (evaldArguments[i]) { continue; }\n\n        arg = args && args[argIndex];\n\n        if (name = params[i].name) {\n            if (params[i].variadic) {\n                varargs = [];\n                for (j = argIndex; j < argsLength; j++) {\n                    varargs.push(args[j].value.eval(context));\n                }\n                frame.prependRule(new Rule(name, new Expression(varargs).eval(context)));\n            } else {\n                val = arg && arg.value;\n                if (val) {\n                    val = val.eval(context);\n                } else if (params[i].value) {\n                    val = params[i].value.eval(mixinEnv);\n                    frame.resetCache();\n                } else {\n                    throw { type: 'Runtime', message: \"wrong number of arguments for \" + this.name +\n                        ' (' + argsLength + ' for ' + this.arity + ')' };\n                }\n\n                frame.prependRule(new Rule(name, val));\n                evaldArguments[i] = val;\n            }\n        }\n\n        if (params[i].variadic && args) {\n            for (j = argIndex; j < argsLength; j++) {\n                evaldArguments[j] = args[j].value.eval(context);\n            }\n        }\n        argIndex++;\n    }\n\n    return frame;\n};\nDefinition.prototype.makeImportant = function() {\n    var rules = !this.rules ? this.rules : this.rules.map(function (r) {\n        if (r.makeImportant) {\n            return r.makeImportant(true);\n        } else {\n            return r;\n        }\n    });\n    var result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);\n    return result;\n};\nDefinition.prototype.eval = function (context) {\n    return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || context.frames.slice(0));\n};\nDefinition.prototype.evalCall = function (context, args, important) {\n    var _arguments = [],\n        mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames,\n        frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments),\n        rules, ruleset;\n\n    frame.prependRule(new Rule('@arguments', new Expression(_arguments).eval(context)));\n\n    rules = this.rules.slice(0);\n\n    ruleset = new Ruleset(null, rules);\n    ruleset.originalRuleset = this;\n    ruleset = ruleset.eval(new contexts.Eval(context, [this, frame].concat(mixinFrames)));\n    if (important) {\n        ruleset = ruleset.makeImportant();\n    }\n    return ruleset;\n};\nDefinition.prototype.matchCondition = function (args, context) {\n    if (this.condition && !this.condition.eval(\n        new contexts.Eval(context,\n            [this.evalParams(context, /* the parameter variables*/\n                new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])]\n            .concat(this.frames || []) // the parent namespace/mixin frames\n            .concat(context.frames)))) { // the current environment frames\n        return false;\n    }\n    return true;\n};\nDefinition.prototype.matchArgs = function (args, context) {\n    var allArgsCnt = (args && args.length) || 0, len, optionalParameters = this.optionalParameters;\n    var requiredArgsCnt = !args ? 0 : args.reduce(function (count, p) {\n        if (optionalParameters.indexOf(p.name) < 0) {\n            return count + 1;\n        } else {\n            return count;\n        }\n    }, 0);\n\n    if (! this.variadic) {\n        if (requiredArgsCnt < this.required) {\n            return false;\n        }\n        if (allArgsCnt > this.params.length) {\n            return false;\n        }\n    } else {\n        if (requiredArgsCnt < (this.required - 1)) {\n            return false;\n        }\n    }\n\n    // check patterns\n    len = Math.min(requiredArgsCnt, this.arity);\n\n    for (var i = 0; i < len; i++) {\n        if (!this.params[i].name && !this.params[i].variadic) {\n            if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\nmodule.exports = Definition;\n\n},{\"../contexts\":11,\"./element\":58,\"./expression\":59,\"./rule\":74,\"./ruleset\":76,\"./selector\":77}],69:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    Operation = require(\"./operation\"),\n    Dimension = require(\"./dimension\");\n\nvar Negative = function (node) {\n    this.value = node;\n};\nNegative.prototype = new Node();\nNegative.prototype.type = \"Negative\";\nNegative.prototype.genCSS = function (context, output) {\n    output.add('-');\n    this.value.genCSS(context, output);\n};\nNegative.prototype.eval = function (context) {\n    if (context.isMathOn()) {\n        return (new Operation('*', [new Dimension(-1), this.value])).eval(context);\n    }\n    return new Negative(this.value.eval(context));\n};\nmodule.exports = Negative;\n\n},{\"./dimension\":56,\"./node\":70,\"./operation\":71}],70:[function(require,module,exports){\nvar Node = function() {\n};\nNode.prototype.toCSS = function (context) {\n    var strs = [];\n    this.genCSS(context, {\n        add: function(chunk, fileInfo, index) {\n            strs.push(chunk);\n        },\n        isEmpty: function () {\n            return strs.length === 0;\n        }\n    });\n    return strs.join('');\n};\nNode.prototype.genCSS = function (context, output) {\n    output.add(this.value);\n};\nNode.prototype.accept = function (visitor) {\n    this.value = visitor.visit(this.value);\n};\nNode.prototype.eval = function () { return this; };\nNode.prototype._operate = function (context, op, a, b) {\n    switch (op) {\n        case '+': return a + b;\n        case '-': return a - b;\n        case '*': return a * b;\n        case '/': return a / b;\n    }\n};\nNode.prototype.fround = function(context, value) {\n    var precision = context && context.numPrecision;\n    //add \"epsilon\" to ensure numbers like 1.000000005 (represented as 1.000000004999....) are properly rounded...\n    return (precision == null) ? value : Number((value + 2e-16).toFixed(precision));\n};\nNode.compare = function (a, b) {\n    /* returns:\n     -1: a < b\n     0: a = b\n     1: a > b\n     and *any* other value for a != b (e.g. undefined, NaN, -2 etc.) */\n\n    if ((a.compare) &&\n        // for \"symmetric results\" force toCSS-based comparison\n        // of Quoted or Anonymous if either value is one of those\n        !(b.type === \"Quoted\" || b.type === \"Anonymous\")) {\n        return a.compare(b);\n    } else if (b.compare) {\n        return -b.compare(a);\n    } else if (a.type !== b.type) {\n        return undefined;\n    }\n\n    a = a.value;\n    b = b.value;\n    if (!Array.isArray(a)) {\n        return a === b ? 0 : undefined;\n    }\n    if (a.length !== b.length) {\n        return undefined;\n    }\n    for (var i = 0; i < a.length; i++) {\n        if (Node.compare(a[i], b[i]) !== 0) {\n            return undefined;\n        }\n    }\n    return 0;\n};\n\nNode.numericCompare = function (a, b) {\n    return a  <  b ? -1\n        : a === b ?  0\n        : a  >  b ?  1 : undefined;\n};\n// Returns true if this node represents root of ast imported by reference\nNode.prototype.blocksVisibility = function () {\n    if (this.visibilityBlocks == null) {\n        this.visibilityBlocks = 0;\n    }\n    return this.visibilityBlocks !== 0;\n};\nNode.prototype.addVisibilityBlock = function () {\n    if (this.visibilityBlocks == null) {\n        this.visibilityBlocks = 0;\n    }\n    this.visibilityBlocks = this.visibilityBlocks + 1;\n};\nNode.prototype.removeVisibilityBlock = function () {\n    if (this.visibilityBlocks == null) {\n        this.visibilityBlocks = 0;\n    }\n    this.visibilityBlocks = this.visibilityBlocks - 1;\n};\n//Turns on node visibility - if called node will be shown in output regardless\n//of whether it comes from import by reference or not\nNode.prototype.ensureVisibility = function () {\n    this.nodeVisible = true;\n};\n//Turns off node visibility - if called node will NOT be shown in output regardless\n//of whether it comes from import by reference or not\nNode.prototype.ensureInvisibility = function () {\n    this.nodeVisible = false;\n};\n// return values:\n// false - the node must not be visible\n// true - the node must be visible\n// undefined or null - the node has the same visibility as its parent\nNode.prototype.isVisible = function () {\n    return this.nodeVisible;\n};\nNode.prototype.visibilityInfo = function() {\n    return {\n        visibilityBlocks: this.visibilityBlocks,\n        nodeVisible: this.nodeVisible\n    };\n};\nNode.prototype.copyVisibilityInfo = function(info) {\n    if (!info) {\n        return;\n    }\n    this.visibilityBlocks = info.visibilityBlocks;\n    this.nodeVisible = info.nodeVisible;\n};\nmodule.exports = Node;\n\n},{}],71:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    Color = require(\"./color\"),\n    Dimension = require(\"./dimension\");\n\nvar Operation = function (op, operands, isSpaced) {\n    this.op = op.trim();\n    this.operands = operands;\n    this.isSpaced = isSpaced;\n};\nOperation.prototype = new Node();\nOperation.prototype.type = \"Operation\";\nOperation.prototype.accept = function (visitor) {\n    this.operands = visitor.visit(this.operands);\n};\nOperation.prototype.eval = function (context) {\n    var a = this.operands[0].eval(context),\n        b = this.operands[1].eval(context);\n\n    if (context.isMathOn()) {\n        if (a instanceof Dimension && b instanceof Color) {\n            a = a.toColor();\n        }\n        if (b instanceof Dimension && a instanceof Color) {\n            b = b.toColor();\n        }\n        if (!a.operate) {\n            throw { type: \"Operation\",\n                    message: \"Operation on an invalid type\" };\n        }\n\n        return a.operate(context, this.op, b);\n    } else {\n        return new Operation(this.op, [a, b], this.isSpaced);\n    }\n};\nOperation.prototype.genCSS = function (context, output) {\n    this.operands[0].genCSS(context, output);\n    if (this.isSpaced) {\n        output.add(\" \");\n    }\n    output.add(this.op);\n    if (this.isSpaced) {\n        output.add(\" \");\n    }\n    this.operands[1].genCSS(context, output);\n};\n\nmodule.exports = Operation;\n\n},{\"./color\":50,\"./dimension\":56,\"./node\":70}],72:[function(require,module,exports){\nvar Node = require(\"./node\");\n\nvar Paren = function (node) {\n    this.value = node;\n};\nParen.prototype = new Node();\nParen.prototype.type = \"Paren\";\nParen.prototype.genCSS = function (context, output) {\n    output.add('(');\n    this.value.genCSS(context, output);\n    output.add(')');\n};\nParen.prototype.eval = function (context) {\n    return new Paren(this.value.eval(context));\n};\nmodule.exports = Paren;\n\n},{\"./node\":70}],73:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    JsEvalNode = require(\"./js-eval-node\"),\n    Variable = require(\"./variable\");\n\nvar Quoted = function (str, content, escaped, index, currentFileInfo) {\n    this.escaped = (escaped == null) ? true : escaped;\n    this.value = content || '';\n    this.quote = str.charAt(0);\n    this.index = index;\n    this.currentFileInfo = currentFileInfo;\n};\nQuoted.prototype = new JsEvalNode();\nQuoted.prototype.type = \"Quoted\";\nQuoted.prototype.genCSS = function (context, output) {\n    if (!this.escaped) {\n        output.add(this.quote, this.currentFileInfo, this.index);\n    }\n    output.add(this.value);\n    if (!this.escaped) {\n        output.add(this.quote);\n    }\n};\nQuoted.prototype.containsVariables = function() {\n    return this.value.match(/(`([^`]+)`)|@\\{([\\w-]+)\\}/);\n};\nQuoted.prototype.eval = function (context) {\n    var that = this, value = this.value;\n    var javascriptReplacement = function (_, exp) {\n        return String(that.evaluateJavaScript(exp, context));\n    };\n    var interpolationReplacement = function (_, name) {\n        var v = new Variable('@' + name, that.index, that.currentFileInfo).eval(context, true);\n        return (v instanceof Quoted) ? v.value : v.toCSS();\n    };\n    function iterativeReplace(value, regexp, replacementFnc) {\n        var evaluatedValue = value;\n        do {\n            value = evaluatedValue;\n            evaluatedValue = value.replace(regexp, replacementFnc);\n        } while (value !== evaluatedValue);\n        return evaluatedValue;\n    }\n    value = iterativeReplace(value, /`([^`]+)`/g, javascriptReplacement);\n    value = iterativeReplace(value, /@\\{([\\w-]+)\\}/g, interpolationReplacement);\n    return new Quoted(this.quote + value + this.quote, value, this.escaped, this.index, this.currentFileInfo);\n};\nQuoted.prototype.compare = function (other) {\n    // when comparing quoted strings allow the quote to differ\n    if (other.type === \"Quoted\" && !this.escaped && !other.escaped) {\n        return Node.numericCompare(this.value, other.value);\n    } else {\n        return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n    }\n};\nmodule.exports = Quoted;\n\n},{\"./js-eval-node\":64,\"./node\":70,\"./variable\":82}],74:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    Value = require(\"./value\"),\n    Keyword = require(\"./keyword\");\n\nvar Rule = function (name, value, important, merge, index, currentFileInfo, inline, variable) {\n    this.name = name;\n    this.value = (value instanceof Node) ? value : new Value([value]); //value instanceof tree.Value || value instanceof tree.Ruleset ??\n    this.important = important ? ' ' + important.trim() : '';\n    this.merge = merge;\n    this.index = index;\n    this.currentFileInfo = currentFileInfo;\n    this.inline = inline || false;\n    this.variable = (variable !== undefined) ? variable\n        : (name.charAt && (name.charAt(0) === '@'));\n    this.allowRoot = true;\n};\n\nfunction evalName(context, name) {\n    var value = \"\", i, n = name.length,\n        output = {add: function (s) {value += s;}};\n    for (i = 0; i < n; i++) {\n        name[i].eval(context).genCSS(context, output);\n    }\n    return value;\n}\n\nRule.prototype = new Node();\nRule.prototype.type = \"Rule\";\nRule.prototype.genCSS = function (context, output) {\n    output.add(this.name + (context.compress ? ':' : ': '), this.currentFileInfo, this.index);\n    try {\n        this.value.genCSS(context, output);\n    }\n    catch(e) {\n        e.index = this.index;\n        e.filename = this.currentFileInfo.filename;\n        throw e;\n    }\n    output.add(this.important + ((this.inline || (context.lastRule && context.compress)) ? \"\" : \";\"), this.currentFileInfo, this.index);\n};\nRule.prototype.eval = function (context) {\n    var strictMathBypass = false, name = this.name, evaldValue, variable = this.variable;\n    if (typeof name !== \"string\") {\n        // expand 'primitive' name directly to get\n        // things faster (~10% for benchmark.less):\n        name = (name.length === 1) && (name[0] instanceof Keyword) ?\n                name[0].value : evalName(context, name);\n        variable = false; // never treat expanded interpolation as new variable name\n    }\n    if (name === \"font\" && !context.strictMath) {\n        strictMathBypass = true;\n        context.strictMath = true;\n    }\n    try {\n        context.importantScope.push({});\n        evaldValue = this.value.eval(context);\n\n        if (!this.variable && evaldValue.type === \"DetachedRuleset\") {\n            throw { message: \"Rulesets cannot be evaluated on a property.\",\n                    index: this.index, filename: this.currentFileInfo.filename };\n        }\n        var important = this.important,\n            importantResult = context.importantScope.pop();\n        if (!important && importantResult.important) {\n            important = importantResult.important;\n        }\n\n        return new Rule(name,\n                          evaldValue,\n                          important,\n                          this.merge,\n                          this.index, this.currentFileInfo, this.inline,\n                              variable);\n    }\n    catch(e) {\n        if (typeof e.index !== 'number') {\n            e.index = this.index;\n            e.filename = this.currentFileInfo.filename;\n        }\n        throw e;\n    }\n    finally {\n        if (strictMathBypass) {\n            context.strictMath = false;\n        }\n    }\n};\nRule.prototype.makeImportant = function () {\n    return new Rule(this.name,\n                          this.value,\n                          \"!important\",\n                          this.merge,\n                          this.index, this.currentFileInfo, this.inline);\n};\n\nmodule.exports = Rule;\n},{\"./keyword\":65,\"./node\":70,\"./value\":81}],75:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    Variable = require(\"./variable\");\n\nvar RulesetCall = function (variable) {\n    this.variable = variable;\n    this.allowRoot = true;\n};\nRulesetCall.prototype = new Node();\nRulesetCall.prototype.type = \"RulesetCall\";\nRulesetCall.prototype.eval = function (context) {\n    var detachedRuleset = new Variable(this.variable).eval(context);\n    return detachedRuleset.callEval(context);\n};\nmodule.exports = RulesetCall;\n\n},{\"./node\":70,\"./variable\":82}],76:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    Rule = require(\"./rule\"),\n    Selector = require(\"./selector\"),\n    Element = require(\"./element\"),\n    Paren = require(\"./paren\"),\n    contexts = require(\"../contexts\"),\n    globalFunctionRegistry = require(\"../functions/function-registry\"),\n    defaultFunc = require(\"../functions/default\"),\n    getDebugInfo = require(\"./debug-info\");\n\nvar Ruleset = function (selectors, rules, strictImports, visibilityInfo) {\n    this.selectors = selectors;\n    this.rules = rules;\n    this._lookups = {};\n    this.strictImports = strictImports;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n};\nRuleset.prototype = new Node();\nRuleset.prototype.type = \"Ruleset\";\nRuleset.prototype.isRuleset = true;\nRuleset.prototype.isRulesetLike = true;\nRuleset.prototype.accept = function (visitor) {\n    if (this.paths) {\n        this.paths = visitor.visitArray(this.paths, true);\n    } else if (this.selectors) {\n        this.selectors = visitor.visitArray(this.selectors);\n    }\n    if (this.rules && this.rules.length) {\n        this.rules = visitor.visitArray(this.rules);\n    }\n};\nRuleset.prototype.eval = function (context) {\n    var thisSelectors = this.selectors, selectors,\n        selCnt, selector, i, hasOnePassingSelector = false;\n\n    if (thisSelectors && (selCnt = thisSelectors.length)) {\n        selectors = [];\n        defaultFunc.error({\n            type: \"Syntax\",\n            message: \"it is currently only allowed in parametric mixin guards,\"\n        });\n        for (i = 0; i < selCnt; i++) {\n            selector = thisSelectors[i].eval(context);\n            selectors.push(selector);\n            if (selector.evaldCondition) {\n                hasOnePassingSelector = true;\n            }\n        }\n        defaultFunc.reset();\n    } else {\n        hasOnePassingSelector = true;\n    }\n\n    var rules = this.rules ? this.rules.slice(0) : null,\n        ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo()),\n        rule, subRule;\n\n    ruleset.originalRuleset = this;\n    ruleset.root = this.root;\n    ruleset.firstRoot = this.firstRoot;\n    ruleset.allowImports = this.allowImports;\n\n    if (this.debugInfo) {\n        ruleset.debugInfo = this.debugInfo;\n    }\n\n    if (!hasOnePassingSelector) {\n        rules.length = 0;\n    }\n\n    // inherit a function registry from the frames stack when possible;\n    // otherwise from the global registry\n    ruleset.functionRegistry = (function (frames) {\n        var i = 0,\n            n = frames.length,\n            found;\n        for ( ; i !== n ; ++i ) {\n            found = frames[ i ].functionRegistry;\n            if ( found ) { return found; }\n        }\n        return globalFunctionRegistry;\n    }(context.frames)).inherit();\n\n    // push the current ruleset to the frames stack\n    var ctxFrames = context.frames;\n    ctxFrames.unshift(ruleset);\n\n    // currrent selectors\n    var ctxSelectors = context.selectors;\n    if (!ctxSelectors) {\n        context.selectors = ctxSelectors = [];\n    }\n    ctxSelectors.unshift(this.selectors);\n\n    // Evaluate imports\n    if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\n        ruleset.evalImports(context);\n    }\n\n    // Store the frames around mixin definitions,\n    // so they can be evaluated like closures when the time comes.\n    var rsRules = ruleset.rules, rsRuleCnt = rsRules ? rsRules.length : 0;\n    for (i = 0; i < rsRuleCnt; i++) {\n        if (rsRules[i].evalFirst) {\n            rsRules[i] = rsRules[i].eval(context);\n        }\n    }\n\n    var mediaBlockCount = (context.mediaBlocks && context.mediaBlocks.length) || 0;\n\n    // Evaluate mixin calls.\n    for (i = 0; i < rsRuleCnt; i++) {\n        if (rsRules[i].type === \"MixinCall\") {\n            /*jshint loopfunc:true */\n            rules = rsRules[i].eval(context).filter(function(r) {\n                if ((r instanceof Rule) && r.variable) {\n                    // do not pollute the scope if the variable is\n                    // already there. consider returning false here\n                    // but we need a way to \"return\" variable from mixins\n                    return !(ruleset.variable(r.name));\n                }\n                return true;\n            });\n            rsRules.splice.apply(rsRules, [i, 1].concat(rules));\n            rsRuleCnt += rules.length - 1;\n            i += rules.length - 1;\n            ruleset.resetCache();\n        } else if (rsRules[i].type === \"RulesetCall\") {\n            /*jshint loopfunc:true */\n            rules = rsRules[i].eval(context).rules.filter(function(r) {\n                if ((r instanceof Rule) && r.variable) {\n                    // do not pollute the scope at all\n                    return false;\n                }\n                return true;\n            });\n            rsRules.splice.apply(rsRules, [i, 1].concat(rules));\n            rsRuleCnt += rules.length - 1;\n            i += rules.length - 1;\n            ruleset.resetCache();\n        }\n    }\n\n    // Evaluate everything else\n    for (i = 0; i < rsRules.length; i++) {\n        rule = rsRules[i];\n        if (!rule.evalFirst) {\n            rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;\n        }\n    }\n\n    // Evaluate everything else\n    for (i = 0; i < rsRules.length; i++) {\n        rule = rsRules[i];\n        // for rulesets, check if it is a css guard and can be removed\n        if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {\n            // check if it can be folded in (e.g. & where)\n            if (rule.selectors[0].isJustParentSelector()) {\n                rsRules.splice(i--, 1);\n\n                for (var j = 0; j < rule.rules.length; j++) {\n                    subRule = rule.rules[j];\n                    subRule.copyVisibilityInfo(rule.visibilityInfo());\n                    if (!(subRule instanceof Rule) || !subRule.variable) {\n                        rsRules.splice(++i, 0, subRule);\n                    }\n                }\n            }\n        }\n    }\n\n    // Pop the stack\n    ctxFrames.shift();\n    ctxSelectors.shift();\n\n    if (context.mediaBlocks) {\n        for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\n            context.mediaBlocks[i].bubbleSelectors(selectors);\n        }\n    }\n\n    return ruleset;\n};\nRuleset.prototype.evalImports = function(context) {\n    var rules = this.rules, i, importRules;\n    if (!rules) { return; }\n\n    for (i = 0; i < rules.length; i++) {\n        if (rules[i].type === \"Import\") {\n            importRules = rules[i].eval(context);\n            if (importRules && (importRules.length || importRules.length === 0)) {\n                rules.splice.apply(rules, [i, 1].concat(importRules));\n                i+= importRules.length - 1;\n            } else {\n                rules.splice(i, 1, importRules);\n            }\n            this.resetCache();\n        }\n    }\n};\nRuleset.prototype.makeImportant = function() {\n    var result = new Ruleset(this.selectors, this.rules.map(function (r) {\n        if (r.makeImportant) {\n            return r.makeImportant();\n        } else {\n            return r;\n        }\n    }), this.strictImports, this.visibilityInfo());\n\n    return result;\n};\nRuleset.prototype.matchArgs = function (args) {\n    return !args || args.length === 0;\n};\n// lets you call a css selector with a guard\nRuleset.prototype.matchCondition = function (args, context) {\n    var lastSelector = this.selectors[this.selectors.length - 1];\n    if (!lastSelector.evaldCondition) {\n        return false;\n    }\n    if (lastSelector.condition &&\n        !lastSelector.condition.eval(\n            new contexts.Eval(context,\n                context.frames))) {\n        return false;\n    }\n    return true;\n};\nRuleset.prototype.resetCache = function () {\n    this._rulesets = null;\n    this._variables = null;\n    this._lookups = {};\n};\nRuleset.prototype.variables = function () {\n    if (!this._variables) {\n        this._variables = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n            if (r instanceof Rule && r.variable === true) {\n                hash[r.name] = r;\n            }\n            // when evaluating variables in an import statement, imports have not been eval'd\n            // so we need to go inside import statements.\n            // guard against root being a string (in the case of inlined less)\n            if (r.type === \"Import\" && r.root && r.root.variables) {\n                var vars = r.root.variables();\n                for (var name in vars) {\n                    if (vars.hasOwnProperty(name)) {\n                        hash[name] = vars[name];\n                    }\n                }\n            }\n            return hash;\n        }, {});\n    }\n    return this._variables;\n};\nRuleset.prototype.variable = function (name) {\n    return this.variables()[name];\n};\nRuleset.prototype.rulesets = function () {\n    if (!this.rules) { return []; }\n\n    var filtRules = [], rules = this.rules, cnt = rules.length,\n        i, rule;\n\n    for (i = 0; i < cnt; i++) {\n        rule = rules[i];\n        if (rule.isRuleset) {\n            filtRules.push(rule);\n        }\n    }\n\n    return filtRules;\n};\nRuleset.prototype.prependRule = function (rule) {\n    var rules = this.rules;\n    if (rules) {\n        rules.unshift(rule);\n    } else {\n        this.rules = [ rule ];\n    }\n};\nRuleset.prototype.find = function (selector, self, filter) {\n    self = self || this;\n    var rules = [], match, foundMixins,\n        key = selector.toCSS();\n\n    if (key in this._lookups) { return this._lookups[key]; }\n\n    this.rulesets().forEach(function (rule) {\n        if (rule !== self) {\n            for (var j = 0; j < rule.selectors.length; j++) {\n                match = selector.match(rule.selectors[j]);\n                if (match) {\n                    if (selector.elements.length > match) {\n                        if (!filter || filter(rule)) {\n                            foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);\n                            for (var i = 0; i < foundMixins.length; ++i) {\n                                foundMixins[i].path.push(rule);\n                            }\n                            Array.prototype.push.apply(rules, foundMixins);\n                        }\n                    } else {\n                        rules.push({ rule: rule, path: []});\n                    }\n                    break;\n                }\n            }\n        }\n    });\n    this._lookups[key] = rules;\n    return rules;\n};\nRuleset.prototype.genCSS = function (context, output) {\n    var i, j,\n        charsetRuleNodes = [],\n        ruleNodes = [],\n        debugInfo,     // Line number debugging\n        rule,\n        path;\n\n    context.tabLevel = (context.tabLevel || 0);\n\n    if (!this.root) {\n        context.tabLevel++;\n    }\n\n    var tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join(\"  \"),\n        tabSetStr = context.compress ? '' : Array(context.tabLevel).join(\"  \"),\n        sep;\n\n    function isRulesetLikeNode(rule) {\n        // if it has nested rules, then it should be treated like a ruleset\n        // medias and comments do not have nested rules, but should be treated like rulesets anyway\n        // some directives and anonymous nodes are ruleset like, others are not\n        if (typeof rule.isRulesetLike === \"boolean\") {\n            return rule.isRulesetLike;\n        } else if (typeof rule.isRulesetLike === \"function\") {\n            return rule.isRulesetLike();\n        }\n\n        //anything else is assumed to be a rule\n        return false;\n    }\n\n    var charsetNodeIndex = 0;\n    var importNodeIndex = 0;\n    for (i = 0; i < this.rules.length; i++) {\n        rule = this.rules[i];\n        if (rule.type === \"Comment\") {\n            if (importNodeIndex === i) {\n                importNodeIndex++;\n            }\n            ruleNodes.push(rule);\n        } else if (rule.isCharset && rule.isCharset()) {\n            ruleNodes.splice(charsetNodeIndex, 0, rule);\n            charsetNodeIndex++;\n            importNodeIndex++;\n        } else if (rule.type === \"Import\") {\n            ruleNodes.splice(importNodeIndex, 0, rule);\n            importNodeIndex++;\n        } else {\n            ruleNodes.push(rule);\n        }\n    }\n    ruleNodes = charsetRuleNodes.concat(ruleNodes);\n\n    // If this is the root node, we don't render\n    // a selector, or {}.\n    if (!this.root) {\n        debugInfo = getDebugInfo(context, this, tabSetStr);\n\n        if (debugInfo) {\n            output.add(debugInfo);\n            output.add(tabSetStr);\n        }\n\n        var paths = this.paths, pathCnt = paths.length,\n            pathSubCnt;\n\n        sep = context.compress ? ',' : (',\\n' + tabSetStr);\n\n        for (i = 0; i < pathCnt; i++) {\n            path = paths[i];\n            if (!(pathSubCnt = path.length)) { continue; }\n            if (i > 0) { output.add(sep); }\n\n            context.firstSelector = true;\n            path[0].genCSS(context, output);\n\n            context.firstSelector = false;\n            for (j = 1; j < pathSubCnt; j++) {\n                path[j].genCSS(context, output);\n            }\n        }\n\n        output.add((context.compress ? '{' : ' {\\n') + tabRuleStr);\n    }\n\n    // Compile rules and rulesets\n    for (i = 0; i < ruleNodes.length; i++) {\n        rule = ruleNodes[i];\n\n        if (i + 1 === ruleNodes.length) {\n            context.lastRule = true;\n        }\n\n        var currentLastRule = context.lastRule;\n        if (isRulesetLikeNode(rule)) {\n            context.lastRule = false;\n        }\n\n        if (rule.genCSS) {\n            rule.genCSS(context, output);\n        } else if (rule.value) {\n            output.add(rule.value.toString());\n        }\n\n        context.lastRule = currentLastRule;\n\n        if (!context.lastRule) {\n            output.add(context.compress ? '' : ('\\n' + tabRuleStr));\n        } else {\n            context.lastRule = false;\n        }\n    }\n\n    if (!this.root) {\n        output.add((context.compress ? '}' : '\\n' + tabSetStr + '}'));\n        context.tabLevel--;\n    }\n\n    if (!output.isEmpty() && !context.compress && this.firstRoot) {\n        output.add('\\n');\n    }\n};\n\nRuleset.prototype.joinSelectors = function (paths, context, selectors) {\n    for (var s = 0; s < selectors.length; s++) {\n        this.joinSelector(paths, context, selectors[s]);\n    }\n};\n\nRuleset.prototype.joinSelector = function (paths, context, selector) {\n\n    function createParenthesis(elementsToPak, originalElement) {\n        var replacementParen, j;\n        if (elementsToPak.length === 0) {\n            replacementParen = new Paren(elementsToPak[0]);\n        } else {\n            var insideParent = [];\n            for (j = 0; j < elementsToPak.length; j++) {\n                insideParent.push(new Element(null, elementsToPak[j], originalElement.index, originalElement.currentFileInfo));\n            }\n            replacementParen = new Paren(new Selector(insideParent));\n        }\n        return replacementParen;\n    }\n\n    function createSelector(containedElement, originalElement) {\n        var element, selector;\n        element = new Element(null, containedElement, originalElement.index, originalElement.currentFileInfo);\n        selector = new Selector([element]);\n        return selector;\n    }\n\n    // joins selector path from `beginningPath` with selector path in `addPath`\n    // `replacedElement` contains element that is being replaced by `addPath`\n    // returns concatenated path\n    function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {\n        var newSelectorPath, lastSelector, newJoinedSelector;\n        // our new selector path\n        newSelectorPath = [];\n\n        //construct the joined selector - if & is the first thing this will be empty,\n        // if not newJoinedSelector will be the last set of elements in the selector\n        if (beginningPath.length > 0) {\n            newSelectorPath = beginningPath.slice(0);\n            lastSelector = newSelectorPath.pop();\n            newJoinedSelector = originalSelector.createDerived(lastSelector.elements.slice(0));\n        }\n        else {\n            newJoinedSelector = originalSelector.createDerived([]);\n        }\n\n        if (addPath.length > 0) {\n            // /deep/ is a combinator that is valid without anything in front of it\n            // so if the & does not have a combinator that is \"\" or \" \" then\n            // and there is a combinator on the parent, then grab that.\n            // this also allows + a { & .b { .a & { ... though not sure why you would want to do that\n            var combinator = replacedElement.combinator, parentEl = addPath[0].elements[0];\n            if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {\n                combinator = parentEl.combinator;\n            }\n            // join the elements so far with the first part of the parent\n            newJoinedSelector.elements.push(new Element(combinator, parentEl.value, replacedElement.index, replacedElement.currentFileInfo));\n            newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));\n        }\n\n        // now add the joined selector - but only if it is not empty\n        if (newJoinedSelector.elements.length !== 0) {\n            newSelectorPath.push(newJoinedSelector);\n        }\n\n        //put together the parent selectors after the join (e.g. the rest of the parent)\n        if (addPath.length > 1) {\n            var restOfPath = addPath.slice(1);\n            restOfPath = restOfPath.map(function (selector) {\n                return selector.createDerived(selector.elements, []);\n            });\n            newSelectorPath = newSelectorPath.concat(restOfPath);\n        }\n        return newSelectorPath;\n    }\n\n    // joins selector path from `beginningPath` with every selector path in `addPaths` array\n    // `replacedElement` contains element that is being replaced by `addPath`\n    // returns array with all concatenated paths\n    function addAllReplacementsIntoPath( beginningPath, addPaths, replacedElement, originalSelector, result) {\n        var j;\n        for (j = 0; j < beginningPath.length; j++) {\n            var newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);\n            result.push(newSelectorPath);\n        }\n        return result;\n    }\n\n    function mergeElementsOnToSelectors(elements, selectors) {\n        var i, sel;\n\n        if (elements.length === 0) {\n            return ;\n        }\n        if (selectors.length === 0) {\n            selectors.push([ new Selector(elements) ]);\n            return;\n        }\n\n        for (i = 0; i < selectors.length; i++) {\n            sel = selectors[i];\n\n            // if the previous thing in sel is a parent this needs to join on to it\n            if (sel.length > 0) {\n                sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));\n            }\n            else {\n                sel.push(new Selector(elements));\n            }\n        }\n    }\n\n    // replace all parent selectors inside `inSelector` by content of `context` array\n    // resulting selectors are returned inside `paths` array\n    // returns true if `inSelector` contained at least one parent selector\n    function replaceParentSelector(paths, context, inSelector) {\n        // The paths are [[Selector]]\n        // The first list is a list of comma separated selectors\n        // The inner list is a list of inheritance separated selectors\n        // e.g.\n        // .a, .b {\n        //   .c {\n        //   }\n        // }\n        // == [[.a] [.c]] [[.b] [.c]]\n        //\n        var i, j, k, currentElements, newSelectors, selectorsMultiplied, sel, el, hadParentSelector = false, length, lastSelector;\n        function findNestedSelector(element) {\n            var maybeSelector;\n            if (element.value.type !== 'Paren') {\n                return null;\n            }\n\n            maybeSelector = element.value.value;\n            if (maybeSelector.type !== 'Selector') {\n                return null;\n            }\n\n            return maybeSelector;\n        }\n\n        // the elements from the current selector so far\n        currentElements = [];\n        // the current list of new selectors to add to the path.\n        // We will build it up. We initiate it with one empty selector as we \"multiply\" the new selectors\n        // by the parents\n        newSelectors = [\n            []\n        ];\n\n        for (i = 0; i < inSelector.elements.length; i++) {\n            el = inSelector.elements[i];\n            // non parent reference elements just get added\n            if (el.value !== \"&\") {\n                var nestedSelector = findNestedSelector(el);\n                if (nestedSelector != null) {\n                    // merge the current list of non parent selector elements\n                    // on to the current list of selectors to add\n                    mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                    var nestedPaths = [], replaced, replacedNewSelectors = [];\n                    replaced = replaceParentSelector(nestedPaths, context, nestedSelector);\n                    hadParentSelector = hadParentSelector || replaced;\n                    //the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors\n                    for (k = 0; k < nestedPaths.length; k++) {\n                        var replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);\n                        addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);\n                    }\n                    newSelectors = replacedNewSelectors;\n                    currentElements = [];\n\n                } else {\n                    currentElements.push(el);\n                }\n\n            } else {\n                hadParentSelector = true;\n                // the new list of selectors to add\n                selectorsMultiplied = [];\n\n                // merge the current list of non parent selector elements\n                // on to the current list of selectors to add\n                mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                // loop through our current selectors\n                for (j = 0; j < newSelectors.length; j++) {\n                    sel = newSelectors[j];\n                    // if we don't have any parent paths, the & might be in a mixin so that it can be used\n                    // whether there are parents or not\n                    if (context.length === 0) {\n                        // the combinator used on el should now be applied to the next element instead so that\n                        // it is not lost\n                        if (sel.length > 0) {\n                            sel[0].elements.push(new Element(el.combinator, '', el.index, el.currentFileInfo));\n                        }\n                        selectorsMultiplied.push(sel);\n                    }\n                    else {\n                        // and the parent selectors\n                        for (k = 0; k < context.length; k++) {\n                            // We need to put the current selectors\n                            // then join the last selector's elements on to the parents selectors\n                            var newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);\n                            // add that to our new set of selectors\n                            selectorsMultiplied.push(newSelectorPath);\n                        }\n                    }\n                }\n\n                // our new selectors has been multiplied, so reset the state\n                newSelectors = selectorsMultiplied;\n                currentElements = [];\n            }\n        }\n\n        // if we have any elements left over (e.g. .a& .b == .b)\n        // add them on to all the current selectors\n        mergeElementsOnToSelectors(currentElements, newSelectors);\n\n        for (i = 0; i < newSelectors.length; i++) {\n            length = newSelectors[i].length;\n            if (length > 0) {\n                paths.push(newSelectors[i]);\n                lastSelector = newSelectors[i][length - 1];\n                newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);\n                //newSelectors[i][length - 1].copyVisibilityInfo(inSelector.visibilityInfo());\n            }\n        }\n\n        return hadParentSelector;\n    }\n\n    function deriveSelector(visibilityInfo, deriveFrom) {\n        var newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);\n        newSelector.copyVisibilityInfo(visibilityInfo);\n        return newSelector;\n    }\n\n    // joinSelector code follows\n    var i, newPaths, hadParentSelector;\n\n    newPaths = [];\n    hadParentSelector = replaceParentSelector(newPaths, context, selector);\n\n    if (!hadParentSelector) {\n        if (context.length > 0) {\n            newPaths = [];\n            for (i = 0; i < context.length; i++) {\n                //var concatenated = [];\n                //context[i].forEach(function(entry) {\n                //    var newEntry = entry.createDerived(entry.elements, entry.extendList, entry.evaldCondition);\n                //    newEntry.copyVisibilityInfo(selector.visibilityInfo());\n                //    concatenated.push(newEntry);\n                //}, this);\n                var concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));\n\n                concatenated.push(selector);\n                newPaths.push(concatenated);\n            }\n        }\n        else {\n            newPaths = [[selector]];\n        }\n    }\n\n    for (i = 0; i < newPaths.length; i++) {\n        paths.push(newPaths[i]);\n    }\n\n};\nmodule.exports = Ruleset;\n\n},{\"../contexts\":11,\"../functions/default\":20,\"../functions/function-registry\":22,\"./debug-info\":54,\"./element\":58,\"./node\":70,\"./paren\":72,\"./rule\":74,\"./selector\":77}],77:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    Element = require(\"./element\");\n\nvar Selector = function (elements, extendList, condition, index, currentFileInfo, visibilityInfo) {\n    this.elements = elements;\n    this.extendList = extendList;\n    this.condition = condition;\n    this.currentFileInfo = currentFileInfo || {};\n    if (!condition) {\n        this.evaldCondition = true;\n    }\n    this.copyVisibilityInfo(visibilityInfo);\n};\nSelector.prototype = new Node();\nSelector.prototype.type = \"Selector\";\nSelector.prototype.accept = function (visitor) {\n    if (this.elements) {\n        this.elements = visitor.visitArray(this.elements);\n    }\n    if (this.extendList) {\n        this.extendList = visitor.visitArray(this.extendList);\n    }\n    if (this.condition) {\n        this.condition = visitor.visit(this.condition);\n    }\n};\nSelector.prototype.createDerived = function(elements, extendList, evaldCondition) {\n    var info = this.visibilityInfo();\n    evaldCondition = (evaldCondition != null) ? evaldCondition : this.evaldCondition;\n    var newSelector = new Selector(elements, extendList || this.extendList, null, this.index, this.currentFileInfo, info);\n    newSelector.evaldCondition = evaldCondition;\n    newSelector.mediaEmpty = this.mediaEmpty;\n    return newSelector;\n};\nSelector.prototype.createEmptySelectors = function() {\n    var el = new Element('', '&', this.index, this.currentFileInfo),\n        sels = [new Selector([el], null, null, this.index, this.currentFileInfo)];\n    sels[0].mediaEmpty = true;\n    return sels;\n};\nSelector.prototype.match = function (other) {\n    var elements = this.elements,\n        len = elements.length,\n        olen, i;\n\n    other.CacheElements();\n\n    olen = other._elements.length;\n    if (olen === 0 || len < olen) {\n        return 0;\n    } else {\n        for (i = 0; i < olen; i++) {\n            if (elements[i].value !== other._elements[i]) {\n                return 0;\n            }\n        }\n    }\n\n    return olen; // return number of matched elements\n};\nSelector.prototype.CacheElements = function() {\n    if (this._elements) {\n        return;\n    }\n\n    var elements = this.elements.map( function(v) {\n        return v.combinator.value + (v.value.value || v.value);\n    }).join(\"\").match(/[,&#\\*\\.\\w-]([\\w-]|(\\\\.))*/g);\n\n    if (elements) {\n        if (elements[0] === \"&\") {\n            elements.shift();\n        }\n    } else {\n        elements = [];\n    }\n\n    this._elements = elements;\n};\nSelector.prototype.isJustParentSelector = function() {\n    return !this.mediaEmpty &&\n        this.elements.length === 1 &&\n        this.elements[0].value === '&' &&\n        (this.elements[0].combinator.value === ' ' || this.elements[0].combinator.value === '');\n};\nSelector.prototype.eval = function (context) {\n    var evaldCondition = this.condition && this.condition.eval(context),\n        elements = this.elements, extendList = this.extendList;\n\n    elements = elements && elements.map(function (e) { return e.eval(context); });\n    extendList = extendList && extendList.map(function(extend) { return extend.eval(context); });\n\n    return this.createDerived(elements, extendList, evaldCondition);\n};\nSelector.prototype.genCSS = function (context, output) {\n    var i, element;\n    if ((!context || !context.firstSelector) && this.elements[0].combinator.value === \"\") {\n        output.add(' ', this.currentFileInfo, this.index);\n    }\n    if (!this._css) {\n        //TODO caching? speed comparison?\n        for (i = 0; i < this.elements.length; i++) {\n            element = this.elements[i];\n            element.genCSS(context, output);\n        }\n    }\n};\nSelector.prototype.getIsOutput = function() {\n    return this.evaldCondition;\n};\nmodule.exports = Selector;\n\n},{\"./element\":58,\"./node\":70}],78:[function(require,module,exports){\nvar Node = require(\"./node\");\n\nvar UnicodeDescriptor = function (value) {\n    this.value = value;\n};\nUnicodeDescriptor.prototype = new Node();\nUnicodeDescriptor.prototype.type = \"UnicodeDescriptor\";\n\nmodule.exports = UnicodeDescriptor;\n\n},{\"./node\":70}],79:[function(require,module,exports){\nvar Node = require(\"./node\"),\n    unitConversions = require(\"../data/unit-conversions\");\n\nvar Unit = function (numerator, denominator, backupUnit) {\n    this.numerator = numerator ? numerator.slice(0).sort() : [];\n    this.denominator = denominator ? denominator.slice(0).sort() : [];\n    if (backupUnit) {\n        this.backupUnit = backupUnit;\n    } else if (numerator && numerator.length) {\n        this.backupUnit = numerator[0];\n    }\n};\n\nUnit.prototype = new Node();\nUnit.prototype.type = \"Unit\";\nUnit.prototype.clone = function () {\n    return new Unit(this.numerator.slice(0), this.denominator.slice(0), this.backupUnit);\n};\nUnit.prototype.genCSS = function (context, output) {\n    // Dimension checks the unit is singular and throws an error if in strict math mode.\n    var strictUnits = context && context.strictUnits;\n    if (this.numerator.length === 1) {\n        output.add(this.numerator[0]); // the ideal situation\n    } else if (!strictUnits && this.backupUnit) {\n        output.add(this.backupUnit);\n    } else if (!strictUnits && this.denominator.length) {\n        output.add(this.denominator[0]);\n    }\n};\nUnit.prototype.toString = function () {\n    var i, returnStr = this.numerator.join(\"*\");\n    for (i = 0; i < this.denominator.length; i++) {\n        returnStr += \"/\" + this.denominator[i];\n    }\n    return returnStr;\n};\nUnit.prototype.compare = function (other) {\n    return this.is(other.toString()) ? 0 : undefined;\n};\nUnit.prototype.is = function (unitString) {\n    return this.toString().toUpperCase() === unitString.toUpperCase();\n};\nUnit.prototype.isLength = function () {\n    return Boolean(this.toCSS().match(/px|em|%|in|cm|mm|pc|pt|ex/));\n};\nUnit.prototype.isEmpty = function () {\n    return this.numerator.length === 0 && this.denominator.length === 0;\n};\nUnit.prototype.isSingular = function() {\n    return this.numerator.length <= 1 && this.denominator.length === 0;\n};\nUnit.prototype.map = function(callback) {\n    var i;\n\n    for (i = 0; i < this.numerator.length; i++) {\n        this.numerator[i] = callback(this.numerator[i], false);\n    }\n\n    for (i = 0; i < this.denominator.length; i++) {\n        this.denominator[i] = callback(this.denominator[i], true);\n    }\n};\nUnit.prototype.usedUnits = function() {\n    var group, result = {}, mapUnit, groupName;\n\n    mapUnit = function (atomicUnit) {\n        /*jshint loopfunc:true */\n        if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {\n            result[groupName] = atomicUnit;\n        }\n\n        return atomicUnit;\n    };\n\n    for (groupName in unitConversions) {\n        if (unitConversions.hasOwnProperty(groupName)) {\n            group = unitConversions[groupName];\n\n            this.map(mapUnit);\n        }\n    }\n\n    return result;\n};\nUnit.prototype.cancel = function () {\n    var counter = {}, atomicUnit, i;\n\n    for (i = 0; i < this.numerator.length; i++) {\n        atomicUnit = this.numerator[i];\n        counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;\n    }\n\n    for (i = 0; i < this.denominator.length; i++) {\n        atomicUnit = this.denominator[i];\n        counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;\n    }\n\n    this.numerator = [];\n    this.denominator = [];\n\n    for (atomicUnit in counter) {\n        if (counter.hasOwnProperty(atomicUnit)) {\n            var count = counter[atomicUnit];\n\n            if (count > 0) {\n                for (i = 0; i < count; i++) {\n                    this.numerator.push(atomicUnit);\n                }\n            } else if (count < 0) {\n                for (i = 0; i < -count; i++) {\n                    this.denominator.push(atomicUnit);\n                }\n            }\n        }\n    }\n\n    this.numerator.sort();\n    this.denominator.sort();\n};\nmodule.exports = Unit;\n\n},{\"../data/unit-conversions\":14,\"./node\":70}],80:[function(require,module,exports){\nvar Node = require(\"./node\");\n\nvar URL = function (val, index, currentFileInfo, isEvald) {\n    this.value = val;\n    this.currentFileInfo = currentFileInfo;\n    this.index = index;\n    this.isEvald = isEvald;\n};\nURL.prototype = new Node();\nURL.prototype.type = \"Url\";\nURL.prototype.accept = function (visitor) {\n    this.value = visitor.visit(this.value);\n};\nURL.prototype.genCSS = function (context, output) {\n    output.add(\"url(\");\n    this.value.genCSS(context, output);\n    output.add(\")\");\n};\nURL.prototype.eval = function (context) {\n    var val = this.value.eval(context),\n        rootpath;\n\n    if (!this.isEvald) {\n        // Add the base path if the URL is relative\n        rootpath = this.currentFileInfo && this.currentFileInfo.rootpath;\n        if (rootpath &&\n            typeof val.value === \"string\" &&\n            context.isPathRelative(val.value)) {\n\n            if (!val.quote) {\n                rootpath = rootpath.replace(/[\\(\\)'\"\\s]/g, function(match) { return \"\\\\\" + match; });\n            }\n            val.value = rootpath + val.value;\n        }\n\n        val.value = context.normalizePath(val.value);\n\n        // Add url args if enabled\n        if (context.urlArgs) {\n            if (!val.value.match(/^\\s*data:/)) {\n                var delimiter = val.value.indexOf('?') === -1 ? '?' : '&';\n                var urlArgs = delimiter + context.urlArgs;\n                if (val.value.indexOf('#') !== -1) {\n                    val.value = val.value.replace('#', urlArgs + '#');\n                } else {\n                    val.value += urlArgs;\n                }\n            }\n        }\n    }\n\n    return new URL(val, this.index, this.currentFileInfo, true);\n};\nmodule.exports = URL;\n\n},{\"./node\":70}],81:[function(require,module,exports){\nvar Node = require(\"./node\");\n\nvar Value = function (value) {\n    this.value = value;\n    if (!value) {\n        throw new Error(\"Value requires an array argument\");\n    }\n};\nValue.prototype = new Node();\nValue.prototype.type = \"Value\";\nValue.prototype.accept = function (visitor) {\n    if (this.value) {\n        this.value = visitor.visitArray(this.value);\n    }\n};\nValue.prototype.eval = function (context) {\n    if (this.value.length === 1) {\n        return this.value[0].eval(context);\n    } else {\n        return new Value(this.value.map(function (v) {\n            return v.eval(context);\n        }));\n    }\n};\nValue.prototype.genCSS = function (context, output) {\n    var i;\n    for (i = 0; i < this.value.length; i++) {\n        this.value[i].genCSS(context, output);\n        if (i + 1 < this.value.length) {\n            output.add((context && context.compress) ? ',' : ', ');\n        }\n    }\n};\nmodule.exports = Value;\n\n},{\"./node\":70}],82:[function(require,module,exports){\nvar Node = require(\"./node\");\n\nvar Variable = function (name, index, currentFileInfo) {\n    this.name = name;\n    this.index = index;\n    this.currentFileInfo = currentFileInfo || {};\n};\nVariable.prototype = new Node();\nVariable.prototype.type = \"Variable\";\nVariable.prototype.eval = function (context) {\n    var variable, name = this.name;\n\n    if (name.indexOf('@@') === 0) {\n        name = '@' + new Variable(name.slice(1), this.index, this.currentFileInfo).eval(context).value;\n    }\n\n    if (this.evaluating) {\n        throw { type: 'Name',\n                message: \"Recursive variable definition for \" + name,\n                filename: this.currentFileInfo.filename,\n                index: this.index };\n    }\n\n    this.evaluating = true;\n\n    variable = this.find(context.frames, function (frame) {\n        var v = frame.variable(name);\n        if (v) {\n            if (v.important) {\n                var importantScope = context.importantScope[context.importantScope.length - 1];\n                importantScope.important = v.important;\n            }\n            return v.value.eval(context);\n        }\n    });\n    if (variable) {\n        this.evaluating = false;\n        return variable;\n    } else {\n        throw { type: 'Name',\n                message: \"variable \" + name + \" is undefined\",\n                filename: this.currentFileInfo.filename,\n                index: this.index };\n    }\n};\nVariable.prototype.find = function (obj, fun) {\n    for (var i = 0, r; i < obj.length; i++) {\n        r = fun.call(obj, obj[i]);\n        if (r) { return r; }\n    }\n    return null;\n};\nmodule.exports = Variable;\n\n},{\"./node\":70}],83:[function(require,module,exports){\nmodule.exports = {\n    getLocation: function(index, inputStream) {\n        var n = index + 1,\n            line = null,\n            column = -1;\n\n        while (--n >= 0 && inputStream.charAt(n) !== '\\n') {\n            column++;\n        }\n\n        if (typeof index === 'number') {\n            line = (inputStream.slice(0, index).match(/\\n/g) || \"\").length;\n        }\n\n        return {\n            line: line,\n            column: column\n        };\n    }\n};\n\n},{}],84:[function(require,module,exports){\nvar tree = require(\"../tree\"),\n    Visitor = require(\"./visitor\"),\n    logger = require(\"../logger\");\n\n/*jshint loopfunc:true */\n\nvar ExtendFinderVisitor = function() {\n    this._visitor = new Visitor(this);\n    this.contexts = [];\n    this.allExtendsStack = [[]];\n};\n\nExtendFinderVisitor.prototype = {\n    run: function (root) {\n        root = this._visitor.visit(root);\n        root.allExtends = this.allExtendsStack[0];\n        return root;\n    },\n    visitRule: function (ruleNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n\n        var i, j, extend, allSelectorsExtendList = [], extendList;\n\n        // get &:extend(.a); rules which apply to all selectors in this ruleset\n        var rules = rulesetNode.rules, ruleCnt = rules ? rules.length : 0;\n        for (i = 0; i < ruleCnt; i++) {\n            if (rulesetNode.rules[i] instanceof tree.Extend) {\n                allSelectorsExtendList.push(rules[i]);\n                rulesetNode.extendOnEveryPath = true;\n            }\n        }\n\n        // now find every selector and apply the extends that apply to all extends\n        // and the ones which apply to an individual extend\n        var paths = rulesetNode.paths;\n        for (i = 0; i < paths.length; i++) {\n            var selectorPath = paths[i],\n                selector = selectorPath[selectorPath.length - 1],\n                selExtendList = selector.extendList;\n\n            extendList = selExtendList ? selExtendList.slice(0).concat(allSelectorsExtendList)\n                                       : allSelectorsExtendList;\n\n            if (extendList) {\n                extendList = extendList.map(function(allSelectorsExtend) {\n                    return allSelectorsExtend.clone();\n                });\n            }\n\n            for (j = 0; j < extendList.length; j++) {\n                this.foundExtends = true;\n                extend = extendList[j];\n                extend.findSelfSelectors(selectorPath);\n                extend.ruleset = rulesetNode;\n                if (j === 0) { extend.firstExtendOnThisSelectorPath = true; }\n                this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\n            }\n        }\n\n        this.contexts.push(rulesetNode.selectors);\n    },\n    visitRulesetOut: function (rulesetNode) {\n        if (!rulesetNode.root) {\n            this.contexts.length = this.contexts.length - 1;\n        }\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        mediaNode.allExtends = [];\n        this.allExtendsStack.push(mediaNode.allExtends);\n    },\n    visitMediaOut: function (mediaNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    },\n    visitDirective: function (directiveNode, visitArgs) {\n        directiveNode.allExtends = [];\n        this.allExtendsStack.push(directiveNode.allExtends);\n    },\n    visitDirectiveOut: function (directiveNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    }\n};\n\nvar ProcessExtendsVisitor = function() {\n    this._visitor = new Visitor(this);\n};\n\nProcessExtendsVisitor.prototype = {\n    run: function(root) {\n        var extendFinder = new ExtendFinderVisitor();\n        this.extendIndices = {};\n        extendFinder.run(root);\n        if (!extendFinder.foundExtends) { return root; }\n        root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\n        this.allExtendsStack = [root.allExtends];\n        var newRoot = this._visitor.visit(root);\n        this.checkExtendsForNonMatched(root.allExtends);\n        return newRoot;\n    },\n    checkExtendsForNonMatched: function(extendList) {\n        var indices = this.extendIndices;\n        extendList.filter(function(extend) {\n            return !extend.hasFoundMatches && extend.parent_ids.length == 1;\n        }).forEach(function(extend) {\n                var selector = \"_unknown_\";\n                try {\n                    selector = extend.selector.toCSS({});\n                }\n                catch(_) {}\n\n                if (!indices[extend.index + ' ' + selector]) {\n                    indices[extend.index + ' ' + selector] = true;\n                    logger.warn(\"extend '\" + selector + \"' has no matches\");\n                }\n            });\n    },\n    doExtendChaining: function (extendsList, extendsListTarget, iterationCount) {\n        //\n        // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\n        // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\n        // this means this new extend can then go and alter other extends\n        //\n        // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\n        // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\n        // processed if we look at each selector at a time, as is done in visitRuleset\n\n        var extendIndex, targetExtendIndex, matches, extendsToAdd = [], newSelector, extendVisitor = this, selectorPath,\n            extend, targetExtend, newExtend;\n\n        iterationCount = iterationCount || 0;\n\n        //loop through comparing every extend with every target extend.\n        // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\n        // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\n        // and the second is the target.\n        // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\n        // case when processing media queries\n        for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\n            for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\n\n                extend = extendsList[extendIndex];\n                targetExtend = extendsListTarget[targetExtendIndex];\n\n                // look for circular references\n                if ( extend.parent_ids.indexOf( targetExtend.object_id ) >= 0 ) { continue; }\n\n                // find a match in the target extends self selector (the bit before :extend)\n                selectorPath = [targetExtend.selfSelectors[0]];\n                matches = extendVisitor.findMatch(extend, selectorPath);\n\n                if (matches.length) {\n                    extend.hasFoundMatches = true;\n\n                    // we found a match, so for each self selector..\n                    extend.selfSelectors.forEach(function(selfSelector) {\n                        var info = targetExtend.visibilityInfo();\n\n                        // process the extend as usual\n                        newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());\n\n                        // but now we create a new extend from it\n                        newExtend = new(tree.Extend)(targetExtend.selector, targetExtend.option, 0, targetExtend.currentFileInfo, info);\n                        newExtend.selfSelectors = newSelector;\n\n                        // add the extend onto the list of extends for that selector\n                        newSelector[newSelector.length - 1].extendList = [newExtend];\n\n                        // record that we need to add it.\n                        extendsToAdd.push(newExtend);\n                        newExtend.ruleset = targetExtend.ruleset;\n\n                        //remember its parents for circular references\n                        newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);\n\n                        // only process the selector once.. if we have :extend(.a,.b) then multiple\n                        // extends will look at the same selector path, so when extending\n                        // we know that any others will be duplicates in terms of what is added to the css\n                        if (targetExtend.firstExtendOnThisSelectorPath) {\n                            newExtend.firstExtendOnThisSelectorPath = true;\n                            targetExtend.ruleset.paths.push(newSelector);\n                        }\n                    });\n                }\n            }\n        }\n\n        if (extendsToAdd.length) {\n            // try to detect circular references to stop a stack overflow.\n            // may no longer be needed.\n            this.extendChainCount++;\n            if (iterationCount > 100) {\n                var selectorOne = \"{unable to calculate}\";\n                var selectorTwo = \"{unable to calculate}\";\n                try {\n                    selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\n                    selectorTwo = extendsToAdd[0].selector.toCSS();\n                }\n                catch(e) {}\n                throw { message: \"extend circular reference detected. One of the circular extends is currently:\" +\n                    selectorOne + \":extend(\" + selectorTwo + \")\"};\n            }\n\n            // now process the new extends on the existing rules so that we can handle a extending b extending c extending\n            // d extending e...\n            return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\n        } else {\n            return extendsToAdd;\n        }\n    },\n    visitRule: function (ruleNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitSelector: function (selectorNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n        var matches, pathIndex, extendIndex, allExtends = this.allExtendsStack[this.allExtendsStack.length - 1],\n            selectorsToAdd = [], extendVisitor = this, selectorPath;\n\n        // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\n\n        for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\n            for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\n                selectorPath = rulesetNode.paths[pathIndex];\n\n                // extending extends happens initially, before the main pass\n                if (rulesetNode.extendOnEveryPath) { continue; }\n                var extendList = selectorPath[selectorPath.length - 1].extendList;\n                if (extendList && extendList.length) { continue; }\n\n                matches = this.findMatch(allExtends[extendIndex], selectorPath);\n\n                if (matches.length) {\n                    allExtends[extendIndex].hasFoundMatches = true;\n\n                    allExtends[extendIndex].selfSelectors.forEach(function(selfSelector) {\n                        var extendedSelectors;\n                        extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\n                        selectorsToAdd.push(extendedSelectors);\n                    });\n                }\n            }\n        }\n        rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\n    },\n    findMatch: function (extend, haystackSelectorPath) {\n        //\n        // look through the haystack selector path to try and find the needle - extend.selector\n        // returns an array of selector matches that can then be replaced\n        //\n        var haystackSelectorIndex, hackstackSelector, hackstackElementIndex, haystackElement,\n            targetCombinator, i,\n            extendVisitor = this,\n            needleElements = extend.selector.elements,\n            potentialMatches = [], potentialMatch, matches = [];\n\n        // loop through the haystack elements\n        for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\n            hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\n\n            for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\n\n                haystackElement = hackstackSelector.elements[hackstackElementIndex];\n\n                // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\n                if (extend.allowBefore || (haystackSelectorIndex === 0 && hackstackElementIndex === 0)) {\n                    potentialMatches.push({pathIndex: haystackSelectorIndex, index: hackstackElementIndex, matched: 0,\n                        initialCombinator: haystackElement.combinator});\n                }\n\n                for (i = 0; i < potentialMatches.length; i++) {\n                    potentialMatch = potentialMatches[i];\n\n                    // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\n                    // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\n                    // work out what the resulting combinator will be\n                    targetCombinator = haystackElement.combinator.value;\n                    if (targetCombinator === '' && hackstackElementIndex === 0) {\n                        targetCombinator = ' ';\n                    }\n\n                    // if we don't match, null our match to indicate failure\n                    if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) ||\n                        (potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator)) {\n                        potentialMatch = null;\n                    } else {\n                        potentialMatch.matched++;\n                    }\n\n                    // if we are still valid and have finished, test whether we have elements after and whether these are allowed\n                    if (potentialMatch) {\n                        potentialMatch.finished = potentialMatch.matched === needleElements.length;\n                        if (potentialMatch.finished &&\n                            (!extend.allowAfter &&\n                                (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {\n                            potentialMatch = null;\n                        }\n                    }\n                    // if null we remove, if not, we are still valid, so either push as a valid match or continue\n                    if (potentialMatch) {\n                        if (potentialMatch.finished) {\n                            potentialMatch.length = needleElements.length;\n                            potentialMatch.endPathIndex = haystackSelectorIndex;\n                            potentialMatch.endPathElementIndex = hackstackElementIndex + 1; // index after end of match\n                            potentialMatches.length = 0; // we don't allow matches to overlap, so start matching again\n                            matches.push(potentialMatch);\n                        }\n                    } else {\n                        potentialMatches.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        }\n        return matches;\n    },\n    isElementValuesEqual: function(elementValue1, elementValue2) {\n        if (typeof elementValue1 === \"string\" || typeof elementValue2 === \"string\") {\n            return elementValue1 === elementValue2;\n        }\n        if (elementValue1 instanceof tree.Attribute) {\n            if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {\n                return false;\n            }\n            if (!elementValue1.value || !elementValue2.value) {\n                if (elementValue1.value || elementValue2.value) {\n                    return false;\n                }\n                return true;\n            }\n            elementValue1 = elementValue1.value.value || elementValue1.value;\n            elementValue2 = elementValue2.value.value || elementValue2.value;\n            return elementValue1 === elementValue2;\n        }\n        elementValue1 = elementValue1.value;\n        elementValue2 = elementValue2.value;\n        if (elementValue1 instanceof tree.Selector) {\n            if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\n                return false;\n            }\n            for (var i = 0; i  < elementValue1.elements.length; i++) {\n                if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {\n                    if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {\n                        return false;\n                    }\n                }\n                if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    },\n    extendSelector:function (matches, selectorPath, replacementSelector, isVisible) {\n\n        //for a set of matches, replace each match with the replacement selector\n\n        var currentSelectorPathIndex = 0,\n            currentSelectorPathElementIndex = 0,\n            path = [],\n            matchIndex,\n            selector,\n            firstElement,\n            match,\n            newElements;\n\n        for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n            match = matches[matchIndex];\n            selector = selectorPath[match.pathIndex];\n            firstElement = new tree.Element(\n                match.initialCombinator,\n                replacementSelector.elements[0].value,\n                replacementSelector.elements[0].index,\n                replacementSelector.elements[0].currentFileInfo\n            );\n\n            if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\n                path[path.length - 1].elements = path[path.length - 1]\n                    .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n\n            newElements = selector.elements\n                .slice(currentSelectorPathElementIndex, match.index)\n                .concat([firstElement])\n                .concat(replacementSelector.elements.slice(1));\n\n            if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\n                path[path.length - 1].elements =\n                    path[path.length - 1].elements.concat(newElements);\n            } else {\n                path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\n\n                path.push(new tree.Selector(\n                    newElements\n                ));\n            }\n            currentSelectorPathIndex = match.endPathIndex;\n            currentSelectorPathElementIndex = match.endPathElementIndex;\n            if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n        }\n\n        if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\n            path[path.length - 1].elements = path[path.length - 1]\n                .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n            currentSelectorPathIndex++;\n        }\n\n        path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\n        path = path.map(function (currentValue) {\n            // we can re-use elements here, because the visibility property matters only for selectors\n            var derived = currentValue.createDerived(currentValue.elements);\n            if (isVisible) {\n                derived.ensureVisibility();\n            } else {\n                derived.ensureInvisibility();\n            }\n            return derived;\n        });\n        return path;\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        var newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    },\n    visitMediaOut: function (mediaNode) {\n        var lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    },\n    visitDirective: function (directiveNode, visitArgs) {\n        var newAllExtends = directiveNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, directiveNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    },\n    visitDirectiveOut: function (directiveNode) {\n        var lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    }\n};\n\nmodule.exports = ProcessExtendsVisitor;\n\n},{\"../logger\":33,\"../tree\":62,\"./visitor\":91}],85:[function(require,module,exports){\nfunction ImportSequencer(onSequencerEmpty) {\n    this.imports = [];\n    this.variableImports = [];\n    this._onSequencerEmpty = onSequencerEmpty;\n    this._currentDepth = 0;\n}\n\nImportSequencer.prototype.addImport = function(callback) {\n    var importSequencer = this,\n        importItem = {\n            callback: callback,\n            args: null,\n            isReady: false\n        };\n    this.imports.push(importItem);\n    return function() {\n        importItem.args = Array.prototype.slice.call(arguments, 0);\n        importItem.isReady = true;\n        importSequencer.tryRun();\n    };\n};\n\nImportSequencer.prototype.addVariableImport = function(callback) {\n    this.variableImports.push(callback);\n};\n\nImportSequencer.prototype.tryRun = function() {\n    this._currentDepth++;\n    try {\n        while (true) {\n            while (this.imports.length > 0) {\n                var importItem = this.imports[0];\n                if (!importItem.isReady) {\n                    return;\n                }\n                this.imports = this.imports.slice(1);\n                importItem.callback.apply(null, importItem.args);\n            }\n            if (this.variableImports.length === 0) {\n                break;\n            }\n            var variableImport = this.variableImports[0];\n            this.variableImports = this.variableImports.slice(1);\n            variableImport();\n        }\n    } finally {\n        this._currentDepth--;\n    }\n    if (this._currentDepth === 0 && this._onSequencerEmpty) {\n        this._onSequencerEmpty();\n    }\n};\n\nmodule.exports = ImportSequencer;\n\n},{}],86:[function(require,module,exports){\nvar contexts = require(\"../contexts\"),\n    Visitor = require(\"./visitor\"),\n    ImportSequencer = require(\"./import-sequencer\");\n\nvar ImportVisitor = function(importer, finish) {\n\n    this._visitor = new Visitor(this);\n    this._importer = importer;\n    this._finish = finish;\n    this.context = new contexts.Eval();\n    this.importCount = 0;\n    this.onceFileDetectionMap = {};\n    this.recursionDetector = {};\n    this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this));\n};\n\nImportVisitor.prototype = {\n    isReplacing: false,\n    run: function (root) {\n        try {\n            // process the contents\n            this._visitor.visit(root);\n        }\n        catch(e) {\n            this.error = e;\n        }\n\n        this.isFinished = true;\n        this._sequencer.tryRun();\n    },\n    _onSequencerEmpty: function() {\n        if (!this.isFinished) {\n            return;\n        }\n        this._finish(this.error);\n    },\n    visitImport: function (importNode, visitArgs) {\n        var inlineCSS = importNode.options.inline;\n\n        if (!importNode.css || inlineCSS) {\n\n            var context = new contexts.Eval(this.context, this.context.frames.slice(0));\n            var importParent = context.frames[0];\n\n            this.importCount++;\n            if (importNode.isVariableImport()) {\n                this._sequencer.addVariableImport(this.processImportNode.bind(this, importNode, context, importParent));\n            } else {\n                this.processImportNode(importNode, context, importParent);\n            }\n        }\n        visitArgs.visitDeeper = false;\n    },\n    processImportNode: function(importNode, context, importParent) {\n        var evaldImportNode,\n            inlineCSS = importNode.options.inline;\n\n        try {\n            evaldImportNode = importNode.evalForImport(context);\n        } catch(e) {\n            if (!e.filename) { e.index = importNode.index; e.filename = importNode.currentFileInfo.filename; }\n            // attempt to eval properly and treat as css\n            importNode.css = true;\n            // if that fails, this error will be thrown\n            importNode.error = e;\n        }\n\n        if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {\n\n            if (evaldImportNode.options.multiple) {\n                context.importMultiple = true;\n            }\n\n            // try appending if we haven't determined if it is css or not\n            var tryAppendLessExtension = evaldImportNode.css === undefined;\n\n            for (var i = 0; i < importParent.rules.length; i++) {\n                if (importParent.rules[i] === importNode) {\n                    importParent.rules[i] = evaldImportNode;\n                    break;\n                }\n            }\n\n            var onImported = this.onImported.bind(this, evaldImportNode, context),\n                sequencedOnImported = this._sequencer.addImport(onImported);\n\n            this._importer.push(evaldImportNode.getPath(), tryAppendLessExtension, evaldImportNode.currentFileInfo,\n                evaldImportNode.options, sequencedOnImported);\n        } else {\n            this.importCount--;\n            if (this.isFinished) {\n                this._sequencer.tryRun();\n            }\n        }\n    },\n    onImported: function (importNode, context, e, root, importedAtRoot, fullPath) {\n        if (e) {\n            if (!e.filename) {\n                e.index = importNode.index; e.filename = importNode.currentFileInfo.filename;\n            }\n            this.error = e;\n        }\n\n        var importVisitor = this,\n            inlineCSS = importNode.options.inline,\n            isPlugin = importNode.options.plugin,\n            isOptional = importNode.options.optional,\n            duplicateImport = importedAtRoot || fullPath in importVisitor.recursionDetector;\n\n        if (!context.importMultiple) {\n            if (duplicateImport) {\n                importNode.skip = true;\n            } else {\n                importNode.skip = function() {\n                    if (fullPath in importVisitor.onceFileDetectionMap) {\n                        return true;\n                    }\n                    importVisitor.onceFileDetectionMap[fullPath] = true;\n                    return false;\n                };\n            }\n        }\n\n        if (!fullPath && isOptional) {\n            importNode.skip = true;\n        }\n\n        if (root) {\n            importNode.root = root;\n            importNode.importedFilename = fullPath;\n\n            if (!inlineCSS && !isPlugin && (context.importMultiple || !duplicateImport)) {\n                importVisitor.recursionDetector[fullPath] = true;\n\n                var oldContext = this.context;\n                this.context = context;\n                try {\n                    this._visitor.visit(root);\n                } catch (e) {\n                    this.error = e;\n                }\n                this.context = oldContext;\n            }\n        }\n\n        importVisitor.importCount--;\n\n        if (importVisitor.isFinished) {\n            importVisitor._sequencer.tryRun();\n        }\n    },\n    visitRule: function (ruleNode, visitArgs) {\n        if (ruleNode.value.type === \"DetachedRuleset\") {\n            this.context.frames.unshift(ruleNode);\n        } else {\n            visitArgs.visitDeeper = false;\n        }\n    },\n    visitRuleOut : function(ruleNode) {\n        if (ruleNode.value.type === \"DetachedRuleset\") {\n            this.context.frames.shift();\n        }\n    },\n    visitDirective: function (directiveNode, visitArgs) {\n        this.context.frames.unshift(directiveNode);\n    },\n    visitDirectiveOut: function (directiveNode) {\n        this.context.frames.shift();\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        this.context.frames.unshift(mixinDefinitionNode);\n    },\n    visitMixinDefinitionOut: function (mixinDefinitionNode) {\n        this.context.frames.shift();\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        this.context.frames.unshift(rulesetNode);\n    },\n    visitRulesetOut: function (rulesetNode) {\n        this.context.frames.shift();\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        this.context.frames.unshift(mediaNode.rules[0]);\n    },\n    visitMediaOut: function (mediaNode) {\n        this.context.frames.shift();\n    }\n};\nmodule.exports = ImportVisitor;\n\n},{\"../contexts\":11,\"./import-sequencer\":85,\"./visitor\":91}],87:[function(require,module,exports){\nvar visitors = {\n    Visitor: require(\"./visitor\"),\n    ImportVisitor: require('./import-visitor'),\n    MarkVisibleSelectorsVisitor: require(\"./set-tree-visibility-visitor\"),\n    ExtendVisitor: require('./extend-visitor'),\n    JoinSelectorVisitor: require('./join-selector-visitor'),\n    ToCSSVisitor: require('./to-css-visitor')\n};\n\nmodule.exports = visitors;\n\n},{\"./extend-visitor\":84,\"./import-visitor\":86,\"./join-selector-visitor\":88,\"./set-tree-visibility-visitor\":89,\"./to-css-visitor\":90,\"./visitor\":91}],88:[function(require,module,exports){\nvar Visitor = require(\"./visitor\");\n\nvar JoinSelectorVisitor = function() {\n    this.contexts = [[]];\n    this._visitor = new Visitor(this);\n};\n\nJoinSelectorVisitor.prototype = {\n    run: function (root) {\n        return this._visitor.visit(root);\n    },\n    visitRule: function (ruleNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n\n    visitRuleset: function (rulesetNode, visitArgs) {\n        var context = this.contexts[this.contexts.length - 1],\n            paths = [], selectors;\n\n        this.contexts.push(paths);\n\n        if (! rulesetNode.root) {\n            selectors = rulesetNode.selectors;\n            if (selectors) {\n                selectors = selectors.filter(function(selector) { return selector.getIsOutput(); });\n                rulesetNode.selectors = selectors.length ? selectors : (selectors = null);\n                if (selectors) { rulesetNode.joinSelectors(paths, context, selectors); }\n            }\n            if (!selectors) { rulesetNode.rules = null; }\n            rulesetNode.paths = paths;\n        }\n    },\n    visitRulesetOut: function (rulesetNode) {\n        this.contexts.length = this.contexts.length - 1;\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        var context = this.contexts[this.contexts.length - 1];\n        mediaNode.rules[0].root = (context.length === 0 || context[0].multiMedia);\n    },\n    visitDirective: function (directiveNode, visitArgs) {\n        var context = this.contexts[this.contexts.length - 1];\n        if (directiveNode.rules && directiveNode.rules.length) {\n            directiveNode.rules[0].root = (directiveNode.isRooted || context.length === 0 || null);\n        }\n    }\n};\n\nmodule.exports = JoinSelectorVisitor;\n\n},{\"./visitor\":91}],89:[function(require,module,exports){\nvar SetTreeVisibilityVisitor = function(visible) {\n    this.visible = visible;\n};\nSetTreeVisibilityVisitor.prototype.run = function(root) {\n    this.visit(root);\n};\nSetTreeVisibilityVisitor.prototype.visitArray = function(nodes) {\n    if (!nodes) {\n        return nodes;\n    }\n\n    var cnt = nodes.length, i;\n    for (i = 0; i < cnt; i++) {\n        this.visit(nodes[i]);\n    }\n    return nodes;\n};\nSetTreeVisibilityVisitor.prototype.visit = function(node) {\n    if (!node) {\n        return node;\n    }\n    if (node.constructor === Array) {\n        return this.visitArray(node);\n    }\n\n    if (!node.blocksVisibility || node.blocksVisibility()) {\n        return node;\n    }\n    if (this.visible) {\n        node.ensureVisibility();\n    } else {\n        node.ensureInvisibility();\n    }\n\n    node.accept(this);\n    return node;\n};\nmodule.exports = SetTreeVisibilityVisitor;\n},{}],90:[function(require,module,exports){\nvar tree = require(\"../tree\"),\n    Visitor = require(\"./visitor\");\n\nvar CSSVisitorUtils = function(context) {\n    this._visitor = new Visitor(this);\n    this._context = context;\n};\n\nCSSVisitorUtils.prototype = {\n    containsSilentNonBlockedChild: function(bodyRules) {\n        var rule;\n        if (bodyRules == null) {\n            return false;\n        }\n        for (var r = 0; r < bodyRules.length; r++) {\n            rule = bodyRules[r];\n            if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {\n                //the directive contains something that was referenced (likely by extend)\n                //therefore it needs to be shown in output too\n                return true;\n            }\n        }\n        return false;\n    },\n\n    keepOnlyVisibleChilds: function(owner) {\n        if (owner == null || owner.rules == null) {\n            return ;\n        }\n\n        owner.rules = owner.rules.filter(function(thing) {\n                return thing.isVisible();\n            }\n        );\n    },\n\n    isEmpty: function(owner) {\n        if (owner == null || owner.rules == null) {\n            return true;\n        }\n        return owner.rules.length === 0;\n    },\n\n    hasVisibleSelector: function(rulesetNode) {\n        if (rulesetNode == null || rulesetNode.paths == null) {\n            return false;\n        }\n        return rulesetNode.paths.length > 0;\n    },\n\n    resolveVisibility: function (node, originalRules) {\n        if (!node.blocksVisibility()) {\n            if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {\n                return ;\n            }\n\n            return node;\n        }\n\n        var compiledRulesBody = node.rules[0];\n        this.keepOnlyVisibleChilds(compiledRulesBody);\n\n        if (this.isEmpty(compiledRulesBody)) {\n            return ;\n        }\n\n        node.ensureVisibility();\n        node.removeVisibilityBlock();\n\n        return node;\n    },\n\n    isVisibleRuleset: function(rulesetNode) {\n        if (rulesetNode.firstRoot) {\n            return true;\n        }\n\n        if (this.isEmpty(rulesetNode)) {\n            return false;\n        }\n\n        if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\n            return false;\n        }\n\n        return true;\n    }\n\n};\n\nvar ToCSSVisitor = function(context) {\n    this._visitor = new Visitor(this);\n    this._context = context;\n    this.utils = new CSSVisitorUtils(context);\n};\n\nToCSSVisitor.prototype = {\n    isReplacing: true,\n    run: function (root) {\n        return this._visitor.visit(root);\n    },\n\n    visitRule: function (ruleNode, visitArgs) {\n        if (ruleNode.blocksVisibility() || ruleNode.variable) {\n            return;\n        }\n        return ruleNode;\n    },\n\n    visitMixinDefinition: function (mixinNode, visitArgs) {\n        // mixin definitions do not get eval'd - this means they keep state\n        // so we have to clear that state here so it isn't used if toCSS is called twice\n        mixinNode.frames = [];\n    },\n\n    visitExtend: function (extendNode, visitArgs) {\n    },\n\n    visitComment: function (commentNode, visitArgs) {\n        if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\n            return;\n        }\n        return commentNode;\n    },\n\n    visitMedia: function(mediaNode, visitArgs) {\n        var originalRules = mediaNode.rules[0].rules;\n        mediaNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        return this.utils.resolveVisibility(mediaNode, originalRules);\n    },\n\n    visitImport: function (importNode, visitArgs) {\n        if (importNode.blocksVisibility()) {\n            return ;\n        }\n        return importNode;\n    },\n\n    visitDirective: function(directiveNode, visitArgs) {\n        if (directiveNode.rules && directiveNode.rules.length) {\n            return this.visitDirectiveWithBody(directiveNode, visitArgs);\n        } else {\n            return this.visitDirectiveWithoutBody(directiveNode, visitArgs);\n        }\n    },\n\n    visitDirectiveWithBody: function(directiveNode, visitArgs) {\n        //if there is only one nested ruleset and that one has no path, then it is\n        //just fake ruleset\n        function hasFakeRuleset(directiveNode) {\n            var bodyRules = directiveNode.rules;\n            return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);\n        }\n        function getBodyRules(directiveNode) {\n            var nodeRules = directiveNode.rules;\n            if (hasFakeRuleset(directiveNode)) {\n                return nodeRules[0].rules;\n            }\n\n            return nodeRules;\n        }\n        //it is still true that it is only one ruleset in array\n        //this is last such moment\n        //process childs\n        var originalRules = getBodyRules(directiveNode);\n        directiveNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        if (!this.utils.isEmpty(directiveNode)) {\n            this._mergeRules(directiveNode.rules[0].rules);\n        }\n\n        return this.utils.resolveVisibility(directiveNode, originalRules);\n    },\n\n    visitDirectiveWithoutBody: function(directiveNode, visitArgs) {\n        if (directiveNode.blocksVisibility()) {\n            return;\n        }\n\n        if (directiveNode.name === \"@charset\") {\n            // Only output the debug info together with subsequent @charset definitions\n            // a comment (or @media statement) before the actual @charset directive would\n            // be considered illegal css as it has to be on the first line\n            if (this.charset) {\n                if (directiveNode.debugInfo) {\n                    var comment = new tree.Comment(\"/* \" + directiveNode.toCSS(this._context).replace(/\\n/g, \"\") + \" */\\n\");\n                    comment.debugInfo = directiveNode.debugInfo;\n                    return this._visitor.visit(comment);\n                }\n                return;\n            }\n            this.charset = true;\n        }\n\n        return directiveNode;\n    },\n\n    checkValidNodes: function(rules, isRoot) {\n        if (!rules) {\n            return;\n        }\n\n        for (var i = 0; i < rules.length; i++) {\n            var ruleNode = rules[i];\n            if (isRoot && ruleNode instanceof tree.Rule && !ruleNode.variable) {\n                throw { message: \"Properties must be inside selector blocks. They cannot be in the root\",\n                    index: ruleNode.index, filename: ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename};\n            }\n            if (ruleNode instanceof tree.Call) {\n                throw { message: \"Function '\" + ruleNode.name + \"' is undefined\",\n                    index: ruleNode.index, filename: ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename};\n            }\n            if (ruleNode.type && !ruleNode.allowRoot) {\n                throw { message: ruleNode.type + \" node returned by a function is not valid here\",\n                    index: ruleNode.index, filename: ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename};\n            }\n        }\n    },\n\n    visitRuleset: function (rulesetNode, visitArgs) {\n        //at this point rulesets are nested into each other\n        var rule, rulesets = [];\n\n        this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);\n\n        if (! rulesetNode.root) {\n            //remove invisible paths\n            this._compileRulesetPaths(rulesetNode);\n\n            // remove rulesets from this ruleset body and compile them separately\n            var nodeRules = rulesetNode.rules, nodeRuleCnt = nodeRules ? nodeRules.length : 0;\n            for (var i = 0; i < nodeRuleCnt; ) {\n                rule = nodeRules[i];\n                if (rule && rule.rules) {\n                    // visit because we are moving them out from being a child\n                    rulesets.push(this._visitor.visit(rule));\n                    nodeRules.splice(i, 1);\n                    nodeRuleCnt--;\n                    continue;\n                }\n                i++;\n            }\n            // accept the visitor to remove rules and refactor itself\n            // then we can decide nogw whether we want it or not\n            // compile body\n            if (nodeRuleCnt > 0) {\n                rulesetNode.accept(this._visitor);\n            } else {\n                rulesetNode.rules = null;\n            }\n            visitArgs.visitDeeper = false;\n\n        } else { //if (! rulesetNode.root) {\n            rulesetNode.accept(this._visitor);\n            visitArgs.visitDeeper = false;\n        }\n\n        if (rulesetNode.rules) {\n            this._mergeRules(rulesetNode.rules);\n            this._removeDuplicateRules(rulesetNode.rules);\n        }\n\n        //now decide whether we keep the ruleset\n        if (this.utils.isVisibleRuleset(rulesetNode)) {\n            rulesetNode.ensureVisibility();\n            rulesets.splice(0, 0, rulesetNode);\n        }\n\n        if (rulesets.length === 1) {\n            return rulesets[0];\n        }\n        return rulesets;\n    },\n\n    _compileRulesetPaths: function(rulesetNode) {\n        if (rulesetNode.paths) {\n            rulesetNode.paths = rulesetNode.paths\n                .filter(function(p) {\n                    var i;\n                    if (p[0].elements[0].combinator.value === ' ') {\n                        p[0].elements[0].combinator = new(tree.Combinator)('');\n                    }\n                    for (i = 0; i < p.length; i++) {\n                        if (p[i].isVisible() && p[i].getIsOutput()) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n        }\n    },\n\n    _removeDuplicateRules: function(rules) {\n        if (!rules) { return; }\n\n        // remove duplicates\n        var ruleCache = {},\n            ruleList, rule, i;\n\n        for (i = rules.length - 1; i >= 0 ; i--) {\n            rule = rules[i];\n            if (rule instanceof tree.Rule) {\n                if (!ruleCache[rule.name]) {\n                    ruleCache[rule.name] = rule;\n                } else {\n                    ruleList = ruleCache[rule.name];\n                    if (ruleList instanceof tree.Rule) {\n                        ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];\n                    }\n                    var ruleCSS = rule.toCSS(this._context);\n                    if (ruleList.indexOf(ruleCSS) !== -1) {\n                        rules.splice(i, 1);\n                    } else {\n                        ruleList.push(ruleCSS);\n                    }\n                }\n            }\n        }\n    },\n\n    _mergeRules: function (rules) {\n        if (!rules) { return; }\n\n        var groups = {},\n            parts,\n            rule,\n            key;\n\n        for (var i = 0; i < rules.length; i++) {\n            rule = rules[i];\n\n            if ((rule instanceof tree.Rule) && rule.merge) {\n                key = [rule.name,\n                    rule.important ? \"!\" : \"\"].join(\",\");\n\n                if (!groups[key]) {\n                    groups[key] = [];\n                } else {\n                    rules.splice(i--, 1);\n                }\n\n                groups[key].push(rule);\n            }\n        }\n\n        Object.keys(groups).map(function (k) {\n\n            function toExpression(values) {\n                return new (tree.Expression)(values.map(function (p) {\n                    return p.value;\n                }));\n            }\n\n            function toValue(values) {\n                return new (tree.Value)(values.map(function (p) {\n                    return p;\n                }));\n            }\n\n            parts = groups[k];\n\n            if (parts.length > 1) {\n                rule = parts[0];\n                var spacedGroups = [];\n                var lastSpacedGroup = [];\n                parts.map(function (p) {\n                    if (p.merge === \"+\") {\n                        if (lastSpacedGroup.length > 0) {\n                            spacedGroups.push(toExpression(lastSpacedGroup));\n                        }\n                        lastSpacedGroup = [];\n                    }\n                    lastSpacedGroup.push(p);\n                });\n                spacedGroups.push(toExpression(lastSpacedGroup));\n                rule.value = toValue(spacedGroups);\n            }\n        });\n    },\n\n    visitAnonymous: function(anonymousNode, visitArgs) {\n        if (anonymousNode.blocksVisibility()) {\n            return ;\n        }\n        anonymousNode.accept(this._visitor);\n        return anonymousNode;\n    }\n};\n\nmodule.exports = ToCSSVisitor;\n\n},{\"../tree\":62,\"./visitor\":91}],91:[function(require,module,exports){\nvar tree = require(\"../tree\");\n\nvar _visitArgs = { visitDeeper: true },\n    _hasIndexed = false;\n\nfunction _noop(node) {\n    return node;\n}\n\nfunction indexNodeTypes(parent, ticker) {\n    // add .typeIndex to tree node types for lookup table\n    var key, child;\n    for (key in parent) {\n        if (parent.hasOwnProperty(key)) {\n            child = parent[key];\n            switch (typeof child) {\n                case \"function\":\n                    // ignore bound functions directly on tree which do not have a prototype\n                    // or aren't nodes\n                    if (child.prototype && child.prototype.type) {\n                        child.prototype.typeIndex = ticker++;\n                    }\n                    break;\n                case \"object\":\n                    ticker = indexNodeTypes(child, ticker);\n                    break;\n            }\n        }\n    }\n    return ticker;\n}\n\nvar Visitor = function(implementation) {\n    this._implementation = implementation;\n    this._visitFnCache = [];\n\n    if (!_hasIndexed) {\n        indexNodeTypes(tree, 1);\n        _hasIndexed = true;\n    }\n};\n\nVisitor.prototype = {\n    visit: function(node) {\n        if (!node) {\n            return node;\n        }\n\n        var nodeTypeIndex = node.typeIndex;\n        if (!nodeTypeIndex) {\n            return node;\n        }\n\n        var visitFnCache = this._visitFnCache,\n            impl = this._implementation,\n            aryIndx = nodeTypeIndex << 1,\n            outAryIndex = aryIndx | 1,\n            func = visitFnCache[aryIndx],\n            funcOut = visitFnCache[outAryIndex],\n            visitArgs = _visitArgs,\n            fnName;\n\n        visitArgs.visitDeeper = true;\n\n        if (!func) {\n            fnName = \"visit\" + node.type;\n            func = impl[fnName] || _noop;\n            funcOut = impl[fnName + \"Out\"] || _noop;\n            visitFnCache[aryIndx] = func;\n            visitFnCache[outAryIndex] = funcOut;\n        }\n\n        if (func !== _noop) {\n            var newNode = func.call(impl, node, visitArgs);\n            if (impl.isReplacing) {\n                node = newNode;\n            }\n        }\n\n        if (visitArgs.visitDeeper && node && node.accept) {\n            node.accept(this);\n        }\n\n        if (funcOut != _noop) {\n            funcOut.call(impl, node);\n        }\n\n        return node;\n    },\n    visitArray: function(nodes, nonReplacing) {\n        if (!nodes) {\n            return nodes;\n        }\n\n        var cnt = nodes.length, i;\n\n        // Non-replacing\n        if (nonReplacing || !this._implementation.isReplacing) {\n            for (i = 0; i < cnt; i++) {\n                this.visit(nodes[i]);\n            }\n            return nodes;\n        }\n\n        // Replacing\n        var out = [];\n        for (i = 0; i < cnt; i++) {\n            var evald = this.visit(nodes[i]);\n            if (evald === undefined) { continue; }\n            if (!evald.splice) {\n                out.push(evald);\n            } else if (evald.length) {\n                this.flatten(evald, out);\n            }\n        }\n        return out;\n    },\n    flatten: function(arr, out) {\n        if (!out) {\n            out = [];\n        }\n\n        var cnt, i, item,\n            nestedCnt, j, nestedItem;\n\n        for (i = 0, cnt = arr.length; i < cnt; i++) {\n            item = arr[i];\n            if (item === undefined) {\n                continue;\n            }\n            if (!item.splice) {\n                out.push(item);\n                continue;\n            }\n\n            for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\n                nestedItem = item[j];\n                if (nestedItem === undefined) {\n                    continue;\n                }\n                if (!nestedItem.splice) {\n                    out.push(nestedItem);\n                } else if (nestedItem.length) {\n                    this.flatten(nestedItem, out);\n                }\n            }\n        }\n\n        return out;\n    }\n};\nmodule.exports = Visitor;\n\n},{\"../tree\":62}],92:[function(require,module,exports){\n\"use strict\";\n\n// rawAsap provides everything we need except exception management.\nvar rawAsap = require(\"./raw\");\n// RawTasks are recycled to reduce GC churn.\nvar freeTasks = [];\n// We queue errors to ensure they are thrown in right order (FIFO).\n// Array-as-queue is good enough here, since we are just dealing with exceptions.\nvar pendingErrors = [];\nvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\nfunction throwFirstError() {\n    if (pendingErrors.length) {\n        throw pendingErrors.shift();\n    }\n}\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with priority\n * over other events like animation, reflow, and repaint. An error thrown from an\n * event will not interrupt, nor even substantially slow down the processing of\n * other events, but will be rather postponed to a lower priority event.\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawAsap(rawTask);\n}\n\n// We wrap tasks with recyclable task objects.  A task object implements\n// `call`, just like a function.\nfunction RawTask() {\n    this.task = null;\n}\n\n// The sole purpose of wrapping the task is to catch the exception and recycle\n// the task object after its single use.\nRawTask.prototype.call = function () {\n    try {\n        this.task.call();\n    } catch (error) {\n        if (asap.onerror) {\n            // This hook exists purely for testing purposes.\n            // Its name will be periodically randomized to break any code that\n            // depends on its existence.\n            asap.onerror(error);\n        } else {\n            // In a web browser, exceptions are not fatal. However, to avoid\n            // slowing down the queue of pending tasks, we rethrow the error in a\n            // lower priority turn.\n            pendingErrors.push(error);\n            requestErrorThrow();\n        }\n    } finally {\n        this.task = null;\n        freeTasks[freeTasks.length] = this;\n    }\n};\n\n},{\"./raw\":93}],93:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\n// Use the fastest means possible to execute a task in its own turn, with\n// priority over other events including IO, animation, reflow, and redraw\n// events in browsers.\n//\n// An exception thrown by a task will permanently interrupt the processing of\n// subsequent tasks. The higher level `asap` function ensures that if an\n// exception is thrown by a task, that the task queue will continue flushing as\n// soon as possible, but if you use `rawAsap` directly, you are responsible to\n// either ensure that no exceptions are thrown from your task, or to manually\n// call `rawAsap.requestFlush` if an exception is thrown.\nmodule.exports = rawAsap;\nfunction rawAsap(task) {\n    if (!queue.length) {\n        requestFlush();\n        flushing = true;\n    }\n    // Equivalent to push, but avoids a function call.\n    queue[queue.length] = task;\n}\n\nvar queue = [];\n// Once a flush has been requested, no further calls to `requestFlush` are\n// necessary until the next `flush` completes.\nvar flushing = false;\n// `requestFlush` is an implementation-specific method that attempts to kick\n// off a `flush` event as quickly as possible. `flush` will attempt to exhaust\n// the event queue before yielding to the browser's own event loop.\nvar requestFlush;\n// The position of the next task to execute in the task queue. This is\n// preserved between calls to `flush` so that it can be resumed if\n// a task throws an exception.\nvar index = 0;\n// If a task schedules additional tasks recursively, the task queue can grow\n// unbounded. To prevent memory exhaustion, the task queue will periodically\n// truncate already-completed tasks.\nvar capacity = 1024;\n\n// The flush function processes all tasks that have been scheduled with\n// `rawAsap` unless and until one of those tasks throws an exception.\n// If a task throws an exception, `flush` ensures that its state will remain\n// consistent and will resume where it left off when called again.\n// However, `flush` does not make any arrangements to be called again if an\n// exception is thrown.\nfunction flush() {\n    while (index < queue.length) {\n        var currentIndex = index;\n        // Advance the index before calling the task. This ensures that we will\n        // begin flushing on the next task the task throws an error.\n        index = index + 1;\n        queue[currentIndex].call();\n        // Prevent leaking memory for long chains of recursive calls to `asap`.\n        // If we call `asap` within tasks scheduled by `asap`, the queue will\n        // grow, but to avoid an O(n) walk for every task we execute, we don't\n        // shift tasks off the queue after they have been executed.\n        // Instead, we periodically shift 1024 tasks off the queue.\n        if (index > capacity) {\n            // Manually shift all values starting at the index back to the\n            // beginning of the queue.\n            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {\n                queue[scan] = queue[scan + index];\n            }\n            queue.length -= index;\n            index = 0;\n        }\n    }\n    queue.length = 0;\n    index = 0;\n    flushing = false;\n}\n\n// `requestFlush` is implemented using a strategy based on data collected from\n// every available SauceLabs Selenium web driver worker at time of writing.\n// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593\n\n// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that\n// have WebKitMutationObserver but not un-prefixed MutationObserver.\n// Must use `global` instead of `window` to work in both frames and web\n// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.\nvar BrowserMutationObserver = global.MutationObserver || global.WebKitMutationObserver;\n\n// MutationObservers are desirable because they have high priority and work\n// reliably everywhere they are implemented.\n// They are implemented in all modern browsers.\n//\n// - Android 4-4.3\n// - Chrome 26-34\n// - Firefox 14-29\n// - Internet Explorer 11\n// - iPad Safari 6-7.1\n// - iPhone Safari 7-7.1\n// - Safari 6-7\nif (typeof BrowserMutationObserver === \"function\") {\n    requestFlush = makeRequestCallFromMutationObserver(flush);\n\n// MessageChannels are desirable because they give direct access to the HTML\n// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera\n// 11-12, and in web workers in many engines.\n// Although message channels yield to any queued rendering and IO tasks, they\n// would be better than imposing the 4ms delay of timers.\n// However, they do not work reliably in Internet Explorer or Safari.\n\n// Internet Explorer 10 is the only browser that has setImmediate but does\n// not have MutationObservers.\n// Although setImmediate yields to the browser's renderer, it would be\n// preferrable to falling back to setTimeout since it does not have\n// the minimum 4ms penalty.\n// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and\n// Desktop to a lesser extent) that renders both setImmediate and\n// MessageChannel useless for the purposes of ASAP.\n// https://github.com/kriskowal/q/issues/396\n\n// Timers are implemented universally.\n// We fall back to timers in workers in most engines, and in foreground\n// contexts in the following browsers.\n// However, note that even this simple case requires nuances to operate in a\n// broad spectrum of browsers.\n//\n// - Firefox 3-13\n// - Internet Explorer 6-9\n// - iPad Safari 4.3\n// - Lynx 2.8.7\n} else {\n    requestFlush = makeRequestCallFromTimer(flush);\n}\n\n// `requestFlush` requests that the high priority event queue be flushed as\n// soon as possible.\n// This is useful to prevent an error thrown in a task from stalling the event\n// queue if the exception handled by Node.js’s\n// `process.on(\"uncaughtException\")` or by a domain.\nrawAsap.requestFlush = requestFlush;\n\n// To request a high priority event, we induce a mutation observer by toggling\n// the text of a text node between \"1\" and \"-1\".\nfunction makeRequestCallFromMutationObserver(callback) {\n    var toggle = 1;\n    var observer = new BrowserMutationObserver(callback);\n    var node = document.createTextNode(\"\");\n    observer.observe(node, {characterData: true});\n    return function requestCall() {\n        toggle = -toggle;\n        node.data = toggle;\n    };\n}\n\n// The message channel technique was discovered by Malte Ubl and was the\n// original foundation for this library.\n// http://www.nonblocking.io/2011/06/windownexttick.html\n\n// Safari 6.0.5 (at least) intermittently fails to create message ports on a\n// page's first load. Thankfully, this version of Safari supports\n// MutationObservers, so we don't need to fall back in that case.\n\n// function makeRequestCallFromMessageChannel(callback) {\n//     var channel = new MessageChannel();\n//     channel.port1.onmessage = callback;\n//     return function requestCall() {\n//         channel.port2.postMessage(0);\n//     };\n// }\n\n// For reasons explained above, we are also unable to use `setImmediate`\n// under any circumstances.\n// Even if we were, there is another bug in Internet Explorer 10.\n// It is not sufficient to assign `setImmediate` to `requestFlush` because\n// `setImmediate` must be called *by name* and therefore must be wrapped in a\n// closure.\n// Never forget.\n\n// function makeRequestCallFromSetImmediate(callback) {\n//     return function requestCall() {\n//         setImmediate(callback);\n//     };\n// }\n\n// Safari 6.0 has a problem where timers will get lost while the user is\n// scrolling. This problem does not impact ASAP because Safari 6.0 supports\n// mutation observers, so that implementation is used instead.\n// However, if we ever elect to use timers in Safari, the prevalent work-around\n// is to add a scroll event listener that calls for a flush.\n\n// `setTimeout` does not call the passed callback if the delay is less than\n// approximately 7 in web workers in Firefox 8 through 18, and sometimes not\n// even then.\n\nfunction makeRequestCallFromTimer(callback) {\n    return function requestCall() {\n        // We dispatch a timeout with a specified delay of 0 for engines that\n        // can reliably accommodate that request. This will usually be snapped\n        // to a 4 milisecond delay, but once we're flushing, there's no delay\n        // between events.\n        var timeoutHandle = setTimeout(handleTimer, 0);\n        // However, since this timer gets frequently dropped in Firefox\n        // workers, we enlist an interval handle that will try to fire\n        // an event 20 times per second until it succeeds.\n        var intervalHandle = setInterval(handleTimer, 50);\n\n        function handleTimer() {\n            // Whichever timer succeeds will cancel both timers and\n            // execute the callback.\n            clearTimeout(timeoutHandle);\n            clearInterval(intervalHandle);\n            callback();\n        }\n    };\n}\n\n// This is for `asap.js` only.\n// Its name will be periodically randomized to break any code that depends on\n// its existence.\nrawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;\n\n// ASAP was originally a nextTick shim included in Q. This was factored out\n// into this ASAP package. It was later adapted to RSVP which made further\n// amendments. These decisions, particularly to marginalize MessageChannel and\n// to capture the MutationObserver implementation in a closure, were integrated\n// back into ASAP proper.\n// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],94:[function(require,module,exports){\n'use strict';\n\nvar asap = require('asap/raw');\n\nfunction noop() {}\n\n// States:\n//\n// 0 - pending\n// 1 - fulfilled with _value\n// 2 - rejected with _value\n// 3 - adopted the state of another promise, _value\n//\n// once the state is no longer pending (0) it is immutable\n\n// All `_` prefixed properties will be reduced to `_{random number}`\n// at build time to obfuscate them and discourage their use.\n// We don't use symbols or Object.defineProperty to fully hide them\n// because the performance isn't good enough.\n\n\n// to avoid using try/catch inside critical functions, we\n// extract them to here.\nvar LAST_ERROR = null;\nvar IS_ERROR = {};\nfunction getThen(obj) {\n  try {\n    return obj.then;\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\n\nfunction tryCallOne(fn, a) {\n  try {\n    return fn(a);\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\nfunction tryCallTwo(fn, a, b) {\n  try {\n    fn(a, b);\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\n\nmodule.exports = Promise;\n\nfunction Promise(fn) {\n  if (typeof this !== 'object') {\n    throw new TypeError('Promises must be constructed via new');\n  }\n  if (typeof fn !== 'function') {\n    throw new TypeError('not a function');\n  }\n  this._45 = 0;\n  this._81 = 0;\n  this._65 = null;\n  this._54 = null;\n  if (fn === noop) return;\n  doResolve(fn, this);\n}\nPromise._10 = null;\nPromise._97 = null;\nPromise._61 = noop;\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  if (this.constructor !== Promise) {\n    return safeThen(this, onFulfilled, onRejected);\n  }\n  var res = new Promise(noop);\n  handle(this, new Handler(onFulfilled, onRejected, res));\n  return res;\n};\n\nfunction safeThen(self, onFulfilled, onRejected) {\n  return new self.constructor(function (resolve, reject) {\n    var res = new Promise(noop);\n    res.then(resolve, reject);\n    handle(self, new Handler(onFulfilled, onRejected, res));\n  });\n};\nfunction handle(self, deferred) {\n  while (self._81 === 3) {\n    self = self._65;\n  }\n  if (Promise._10) {\n    Promise._10(self);\n  }\n  if (self._81 === 0) {\n    if (self._45 === 0) {\n      self._45 = 1;\n      self._54 = deferred;\n      return;\n    }\n    if (self._45 === 1) {\n      self._45 = 2;\n      self._54 = [self._54, deferred];\n      return;\n    }\n    self._54.push(deferred);\n    return;\n  }\n  handleResolved(self, deferred);\n}\n\nfunction handleResolved(self, deferred) {\n  asap(function() {\n    var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      if (self._81 === 1) {\n        resolve(deferred.promise, self._65);\n      } else {\n        reject(deferred.promise, self._65);\n      }\n      return;\n    }\n    var ret = tryCallOne(cb, self._65);\n    if (ret === IS_ERROR) {\n      reject(deferred.promise, LAST_ERROR);\n    } else {\n      resolve(deferred.promise, ret);\n    }\n  });\n}\nfunction resolve(self, newValue) {\n  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n  if (newValue === self) {\n    return reject(\n      self,\n      new TypeError('A promise cannot be resolved with itself.')\n    );\n  }\n  if (\n    newValue &&\n    (typeof newValue === 'object' || typeof newValue === 'function')\n  ) {\n    var then = getThen(newValue);\n    if (then === IS_ERROR) {\n      return reject(self, LAST_ERROR);\n    }\n    if (\n      then === self.then &&\n      newValue instanceof Promise\n    ) {\n      self._81 = 3;\n      self._65 = newValue;\n      finale(self);\n      return;\n    } else if (typeof then === 'function') {\n      doResolve(then.bind(newValue), self);\n      return;\n    }\n  }\n  self._81 = 1;\n  self._65 = newValue;\n  finale(self);\n}\n\nfunction reject(self, newValue) {\n  self._81 = 2;\n  self._65 = newValue;\n  if (Promise._97) {\n    Promise._97(self, newValue);\n  }\n  finale(self);\n}\nfunction finale(self) {\n  if (self._45 === 1) {\n    handle(self, self._54);\n    self._54 = null;\n  }\n  if (self._45 === 2) {\n    for (var i = 0; i < self._54.length; i++) {\n      handle(self, self._54[i]);\n    }\n    self._54 = null;\n  }\n}\n\nfunction Handler(onFulfilled, onRejected, promise){\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, promise) {\n  var done = false;\n  var res = tryCallTwo(fn, function (value) {\n    if (done) return;\n    done = true;\n    resolve(promise, value);\n  }, function (reason) {\n    if (done) return;\n    done = true;\n    reject(promise, reason);\n  })\n  if (!done && res === IS_ERROR) {\n    done = true;\n    reject(promise, LAST_ERROR);\n  }\n}\n\n},{\"asap/raw\":93}],95:[function(require,module,exports){\n'use strict';\n\n//This file contains the ES6 extensions to the core Promises/A+ API\n\nvar Promise = require('./core.js');\n\nmodule.exports = Promise;\n\n/* Static Functions */\n\nvar TRUE = valuePromise(true);\nvar FALSE = valuePromise(false);\nvar NULL = valuePromise(null);\nvar UNDEFINED = valuePromise(undefined);\nvar ZERO = valuePromise(0);\nvar EMPTYSTRING = valuePromise('');\n\nfunction valuePromise(value) {\n  var p = new Promise(Promise._61);\n  p._81 = 1;\n  p._65 = value;\n  return p;\n}\nPromise.resolve = function (value) {\n  if (value instanceof Promise) return value;\n\n  if (value === null) return NULL;\n  if (value === undefined) return UNDEFINED;\n  if (value === true) return TRUE;\n  if (value === false) return FALSE;\n  if (value === 0) return ZERO;\n  if (value === '') return EMPTYSTRING;\n\n  if (typeof value === 'object' || typeof value === 'function') {\n    try {\n      var then = value.then;\n      if (typeof then === 'function') {\n        return new Promise(then.bind(value));\n      }\n    } catch (ex) {\n      return new Promise(function (resolve, reject) {\n        reject(ex);\n      });\n    }\n  }\n  return valuePromise(value);\n};\n\nPromise.all = function (arr) {\n  var args = Array.prototype.slice.call(arr);\n\n  return new Promise(function (resolve, reject) {\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n    function res(i, val) {\n      if (val && (typeof val === 'object' || typeof val === 'function')) {\n        if (val instanceof Promise && val.then === Promise.prototype.then) {\n          while (val._81 === 3) {\n            val = val._65;\n          }\n          if (val._81 === 1) return res(i, val._65);\n          if (val._81 === 2) reject(val._65);\n          val.then(function (val) {\n            res(i, val);\n          }, reject);\n          return;\n        } else {\n          var then = val.then;\n          if (typeof then === 'function') {\n            var p = new Promise(then.bind(val));\n            p.then(function (val) {\n              res(i, val);\n            }, reject);\n            return;\n          }\n        }\n      }\n      args[i] = val;\n      if (--remaining === 0) {\n        resolve(args);\n      }\n    }\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.reject = function (value) {\n  return new Promise(function (resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function (values) {\n  return new Promise(function (resolve, reject) {\n    values.forEach(function(value){\n      Promise.resolve(value).then(resolve, reject);\n    });\n  });\n};\n\n/* Prototype Methods */\n\nPromise.prototype['catch'] = function (onRejected) {\n  return this.then(null, onRejected);\n};\n\n},{\"./core.js\":94}],96:[function(require,module,exports){\n// should work in any browser without browserify\n\nif (typeof Promise.prototype.done !== 'function') {\n  Promise.prototype.done = function (onFulfilled, onRejected) {\n    var self = arguments.length ? this.then.apply(this, arguments) : this\n    self.then(null, function (err) {\n      setTimeout(function () {\n        throw err\n      }, 0)\n    })\n  }\n}\n},{}],97:[function(require,module,exports){\n// not \"use strict\" so we can declare global \"Promise\"\n\nvar asap = require('asap');\n\nif (typeof Promise === 'undefined') {\n  Promise = require('./lib/core.js')\n  require('./lib/es6-extensions.js')\n}\n\nrequire('./polyfill-done.js');\n\n},{\"./lib/core.js\":94,\"./lib/es6-extensions.js\":95,\"./polyfill-done.js\":96,\"asap\":92}]},{},[2])(2)\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(4);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(6)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/._css-loader@0.23.1@css-loader/index.js!../../node_modules/._less-loader@4.0.5@less-loader/dist/cjs.js!./web.less\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/._css-loader@0.23.1@css-loader/index.js!../../node_modules/._less-loader@4.0.5@less-loader/dist/cjs.js!./web.less\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvc3R5bGVzL3dlYi5sZXNzPzc0YWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBdUc7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzLy5fY3NzLWxvYWRlckAwLjIzLjFAY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvLl9sZXNzLWxvYWRlckA0LjAuNUBsZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3dlYi5sZXNzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvLl9zdHlsZS1sb2FkZXJAMC4xMy4yQHN0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvLl9jc3MtbG9hZGVyQDAuMjMuMUBjc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy8uX2xlc3MtbG9hZGVyQDQuMC41QGxlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vd2ViLmxlc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy8uX2Nzcy1sb2FkZXJAMC4yMy4xQGNzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzLy5fbGVzcy1sb2FkZXJANC4wLjVAbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi93ZWIubGVzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3R5bGVzL3dlYi5sZXNzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(5)();\n// imports\n\n\n// module\nexports.push([module.i, \"body,\\ndiv,\\nul,\\nli,\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6,\\ninput,\\nform,\\na,\\np {\\n  margin: 0;\\n  padding: 0;\\n}\\nhtml,\\nbody {\\n  margin: 0;\\n  padding: 0;\\n  font-size: 12px;\\n  font-family: \\\"Microsoft YaHei\\\", Arial, Helvetica, sans-serif;\\n  background: #fff;\\n  color: #222;\\n}\\nol,\\nul,\\nli,\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n  list-style: none;\\n}\\na {\\n  color: #222;\\n  text-decoration: none;\\n  cursor: pointer;\\n  outline: 0;\\n}\\ni,\\nspan {\\n  font-style: normal;\\n  font-weight: normal;\\n}\\ninput,\\nbutton,\\nselect {\\n  font-family: \\\"Microsoft YaHei\\\", Arial, Helvetica, sans-serif;\\n  outline: 0;\\n}\\nli:after {\\n  clear: both;\\n}\\nul:after {\\n  clear: both;\\n}\\nimg {\\n  cursor: default;\\n}\\n.marle25 {\\n  margin-left: 0.33333333rem;\\n}\\n#container {\\n  overflow: hidden;\\n  /*相对定位*/\\n  position: relative;\\n  max-width: 750px;\\n  width: 10rem;\\n  margin: 0 auto;\\n}\\n.boss {\\n  /*绝对定位*/\\n  position: absolute;\\n  max-width: 750px;\\n  width: 10rem;\\n  height: 14.66666667rem;\\n  overflow: hidden;\\n  z-index: 99;\\n}\\n.boss .boss-left {\\n  display: block;\\n  /*相对定位*/\\n  position: relative;\\n  left: 0;\\n  width: 5rem;\\n  height: 14.66666667rem;\\n  float: left;\\n}\\n.boss .boss-right {\\n  display: block;\\n  /*相对定位*/\\n  position: relative;\\n  left: 0;\\n  width: 5rem;\\n  height: 14.66666667rem;\\n  float: right;\\n}\\n.boss-click {\\n  display: none;\\n}\\n.boss1 {\\n  animation: left-boss-go 1s linear;\\n}\\n.boss2 {\\n  animation: right-boss-go 1s linear;\\n}\\n@keyframes left-boss-go {\\n  0% {\\n    transform: translateX(0);\\n  }\\n  100% {\\n    transform: translateX(-5rem);\\n  }\\n}\\n@keyframes right-boss-go {\\n  0% {\\n    transform: translateX(0);\\n  }\\n  100% {\\n    transform: translateX(5rem);\\n  }\\n}\\n.banner {\\n  /*相对定位*/\\n  position: relative;\\n  height: 6rem;\\n  color: #fff;\\n  background: linear-gradient(to bottom, #b9deef, #89d7fb);\\n}\\n.banner .banner-top {\\n  z-index: 5;\\n  width: 10rem;\\n  height: 1rem;\\n}\\n#sliders {\\n  /*绝对定位*/\\n  position: absolute;\\n  top: 0;\\n  z-index: -1;\\n  width: 10rem;\\n  height: 6rem;\\n}\\n#sliders-wrapper {\\n  width: 60rem;\\n}\\n#sliders-wrapper .slider {\\n  float: left;\\n  width: 10rem;\\n  height: 6rem;\\n}\\n#sliders-wrapper .slider:last-child::after {\\n  clear: both;\\n}\\n#sliders-wrapper .slider img {\\n  width: 10rem;\\n  height: 6rem;\\n}\\n#real-banner {\\n  z-index: 5;\\n}\\n.chongqing-weather {\\n  display: inline-block;\\n  z-index: 5;\\n  margin-left: 0.33333333rem;\\n  line-height: 0.6rem;\\n  font-size: 0.64rem;\\n}\\n.xian {\\n  display: inline-block;\\n  /*相对定位*/\\n  position: relative;\\n  margin-left: 0.10666667rem;\\n  top: 0.06666667rem;\\n  height: 0.6rem;\\n  width: 0.08rem;\\n  background: #fff;\\n}\\n.switch {\\n  /*相对定位*/\\n  position: relative;\\n  z-index: 5;\\n  margin-left: 0.13333333rem;\\n  width: 0.4rem;\\n  height: 0.4rem;\\n  cursor: pointer;\\n}\\n.switch img {\\n  z-index: 5;\\n  width: 0.4rem;\\n  height: 0.4rem;\\n  cursor: pointer;\\n}\\n.comparison {\\n  display: block;\\n  /*相对定位*/\\n  position: relative;\\n  float: right;\\n  z-index: 5;\\n  top: 0.17333333rem;\\n  margin-right: 0.26666667rem;\\n  font-size: 0.32rem;\\n  cursor: pointer;\\n}\\n.comparison:after {\\n  clear: both;\\n}\\n.five-update {\\n  margin-left: 0.33333333rem;\\n  z-index: 5;\\n  margin-top: 0.06666667rem;\\n  font-size: 0.26666667rem;\\n}\\n.banner-main {\\n  z-index: 5;\\n  margin-top: 0.46666667rem;\\n  width: 10rem;\\n  height: 4.4rem;\\n}\\n.banner-main #tianqi {\\n  margin-left: 0.33333333rem;\\n  z-index: 5;\\n  font-size: 0.37333333rem;\\n}\\n.sun {\\n  display: block;\\n  /*绝对定位*/\\n  position: absolute;\\n  top: 0.93333333rem;\\n  left: 8.66666667rem;\\n  width: 0.8rem;\\n  height: 0.8rem;\\n}\\n.yun1 {\\n  display: block;\\n  /*绝对定位*/\\n  position: absolute;\\n  top: 1.33333333rem;\\n  left: 5.33333333rem;\\n  width: 0.73333333rem;\\n  height: 0.66666667rem;\\n  animation: piaoyun 4s linear infinite;\\n}\\n.yun2 {\\n  display: block;\\n  /*绝对定位*/\\n  position: absolute;\\n  top: 1.46666667rem;\\n  left: 3.86666667rem;\\n  width: 0.66666667rem;\\n  height: 0.66666667rem;\\n  animation: piaoyun 2.5s linear infinite;\\n}\\n.yun3 {\\n  display: block;\\n  /*绝对定位*/\\n  position: absolute;\\n  top: 2rem;\\n  left: 4.66666667rem;\\n  width: 0.66666667rem;\\n  height: 0.6rem;\\n  animation: piaoyun 3s linear infinite;\\n}\\n@keyframes piaoyun {\\n  0% {\\n    transform: translate(0, 0);\\n    opacity: 1;\\n  }\\n  50% {\\n    transform: translate(0.26666667rem, -0.4rem);\\n    opacity: 0.5;\\n  }\\n  100% {\\n    transform: translate(0, 0);\\n    opacity: 1;\\n  }\\n}\\n.condition2 {\\n  z-index: 5;\\n  width: 10rem;\\n  height: 2.26666667rem;\\n}\\n.condition2 #min-weather {\\n  display: block;\\n  float: left;\\n  margin-left: 0.33333333rem;\\n  z-index: 5;\\n  height: 2.26666667rem;\\n  width: 2.66666667rem;\\n  font-size: 1.6rem;\\n}\\n.condition2 .teperature {\\n  display: block;\\n  float: left;\\n  z-index: 5;\\n  top: 0.26666667rem;\\n  left: 0.13333333rem;\\n  width: 2.66666667rem;\\n  font-size: 0.37333333rem;\\n}\\n.condition2 .teperature:after {\\n  clear: both;\\n}\\n.condition2 .teperature #weather {\\n  display: block;\\n  /*相对定位*/\\n  position: relative;\\n  z-index: 5;\\n  top: 0.93333333rem;\\n  width: 1.06666667rem;\\n  height: 0.33333333rem;\\n  font-size: 0.37333333rem;\\n}\\n.condition2 .teperature .xiangxi {\\n  display: block;\\n  /*相对定位*/\\n  position: relative;\\n  z-index: 5;\\n  top: 0.93333333rem;\\n  width: 3.06666667rem;\\n  height: 0.53333333rem;\\n  font-size: 0.37333333rem;\\n}\\n.date-condition {\\n  margin-left: 0.33333333rem;\\n  z-index: 5;\\n  font-size: 0.34666667rem;\\n}\\n.date-condition .month-day {\\n  z-index: 5;\\n  margin-right: 0.26666667rem;\\n}\\n.twenty-four {\\n  float: left;\\n  margin-left: 0.33333333rem;\\n  z-index: 5;\\n  margin-top: 0.26666667rem;\\n  line-height: 0.6rem;\\n  width: 2rem;\\n  text-align: center;\\n  font-size: 0.32rem;\\n  background: #111;\\n  border-radius: 0.13333333rem;\\n  cursor: pointer;\\n}\\n.air {\\n  float: left;\\n  margin-left: 0.33333333rem;\\n  z-index: 5;\\n  margin-top: 0.26666667rem;\\n  line-height: 0.6rem;\\n  width: 2rem;\\n  color: #5ce14f;\\n  text-align: center;\\n  font-size: 0.32rem;\\n  background: #111;\\n  border-radius: 0.13333333rem;\\n  cursor: pointer;\\n}\\n.air .leaf {\\n  /*相对定位*/\\n  position: relative;\\n  z-index: 5;\\n  top: 0.04rem;\\n  left: -0.13333333rem;\\n  width: 0.33333333rem;\\n  height: 0.33333333rem;\\n  border-right: 1px solid #5ce14f;\\n}\\n.air:after {\\n  clear: both;\\n}\\n.main {\\n  /*相对定位*/\\n  position: relative;\\n  height: 8.53333333rem;\\n  background: linear-gradient(to bottom, #FCFAF2, #7DB9DE);\\n}\\n.main .day-condition1 {\\n  display: block;\\n  /*相对定位*/\\n  position: relative;\\n  width: 9.6rem;\\n  top: 0.26666667rem;\\n  margin: 0 auto;\\n}\\n.main .day-condition1 li {\\n  float: left;\\n  width: 1.06666667rem;\\n  height: 1.33333333rem;\\n  margin-right: 0.33333333rem;\\n  text-align: center;\\n  font-size: 0.34666667rem;\\n  color: #666;\\n}\\n.main .day-condition2 {\\n  display: block;\\n  /*相对定位*/\\n  position: relative;\\n  width: 9.6rem;\\n  top: 0.26666667rem;\\n  margin: 0 auto;\\n}\\n.main .day-condition2 li {\\n  float: left;\\n  width: 1.06666667rem;\\n  height: 1.33333333rem;\\n  margin-right: 0.33333333rem;\\n  text-align: center;\\n  font-size: 0.34666667rem;\\n  color: #666;\\n}\\n.main .day-condition3 {\\n  display: block;\\n  /*相对定位*/\\n  position: relative;\\n  width: 9.6rem;\\n  margin: 0 auto;\\n}\\n.main .day-condition3 li {\\n  float: left;\\n  width: 1.06666667rem;\\n  height: 1.33333333rem;\\n  margin-right: 0.33333333rem;\\n  text-align: center;\\n  font-size: 0.32rem;\\n  color: #666;\\n}\\n.day-condition1 li:last-child,\\n.day-condition2 li:last-child,\\n.day-condition3 li:last-child {\\n  margin-right: 0;\\n}\\n.day-condition1 li span {\\n  display: block;\\n  width: 1.06666667rem;\\n  height: 0.36rem;\\n}\\n.day-condition1 li img {\\n  display: block;\\n  width: 0.66666667rem;\\n  height: 0.66666667rem;\\n  margin: 0 auto;\\n  margin-top: 0.33333333rem;\\n}\\n#canvas {\\n  display: block;\\n  /*相对定位*/\\n  position: relative;\\n  top: -0.53333333rem;\\n  margin: 0 auto;\\n}\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvLl9jc3MtbG9hZGVyQDAuMjMuMUBjc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcz9mMWM5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpQkFBaUI7QUFDakM7QUFDQTtBQUNBLHdDQUF3QyxnQkFBZ0I7QUFDeEQsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpQkFBaUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXHJcbiovXHJcbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIGxpc3QgPSBbXTtcclxuXHJcblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xyXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuXHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gdGhpc1tpXTtcclxuXHRcdFx0aWYoaXRlbVsyXSkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgaXRlbVsxXSArIFwifVwiKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChpdGVtWzFdKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xyXG5cdH07XHJcblxyXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XHJcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xyXG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXHJcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcclxuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xyXG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXHJcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XHJcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcclxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcclxuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cclxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcclxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcclxuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcclxuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xyXG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cdHJldHVybiBsaXN0O1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy8uX2Nzcy1sb2FkZXJAMC4yMy4xQGNzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nvar stylesInDom = {},\n\tmemoize = function(fn) {\n\t\tvar memo;\n\t\treturn function () {\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\t\treturn memo;\n\t\t};\n\t},\n\tisOldIE = memoize(function() {\n\t\treturn /msie [6-9]\\b/.test(self.navigator.userAgent.toLowerCase());\n\t}),\n\tgetHeadElement = memoize(function () {\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\n\t}),\n\tsingletonElement = null,\n\tsingletonCounter = 0,\n\tstyleElementsInsertedAtTop = [];\n\nmodule.exports = function(list, options) {\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the bottom of <head>.\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list);\n\taddStylesToDom(styles, options);\n\n\treturn function update(newList) {\n\t\tvar mayRemove = [];\n\t\tfor(var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\n\t\t\t\t\tdomStyle.parts[j]();\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction addStylesToDom(styles, options) {\n\tfor(var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles(list) {\n\tvar styles = [];\n\tvar newStyles = {};\n\tfor(var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\t\tif(!newStyles[id])\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse\n\t\t\tnewStyles[id].parts.push(part);\n\t}\n\treturn styles;\n}\n\nfunction insertStyleElement(options, styleElement) {\n\tvar head = getHeadElement();\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\n\tif (options.insertAt === \"top\") {\n\t\tif(!lastStyleElementInsertedAtTop) {\n\t\t\thead.insertBefore(styleElement, head.firstChild);\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\thead.appendChild(styleElement);\n\t\t}\n\t\tstyleElementsInsertedAtTop.push(styleElement);\n\t} else if (options.insertAt === \"bottom\") {\n\t\thead.appendChild(styleElement);\n\t} else {\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\n\t}\n}\n\nfunction removeStyleElement(styleElement) {\n\tstyleElement.parentNode.removeChild(styleElement);\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\n\tif(idx >= 0) {\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement(options) {\n\tvar styleElement = document.createElement(\"style\");\n\tstyleElement.type = \"text/css\";\n\tinsertStyleElement(options, styleElement);\n\treturn styleElement;\n}\n\nfunction createLinkElement(options) {\n\tvar linkElement = document.createElement(\"link\");\n\tlinkElement.rel = \"stylesheet\";\n\tinsertStyleElement(options, linkElement);\n\treturn linkElement;\n}\n\nfunction addStyle(obj, options) {\n\tvar styleElement, update, remove;\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\n\t} else if(obj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\") {\n\t\tstyleElement = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, styleElement);\n\t\tremove = function() {\n\t\t\tremoveStyleElement(styleElement);\n\t\t\tif(styleElement.href)\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\n\t\t};\n\t} else {\n\t\tstyleElement = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, styleElement);\n\t\tremove = function() {\n\t\t\tremoveStyleElement(styleElement);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle(newObj) {\n\t\tif(newObj) {\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\n\t\t\t\treturn;\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (styleElement.styleSheet) {\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = styleElement.childNodes;\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\n\t\tif (childNodes.length) {\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyleElement.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag(styleElement, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyleElement.setAttribute(\"media\", media)\n\t}\n\n\tif(styleElement.styleSheet) {\n\t\tstyleElement.styleSheet.cssText = css;\n\t} else {\n\t\twhile(styleElement.firstChild) {\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\n\t\t}\n\t\tstyleElement.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink(linkElement, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\tif(sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = linkElement.href;\n\n\tlinkElement.href = URL.createObjectURL(blob);\n\n\tif(oldSrc)\n\t\tURL.revokeObjectURL(oldSrc);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ })
/******/ ]);